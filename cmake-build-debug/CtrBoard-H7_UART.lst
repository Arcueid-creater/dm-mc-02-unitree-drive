
D:/git_project/dm-mc-02-unitree-drive/cmake-build-debug/CtrBoard-H7_UART.elf:     file format elf32-littlearm


Disassembly of section .text:

080002cc <__aeabi_frsub>:
 80002cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002d0:	e002      	b.n	80002d8 <__addsf3>
 80002d2:	bf00      	nop

080002d4 <__aeabi_fsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d8 <__addsf3>:
 80002d8:	0042      	lsls	r2, r0, #1
 80002da:	bf1f      	itttt	ne
 80002dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002e0:	ea92 0f03 	teqne	r2, r3
 80002e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ec:	d06a      	beq.n	80003c4 <__addsf3+0xec>
 80002ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002f6:	bfc1      	itttt	gt
 80002f8:	18d2      	addgt	r2, r2, r3
 80002fa:	4041      	eorgt	r1, r0
 80002fc:	4048      	eorgt	r0, r1
 80002fe:	4041      	eorgt	r1, r0
 8000300:	bfb8      	it	lt
 8000302:	425b      	neglt	r3, r3
 8000304:	2b19      	cmp	r3, #25
 8000306:	bf88      	it	hi
 8000308:	4770      	bxhi	lr
 800030a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800030e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000312:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000316:	bf18      	it	ne
 8000318:	4240      	negne	r0, r0
 800031a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000322:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000326:	bf18      	it	ne
 8000328:	4249      	negne	r1, r1
 800032a:	ea92 0f03 	teq	r2, r3
 800032e:	d03f      	beq.n	80003b0 <__addsf3+0xd8>
 8000330:	f1a2 0201 	sub.w	r2, r2, #1
 8000334:	fa41 fc03 	asr.w	ip, r1, r3
 8000338:	eb10 000c 	adds.w	r0, r0, ip
 800033c:	f1c3 0320 	rsb	r3, r3, #32
 8000340:	fa01 f103 	lsl.w	r1, r1, r3
 8000344:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000348:	d502      	bpl.n	8000350 <__addsf3+0x78>
 800034a:	4249      	negs	r1, r1
 800034c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000350:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000354:	d313      	bcc.n	800037e <__addsf3+0xa6>
 8000356:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800035a:	d306      	bcc.n	800036a <__addsf3+0x92>
 800035c:	0840      	lsrs	r0, r0, #1
 800035e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000362:	f102 0201 	add.w	r2, r2, #1
 8000366:	2afe      	cmp	r2, #254	@ 0xfe
 8000368:	d251      	bcs.n	800040e <__addsf3+0x136>
 800036a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800036e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000372:	bf08      	it	eq
 8000374:	f020 0001 	biceq.w	r0, r0, #1
 8000378:	ea40 0003 	orr.w	r0, r0, r3
 800037c:	4770      	bx	lr
 800037e:	0049      	lsls	r1, r1, #1
 8000380:	eb40 0000 	adc.w	r0, r0, r0
 8000384:	3a01      	subs	r2, #1
 8000386:	bf28      	it	cs
 8000388:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800038c:	d2ed      	bcs.n	800036a <__addsf3+0x92>
 800038e:	fab0 fc80 	clz	ip, r0
 8000392:	f1ac 0c08 	sub.w	ip, ip, #8
 8000396:	ebb2 020c 	subs.w	r2, r2, ip
 800039a:	fa00 f00c 	lsl.w	r0, r0, ip
 800039e:	bfaa      	itet	ge
 80003a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003a4:	4252      	neglt	r2, r2
 80003a6:	4318      	orrge	r0, r3
 80003a8:	bfbc      	itt	lt
 80003aa:	40d0      	lsrlt	r0, r2
 80003ac:	4318      	orrlt	r0, r3
 80003ae:	4770      	bx	lr
 80003b0:	f092 0f00 	teq	r2, #0
 80003b4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b8:	bf06      	itte	eq
 80003ba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003be:	3201      	addeq	r2, #1
 80003c0:	3b01      	subne	r3, #1
 80003c2:	e7b5      	b.n	8000330 <__addsf3+0x58>
 80003c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003cc:	bf18      	it	ne
 80003ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003d2:	d021      	beq.n	8000418 <__addsf3+0x140>
 80003d4:	ea92 0f03 	teq	r2, r3
 80003d8:	d004      	beq.n	80003e4 <__addsf3+0x10c>
 80003da:	f092 0f00 	teq	r2, #0
 80003de:	bf08      	it	eq
 80003e0:	4608      	moveq	r0, r1
 80003e2:	4770      	bx	lr
 80003e4:	ea90 0f01 	teq	r0, r1
 80003e8:	bf1c      	itt	ne
 80003ea:	2000      	movne	r0, #0
 80003ec:	4770      	bxne	lr
 80003ee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003f2:	d104      	bne.n	80003fe <__addsf3+0x126>
 80003f4:	0040      	lsls	r0, r0, #1
 80003f6:	bf28      	it	cs
 80003f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003fc:	4770      	bx	lr
 80003fe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000402:	bf3c      	itt	cc
 8000404:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000408:	4770      	bxcc	lr
 800040a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000412:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000416:	4770      	bx	lr
 8000418:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800041c:	bf16      	itet	ne
 800041e:	4608      	movne	r0, r1
 8000420:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000424:	4601      	movne	r1, r0
 8000426:	0242      	lsls	r2, r0, #9
 8000428:	bf06      	itte	eq
 800042a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800042e:	ea90 0f01 	teqeq	r0, r1
 8000432:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000436:	4770      	bx	lr

08000438 <__aeabi_ui2f>:
 8000438:	f04f 0300 	mov.w	r3, #0
 800043c:	e004      	b.n	8000448 <__aeabi_i2f+0x8>
 800043e:	bf00      	nop

08000440 <__aeabi_i2f>:
 8000440:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	ea5f 0c00 	movs.w	ip, r0
 800044c:	bf08      	it	eq
 800044e:	4770      	bxeq	lr
 8000450:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000454:	4601      	mov	r1, r0
 8000456:	f04f 0000 	mov.w	r0, #0
 800045a:	e01c      	b.n	8000496 <__aeabi_l2f+0x2a>

0800045c <__aeabi_ul2f>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f04f 0300 	mov.w	r3, #0
 8000468:	e00a      	b.n	8000480 <__aeabi_l2f+0x14>
 800046a:	bf00      	nop

0800046c <__aeabi_l2f>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000478:	d502      	bpl.n	8000480 <__aeabi_l2f+0x14>
 800047a:	4240      	negs	r0, r0
 800047c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000480:	ea5f 0c01 	movs.w	ip, r1
 8000484:	bf02      	ittt	eq
 8000486:	4684      	moveq	ip, r0
 8000488:	4601      	moveq	r1, r0
 800048a:	2000      	moveq	r0, #0
 800048c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000490:	bf08      	it	eq
 8000492:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000496:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800049a:	fabc f28c 	clz	r2, ip
 800049e:	3a08      	subs	r2, #8
 80004a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004a4:	db10      	blt.n	80004c8 <__aeabi_l2f+0x5c>
 80004a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80004aa:	4463      	add	r3, ip
 80004ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80004b0:	f1c2 0220 	rsb	r2, r2, #32
 80004b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b8:	fa20 f202 	lsr.w	r2, r0, r2
 80004bc:	eb43 0002 	adc.w	r0, r3, r2
 80004c0:	bf08      	it	eq
 80004c2:	f020 0001 	biceq.w	r0, r0, #1
 80004c6:	4770      	bx	lr
 80004c8:	f102 0220 	add.w	r2, r2, #32
 80004cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80004d0:	f1c2 0220 	rsb	r2, r2, #32
 80004d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d8:	fa21 f202 	lsr.w	r2, r1, r2
 80004dc:	eb43 0002 	adc.w	r0, r3, r2
 80004e0:	bf08      	it	eq
 80004e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fmul>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d06f      	beq.n	80005e0 <__aeabi_fmul+0xf8>
 8000500:	441a      	add	r2, r3
 8000502:	ea80 0c01 	eor.w	ip, r0, r1
 8000506:	0240      	lsls	r0, r0, #9
 8000508:	bf18      	it	ne
 800050a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800050e:	d01e      	beq.n	800054e <__aeabi_fmul+0x66>
 8000510:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000514:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000518:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800051c:	fba0 3101 	umull	r3, r1, r0, r1
 8000520:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000524:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000528:	bf3e      	ittt	cc
 800052a:	0049      	lslcc	r1, r1, #1
 800052c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	ea40 0001 	orr.w	r0, r0, r1
 8000536:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800053a:	2afd      	cmp	r2, #253	@ 0xfd
 800053c:	d81d      	bhi.n	800057a <__aeabi_fmul+0x92>
 800053e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000542:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000546:	bf08      	it	eq
 8000548:	f020 0001 	biceq.w	r0, r0, #1
 800054c:	4770      	bx	lr
 800054e:	f090 0f00 	teq	r0, #0
 8000552:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000556:	bf08      	it	eq
 8000558:	0249      	lsleq	r1, r1, #9
 800055a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800055e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000562:	3a7f      	subs	r2, #127	@ 0x7f
 8000564:	bfc2      	ittt	gt
 8000566:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800056a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800056e:	4770      	bxgt	lr
 8000570:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000574:	f04f 0300 	mov.w	r3, #0
 8000578:	3a01      	subs	r2, #1
 800057a:	dc5d      	bgt.n	8000638 <__aeabi_fmul+0x150>
 800057c:	f112 0f19 	cmn.w	r2, #25
 8000580:	bfdc      	itt	le
 8000582:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000586:	4770      	bxle	lr
 8000588:	f1c2 0200 	rsb	r2, r2, #0
 800058c:	0041      	lsls	r1, r0, #1
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	f1c2 0220 	rsb	r2, r2, #32
 8000596:	fa00 fc02 	lsl.w	ip, r0, r2
 800059a:	ea5f 0031 	movs.w	r0, r1, rrx
 800059e:	f140 0000 	adc.w	r0, r0, #0
 80005a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80005a6:	bf08      	it	eq
 80005a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005ac:	4770      	bx	lr
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fmul+0xce>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fmul+0xe6>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e78f      	b.n	8000500 <__aeabi_fmul+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	bf18      	it	ne
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d00a      	beq.n	8000606 <__aeabi_fmul+0x11e>
 80005f0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f4:	bf18      	it	ne
 80005f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005fa:	d1d8      	bne.n	80005ae <__aeabi_fmul+0xc6>
 80005fc:	ea80 0001 	eor.w	r0, r0, r1
 8000600:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f090 0f00 	teq	r0, #0
 800060a:	bf17      	itett	ne
 800060c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000610:	4608      	moveq	r0, r1
 8000612:	f091 0f00 	teqne	r1, #0
 8000616:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800061a:	d014      	beq.n	8000646 <__aeabi_fmul+0x15e>
 800061c:	ea92 0f0c 	teq	r2, ip
 8000620:	d101      	bne.n	8000626 <__aeabi_fmul+0x13e>
 8000622:	0242      	lsls	r2, r0, #9
 8000624:	d10f      	bne.n	8000646 <__aeabi_fmul+0x15e>
 8000626:	ea93 0f0c 	teq	r3, ip
 800062a:	d103      	bne.n	8000634 <__aeabi_fmul+0x14c>
 800062c:	024b      	lsls	r3, r1, #9
 800062e:	bf18      	it	ne
 8000630:	4608      	movne	r0, r1
 8000632:	d108      	bne.n	8000646 <__aeabi_fmul+0x15e>
 8000634:	ea80 0001 	eor.w	r0, r0, r1
 8000638:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800063c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000640:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000644:	4770      	bx	lr
 8000646:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800064a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800064e:	4770      	bx	lr

08000650 <__aeabi_fdiv>:
 8000650:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000654:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000658:	bf1e      	ittt	ne
 800065a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800065e:	ea92 0f0c 	teqne	r2, ip
 8000662:	ea93 0f0c 	teqne	r3, ip
 8000666:	d069      	beq.n	800073c <__aeabi_fdiv+0xec>
 8000668:	eba2 0203 	sub.w	r2, r2, r3
 800066c:	ea80 0c01 	eor.w	ip, r0, r1
 8000670:	0249      	lsls	r1, r1, #9
 8000672:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000676:	d037      	beq.n	80006e8 <__aeabi_fdiv+0x98>
 8000678:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800067c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000680:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000684:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000688:	428b      	cmp	r3, r1
 800068a:	bf38      	it	cc
 800068c:	005b      	lslcc	r3, r3, #1
 800068e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000692:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000696:	428b      	cmp	r3, r1
 8000698:	bf24      	itt	cs
 800069a:	1a5b      	subcs	r3, r3, r1
 800069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80006a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80006a4:	bf24      	itt	cs
 80006a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80006aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80006ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80006b2:	bf24      	itt	cs
 80006b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80006b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80006bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80006c0:	bf24      	itt	cs
 80006c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80006c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	bf18      	it	ne
 80006ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80006d2:	d1e0      	bne.n	8000696 <__aeabi_fdiv+0x46>
 80006d4:	2afd      	cmp	r2, #253	@ 0xfd
 80006d6:	f63f af50 	bhi.w	800057a <__aeabi_fmul+0x92>
 80006da:	428b      	cmp	r3, r1
 80006dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006e0:	bf08      	it	eq
 80006e2:	f020 0001 	biceq.w	r0, r0, #1
 80006e6:	4770      	bx	lr
 80006e8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80006ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006f0:	327f      	adds	r2, #127	@ 0x7f
 80006f2:	bfc2      	ittt	gt
 80006f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80006f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006fc:	4770      	bxgt	lr
 80006fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000702:	f04f 0300 	mov.w	r3, #0
 8000706:	3a01      	subs	r2, #1
 8000708:	e737      	b.n	800057a <__aeabi_fmul+0x92>
 800070a:	f092 0f00 	teq	r2, #0
 800070e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000712:	bf02      	ittt	eq
 8000714:	0040      	lsleq	r0, r0, #1
 8000716:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800071a:	3a01      	subeq	r2, #1
 800071c:	d0f9      	beq.n	8000712 <__aeabi_fdiv+0xc2>
 800071e:	ea40 000c 	orr.w	r0, r0, ip
 8000722:	f093 0f00 	teq	r3, #0
 8000726:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800072a:	bf02      	ittt	eq
 800072c:	0049      	lsleq	r1, r1, #1
 800072e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000732:	3b01      	subeq	r3, #1
 8000734:	d0f9      	beq.n	800072a <__aeabi_fdiv+0xda>
 8000736:	ea41 010c 	orr.w	r1, r1, ip
 800073a:	e795      	b.n	8000668 <__aeabi_fdiv+0x18>
 800073c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000740:	ea92 0f0c 	teq	r2, ip
 8000744:	d108      	bne.n	8000758 <__aeabi_fdiv+0x108>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	f47f af7d 	bne.w	8000646 <__aeabi_fmul+0x15e>
 800074c:	ea93 0f0c 	teq	r3, ip
 8000750:	f47f af70 	bne.w	8000634 <__aeabi_fmul+0x14c>
 8000754:	4608      	mov	r0, r1
 8000756:	e776      	b.n	8000646 <__aeabi_fmul+0x15e>
 8000758:	ea93 0f0c 	teq	r3, ip
 800075c:	d104      	bne.n	8000768 <__aeabi_fdiv+0x118>
 800075e:	024b      	lsls	r3, r1, #9
 8000760:	f43f af4c 	beq.w	80005fc <__aeabi_fmul+0x114>
 8000764:	4608      	mov	r0, r1
 8000766:	e76e      	b.n	8000646 <__aeabi_fmul+0x15e>
 8000768:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800076c:	bf18      	it	ne
 800076e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000772:	d1ca      	bne.n	800070a <__aeabi_fdiv+0xba>
 8000774:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000778:	f47f af5c 	bne.w	8000634 <__aeabi_fmul+0x14c>
 800077c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000780:	f47f af3c 	bne.w	80005fc <__aeabi_fmul+0x114>
 8000784:	e75f      	b.n	8000646 <__aeabi_fmul+0x15e>
 8000786:	bf00      	nop

08000788 <__gesf2>:
 8000788:	f04f 3cff 	mov.w	ip, #4294967295
 800078c:	e006      	b.n	800079c <__cmpsf2+0x4>
 800078e:	bf00      	nop

08000790 <__lesf2>:
 8000790:	f04f 0c01 	mov.w	ip, #1
 8000794:	e002      	b.n	800079c <__cmpsf2+0x4>
 8000796:	bf00      	nop

08000798 <__cmpsf2>:
 8000798:	f04f 0c01 	mov.w	ip, #1
 800079c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007ac:	bf18      	it	ne
 80007ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007b2:	d011      	beq.n	80007d8 <__cmpsf2+0x40>
 80007b4:	b001      	add	sp, #4
 80007b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80007ba:	bf18      	it	ne
 80007bc:	ea90 0f01 	teqne	r0, r1
 80007c0:	bf58      	it	pl
 80007c2:	ebb2 0003 	subspl.w	r0, r2, r3
 80007c6:	bf88      	it	hi
 80007c8:	17c8      	asrhi	r0, r1, #31
 80007ca:	bf38      	it	cc
 80007cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80007d0:	bf18      	it	ne
 80007d2:	f040 0001 	orrne.w	r0, r0, #1
 80007d6:	4770      	bx	lr
 80007d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007dc:	d102      	bne.n	80007e4 <__cmpsf2+0x4c>
 80007de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80007e2:	d105      	bne.n	80007f0 <__cmpsf2+0x58>
 80007e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80007e8:	d1e4      	bne.n	80007b4 <__cmpsf2+0x1c>
 80007ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80007ee:	d0e1      	beq.n	80007b4 <__cmpsf2+0x1c>
 80007f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <__aeabi_cfrcmple>:
 80007f8:	4684      	mov	ip, r0
 80007fa:	4608      	mov	r0, r1
 80007fc:	4661      	mov	r1, ip
 80007fe:	e7ff      	b.n	8000800 <__aeabi_cfcmpeq>

08000800 <__aeabi_cfcmpeq>:
 8000800:	b50f      	push	{r0, r1, r2, r3, lr}
 8000802:	f7ff ffc9 	bl	8000798 <__cmpsf2>
 8000806:	2800      	cmp	r0, #0
 8000808:	bf48      	it	mi
 800080a:	f110 0f00 	cmnmi.w	r0, #0
 800080e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000810 <__aeabi_fcmpeq>:
 8000810:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000814:	f7ff fff4 	bl	8000800 <__aeabi_cfcmpeq>
 8000818:	bf0c      	ite	eq
 800081a:	2001      	moveq	r0, #1
 800081c:	2000      	movne	r0, #0
 800081e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000822:	bf00      	nop

08000824 <__aeabi_fcmplt>:
 8000824:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000828:	f7ff ffea 	bl	8000800 <__aeabi_cfcmpeq>
 800082c:	bf34      	ite	cc
 800082e:	2001      	movcc	r0, #1
 8000830:	2000      	movcs	r0, #0
 8000832:	f85d fb08 	ldr.w	pc, [sp], #8
 8000836:	bf00      	nop

08000838 <__aeabi_fcmple>:
 8000838:	f84d ed08 	str.w	lr, [sp, #-8]!
 800083c:	f7ff ffe0 	bl	8000800 <__aeabi_cfcmpeq>
 8000840:	bf94      	ite	ls
 8000842:	2001      	movls	r0, #1
 8000844:	2000      	movhi	r0, #0
 8000846:	f85d fb08 	ldr.w	pc, [sp], #8
 800084a:	bf00      	nop

0800084c <__aeabi_fcmpge>:
 800084c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000850:	f7ff ffd2 	bl	80007f8 <__aeabi_cfrcmple>
 8000854:	bf94      	ite	ls
 8000856:	2001      	movls	r0, #1
 8000858:	2000      	movhi	r0, #0
 800085a:	f85d fb08 	ldr.w	pc, [sp], #8
 800085e:	bf00      	nop

08000860 <__aeabi_fcmpgt>:
 8000860:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000864:	f7ff ffc8 	bl	80007f8 <__aeabi_cfrcmple>
 8000868:	bf34      	ite	cc
 800086a:	2001      	movcc	r0, #1
 800086c:	2000      	movcs	r0, #0
 800086e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000872:	bf00      	nop

08000874 <__aeabi_f2iz>:
 8000874:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000878:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800087c:	d30f      	bcc.n	800089e <__aeabi_f2iz+0x2a>
 800087e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000882:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000886:	d90d      	bls.n	80008a4 <__aeabi_f2iz+0x30>
 8000888:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800088c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000890:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000894:	fa23 f002 	lsr.w	r0, r3, r2
 8000898:	bf18      	it	ne
 800089a:	4240      	negne	r0, r0
 800089c:	4770      	bx	lr
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	4770      	bx	lr
 80008a4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80008a8:	d101      	bne.n	80008ae <__aeabi_f2iz+0x3a>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d105      	bne.n	80008ba <__aeabi_f2iz+0x46>
 80008ae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008b8:	4770      	bx	lr
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	4770      	bx	lr

080008c0 <__aeabi_f2uiz>:
 80008c0:	0042      	lsls	r2, r0, #1
 80008c2:	d20e      	bcs.n	80008e2 <__aeabi_f2uiz+0x22>
 80008c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80008c8:	d30b      	bcc.n	80008e2 <__aeabi_f2uiz+0x22>
 80008ca:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80008ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80008d2:	d409      	bmi.n	80008e8 <__aeabi_f2uiz+0x28>
 80008d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008dc:	fa23 f002 	lsr.w	r0, r3, r2
 80008e0:	4770      	bx	lr
 80008e2:	f04f 0000 	mov.w	r0, #0
 80008e6:	4770      	bx	lr
 80008e8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80008ec:	d101      	bne.n	80008f2 <__aeabi_f2uiz+0x32>
 80008ee:	0242      	lsls	r2, r0, #9
 80008f0:	d102      	bne.n	80008f8 <__aeabi_f2uiz+0x38>
 80008f2:	f04f 30ff 	mov.w	r0, #4294967295
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <__aeabi_uldivmod>:
 8000900:	b953      	cbnz	r3, 8000918 <__aeabi_uldivmod+0x18>
 8000902:	b94a      	cbnz	r2, 8000918 <__aeabi_uldivmod+0x18>
 8000904:	2900      	cmp	r1, #0
 8000906:	bf08      	it	eq
 8000908:	2800      	cmpeq	r0, #0
 800090a:	bf1c      	itt	ne
 800090c:	f04f 31ff 	movne.w	r1, #4294967295
 8000910:	f04f 30ff 	movne.w	r0, #4294967295
 8000914:	f000 b80c 	b.w	8000930 <__aeabi_idiv0>
 8000918:	f1ad 0c08 	sub.w	ip, sp, #8
 800091c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000920:	f005 fcc2 	bl	80062a8 <__udivmoddi4>
 8000924:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800092c:	b004      	add	sp, #16
 800092e:	4770      	bx	lr

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <memcpy>:
 8000934:	4684      	mov	ip, r0
 8000936:	ea41 0300 	orr.w	r3, r1, r0
 800093a:	f013 0303 	ands.w	r3, r3, #3
 800093e:	d16d      	bne.n	8000a1c <memcpy+0xe8>
 8000940:	3a40      	subs	r2, #64	@ 0x40
 8000942:	d341      	bcc.n	80009c8 <memcpy+0x94>
 8000944:	f851 3b04 	ldr.w	r3, [r1], #4
 8000948:	f840 3b04 	str.w	r3, [r0], #4
 800094c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000950:	f840 3b04 	str.w	r3, [r0], #4
 8000954:	f851 3b04 	ldr.w	r3, [r1], #4
 8000958:	f840 3b04 	str.w	r3, [r0], #4
 800095c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000960:	f840 3b04 	str.w	r3, [r0], #4
 8000964:	f851 3b04 	ldr.w	r3, [r1], #4
 8000968:	f840 3b04 	str.w	r3, [r0], #4
 800096c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000970:	f840 3b04 	str.w	r3, [r0], #4
 8000974:	f851 3b04 	ldr.w	r3, [r1], #4
 8000978:	f840 3b04 	str.w	r3, [r0], #4
 800097c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000980:	f840 3b04 	str.w	r3, [r0], #4
 8000984:	f851 3b04 	ldr.w	r3, [r1], #4
 8000988:	f840 3b04 	str.w	r3, [r0], #4
 800098c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000990:	f840 3b04 	str.w	r3, [r0], #4
 8000994:	f851 3b04 	ldr.w	r3, [r1], #4
 8000998:	f840 3b04 	str.w	r3, [r0], #4
 800099c:	f851 3b04 	ldr.w	r3, [r1], #4
 80009a0:	f840 3b04 	str.w	r3, [r0], #4
 80009a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80009a8:	f840 3b04 	str.w	r3, [r0], #4
 80009ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80009b0:	f840 3b04 	str.w	r3, [r0], #4
 80009b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80009b8:	f840 3b04 	str.w	r3, [r0], #4
 80009bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80009c0:	f840 3b04 	str.w	r3, [r0], #4
 80009c4:	3a40      	subs	r2, #64	@ 0x40
 80009c6:	d2bd      	bcs.n	8000944 <memcpy+0x10>
 80009c8:	3230      	adds	r2, #48	@ 0x30
 80009ca:	d311      	bcc.n	80009f0 <memcpy+0xbc>
 80009cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80009d0:	f840 3b04 	str.w	r3, [r0], #4
 80009d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80009d8:	f840 3b04 	str.w	r3, [r0], #4
 80009dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80009e0:	f840 3b04 	str.w	r3, [r0], #4
 80009e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80009e8:	f840 3b04 	str.w	r3, [r0], #4
 80009ec:	3a10      	subs	r2, #16
 80009ee:	d2ed      	bcs.n	80009cc <memcpy+0x98>
 80009f0:	320c      	adds	r2, #12
 80009f2:	d305      	bcc.n	8000a00 <memcpy+0xcc>
 80009f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80009f8:	f840 3b04 	str.w	r3, [r0], #4
 80009fc:	3a04      	subs	r2, #4
 80009fe:	d2f9      	bcs.n	80009f4 <memcpy+0xc0>
 8000a00:	3204      	adds	r2, #4
 8000a02:	d008      	beq.n	8000a16 <memcpy+0xe2>
 8000a04:	07d2      	lsls	r2, r2, #31
 8000a06:	bf1c      	itt	ne
 8000a08:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000a0c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000a10:	d301      	bcc.n	8000a16 <memcpy+0xe2>
 8000a12:	880b      	ldrh	r3, [r1, #0]
 8000a14:	8003      	strh	r3, [r0, #0]
 8000a16:	4660      	mov	r0, ip
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2a08      	cmp	r2, #8
 8000a1e:	d313      	bcc.n	8000a48 <memcpy+0x114>
 8000a20:	078b      	lsls	r3, r1, #30
 8000a22:	d08d      	beq.n	8000940 <memcpy+0xc>
 8000a24:	f010 0303 	ands.w	r3, r0, #3
 8000a28:	d08a      	beq.n	8000940 <memcpy+0xc>
 8000a2a:	f1c3 0304 	rsb	r3, r3, #4
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	07db      	lsls	r3, r3, #31
 8000a32:	bf1c      	itt	ne
 8000a34:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000a38:	f800 3b01 	strbne.w	r3, [r0], #1
 8000a3c:	d380      	bcc.n	8000940 <memcpy+0xc>
 8000a3e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000a42:	f820 3b02 	strh.w	r3, [r0], #2
 8000a46:	e77b      	b.n	8000940 <memcpy+0xc>
 8000a48:	3a04      	subs	r2, #4
 8000a4a:	d3d9      	bcc.n	8000a00 <memcpy+0xcc>
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a52:	f800 3b01 	strb.w	r3, [r0], #1
 8000a56:	d2f9      	bcs.n	8000a4c <memcpy+0x118>
 8000a58:	780b      	ldrb	r3, [r1, #0]
 8000a5a:	7003      	strb	r3, [r0, #0]
 8000a5c:	784b      	ldrb	r3, [r1, #1]
 8000a5e:	7043      	strb	r3, [r0, #1]
 8000a60:	788b      	ldrb	r3, [r1, #2]
 8000a62:	7083      	strb	r3, [r0, #2]
 8000a64:	4660      	mov	r0, ip
 8000a66:	4770      	bx	lr

08000a68 <deregister_tm_clones>:
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <deregister_tm_clones+0x10>)
 8000a6a:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <deregister_tm_clones+0x14>)
 8000a6c:	4283      	cmp	r3, r0
 8000a6e:	d002      	beq.n	8000a76 <deregister_tm_clones+0xe>
 8000a70:	4b03      	ldr	r3, [pc, #12]	@ (8000a80 <deregister_tm_clones+0x18>)
 8000a72:	b103      	cbz	r3, 8000a76 <deregister_tm_clones+0xe>
 8000a74:	4718      	bx	r3
 8000a76:	4770      	bx	lr
 8000a78:	2400056c 	.word	0x2400056c
 8000a7c:	2400056c 	.word	0x2400056c
 8000a80:	00000000 	.word	0x00000000

08000a84 <register_tm_clones>:
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <register_tm_clones+0x18>)
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <register_tm_clones+0x1c>)
 8000a88:	1a1b      	subs	r3, r3, r0
 8000a8a:	0fd9      	lsrs	r1, r3, #31
 8000a8c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000a90:	1049      	asrs	r1, r1, #1
 8000a92:	d002      	beq.n	8000a9a <register_tm_clones+0x16>
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <register_tm_clones+0x20>)
 8000a96:	b103      	cbz	r3, 8000a9a <register_tm_clones+0x16>
 8000a98:	4718      	bx	r3
 8000a9a:	4770      	bx	lr
 8000a9c:	2400056c 	.word	0x2400056c
 8000aa0:	2400056c 	.word	0x2400056c
 8000aa4:	00000000 	.word	0x00000000

08000aa8 <__do_global_dtors_aux>:
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	4c06      	ldr	r4, [pc, #24]	@ (8000ac4 <__do_global_dtors_aux+0x1c>)
 8000aac:	7823      	ldrb	r3, [r4, #0]
 8000aae:	b943      	cbnz	r3, 8000ac2 <__do_global_dtors_aux+0x1a>
 8000ab0:	f7ff ffda 	bl	8000a68 <deregister_tm_clones>
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <__do_global_dtors_aux+0x20>)
 8000ab6:	b113      	cbz	r3, 8000abe <__do_global_dtors_aux+0x16>
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <__do_global_dtors_aux+0x24>)
 8000aba:	f3af 8000 	nop.w
 8000abe:	2301      	movs	r3, #1
 8000ac0:	7023      	strb	r3, [r4, #0]
 8000ac2:	bd10      	pop	{r4, pc}
 8000ac4:	2400056c 	.word	0x2400056c
 8000ac8:	00000000 	.word	0x00000000
 8000acc:	08007020 	.word	0x08007020

08000ad0 <frame_dummy>:
 8000ad0:	b508      	push	{r3, lr}
 8000ad2:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <frame_dummy+0x18>)
 8000ad4:	b11b      	cbz	r3, 8000ade <frame_dummy+0xe>
 8000ad6:	4905      	ldr	r1, [pc, #20]	@ (8000aec <frame_dummy+0x1c>)
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <frame_dummy+0x20>)
 8000ada:	f3af 8000 	nop.w
 8000ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ae2:	f7ff bfcf 	b.w	8000a84 <register_tm_clones>
 8000ae6:	bf00      	nop
 8000ae8:	00000000 	.word	0x00000000
 8000aec:	24000570 	.word	0x24000570
 8000af0:	08007020 	.word	0x08007020

08000af4 <crc_ccitt_byte>:
	0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};


static uint16_t crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	80fb      	strh	r3, [r7, #6]
 8000b00:	4613      	mov	r3, r2
 8000b02:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	88f9      	ldrh	r1, [r7, #6]
 8000b0c:	797b      	ldrb	r3, [r7, #5]
 8000b0e:	404b      	eors	r3, r1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4905      	ldr	r1, [pc, #20]	@ (8000b28 <crc_ccitt_byte+0x34>)
 8000b14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	08007038 	.word	0x08007038

08000b2c <crc_ccitt>:
 *	@crc: previous CRC value
 *	@buffer: data pointer
 *	@len: number of bytes in the buffer
 */
static uint16_t crc_ccitt(uint16_t crc, uint8_t const *buffer, size_t len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	81fb      	strh	r3, [r7, #14]
	uint16_t tmp = crc;
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	82fb      	strh	r3, [r7, #22]
	while (len--)
 8000b3e:	e00a      	b.n	8000b56 <crc_ccitt+0x2a>
		tmp = crc_ccitt_byte(tmp, *buffer++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	8afb      	ldrh	r3, [r7, #22]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffd1 	bl	8000af4 <crc_ccitt_byte>
 8000b52:	4603      	mov	r3, r0
 8000b54:	82fb      	strh	r3, [r7, #22]
	while (len--)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ef      	bne.n	8000b40 <crc_ccitt+0x14>
	return tmp;
 8000b60:	8afb      	ldrh	r3, [r7, #22]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <modify_data>:
//    }
//    return CRC32;
//}

int modify_data(MOTOR_send *motor_s)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    motor_s->hex_len = 17;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2211      	movs	r2, #17
 8000b78:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    motor_s->motor_send_data.head[0] = 0xFE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	22fe      	movs	r2, #254	@ 0xfe
 8000b80:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    motor_s->motor_send_data.head[1] = 0xEE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	22ee      	movs	r2, #238	@ 0xee
 8000b88:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	
//		SATURATE(motor_s->id,   0,    15);
//		SATURATE(motor_s->mode, 0,    7);
		SATURATE(motor_s->K_P,  0.0f,   25.599f);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000b92:	f04f 0100 	mov.w	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe44 	bl	8000824 <__aeabi_fcmplt>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <modify_data+0x42>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f04f 0200 	mov.w	r2, #0
 8000ba8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000bac:	e00d      	b.n	8000bca <modify_data+0x5e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bb4:	4989      	ldr	r1, [pc, #548]	@ (8000ddc <modify_data+0x270>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe52 	bl	8000860 <__aeabi_fcmpgt>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <modify_data+0x5e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a85      	ldr	r2, [pc, #532]	@ (8000ddc <modify_data+0x270>)
 8000bc6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
		SATURATE(motor_s->K_W,  0.0f,   25.599f);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000bd0:	f04f 0100 	mov.w	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe25 	bl	8000824 <__aeabi_fcmplt>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d005      	beq.n	8000bec <modify_data+0x80>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f04f 0200 	mov.w	r2, #0
 8000be6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8000bea:	e00d      	b.n	8000c08 <modify_data+0x9c>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000bf2:	497a      	ldr	r1, [pc, #488]	@ (8000ddc <modify_data+0x270>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fe33 	bl	8000860 <__aeabi_fcmpgt>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <modify_data+0x9c>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a76      	ldr	r2, [pc, #472]	@ (8000ddc <modify_data+0x270>)
 8000c04:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
		SATURATE(motor_s->T,   -127.99f,  127.99f);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8000c0e:	4974      	ldr	r1, [pc, #464]	@ (8000de0 <modify_data+0x274>)
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe07 	bl	8000824 <__aeabi_fcmplt>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <modify_data+0xba>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a70      	ldr	r2, [pc, #448]	@ (8000de0 <modify_data+0x274>)
 8000c20:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8000c24:	e00d      	b.n	8000c42 <modify_data+0xd6>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8000c2c:	496d      	ldr	r1, [pc, #436]	@ (8000de4 <modify_data+0x278>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fe16 	bl	8000860 <__aeabi_fcmpgt>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <modify_data+0xd6>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a69      	ldr	r2, [pc, #420]	@ (8000de4 <modify_data+0x278>)
 8000c3e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
		SATURATE(motor_s->W,   -804.00f,  804.00f);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000c48:	4967      	ldr	r1, [pc, #412]	@ (8000de8 <modify_data+0x27c>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fdea 	bl	8000824 <__aeabi_fcmplt>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d004      	beq.n	8000c60 <modify_data+0xf4>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a63      	ldr	r2, [pc, #396]	@ (8000de8 <modify_data+0x27c>)
 8000c5a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8000c5e:	e00d      	b.n	8000c7c <modify_data+0x110>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000c66:	4961      	ldr	r1, [pc, #388]	@ (8000dec <modify_data+0x280>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdf9 	bl	8000860 <__aeabi_fcmpgt>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <modify_data+0x110>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a5d      	ldr	r2, [pc, #372]	@ (8000dec <modify_data+0x280>)
 8000c78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
		SATURATE(motor_s->Pos, -411774.0f,  411774.0f);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000c82:	495b      	ldr	r1, [pc, #364]	@ (8000df0 <modify_data+0x284>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fdcd 	bl	8000824 <__aeabi_fcmplt>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <modify_data+0x12e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a57      	ldr	r2, [pc, #348]	@ (8000df0 <modify_data+0x284>)
 8000c94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8000c98:	e00d      	b.n	8000cb6 <modify_data+0x14a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000ca0:	4954      	ldr	r1, [pc, #336]	@ (8000df4 <modify_data+0x288>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fddc 	bl	8000860 <__aeabi_fcmpgt>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <modify_data+0x14a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a50      	ldr	r2, [pc, #320]	@ (8000df4 <modify_data+0x288>)
 8000cb2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    motor_s->motor_send_data.mode.id   = motor_s->id;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8000cc8:	f361 0303 	bfi	r3, r1, #0, #4
 8000ccc:	f882 3096 	strb.w	r3, [r2, #150]	@ 0x96
    motor_s->motor_send_data.mode.status  = motor_s->mode;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	b2d9      	uxtb	r1, r3
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8000ce2:	f361 1306 	bfi	r3, r1, #4, #3
 8000ce6:	f882 3096 	strb.w	r3, [r2, #150]	@ 0x96
    motor_s->motor_send_data.comd.k_pos  = motor_s->K_P/25.6f*32768;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000cf0:	4941      	ldr	r1, [pc, #260]	@ (8000df8 <modify_data+0x28c>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fcac 	bl	8000650 <__aeabi_fdiv>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fbf2 	bl	80004e8 <__aeabi_fmul>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fdb4 	bl	8000874 <__aeabi_f2iz>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8a3 209f 	strh.w	r2, [r3, #159]	@ 0x9f
    motor_s->motor_send_data.comd.k_spd  = motor_s->K_W/25.6f*32768;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000d1c:	4936      	ldr	r1, [pc, #216]	@ (8000df8 <modify_data+0x28c>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fc96 	bl	8000650 <__aeabi_fdiv>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbdc 	bl	80004e8 <__aeabi_fmul>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fd9e 	bl	8000874 <__aeabi_f2iz>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f8a3 20a1 	strh.w	r2, [r3, #161]	@ 0xa1
    motor_s->motor_send_data.comd.pos_des  = motor_s->Pos/6.2832f*32768;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000d48:	492c      	ldr	r1, [pc, #176]	@ (8000dfc <modify_data+0x290>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fc80 	bl	8000650 <__aeabi_fdiv>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbc6 	bl	80004e8 <__aeabi_fmul>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd88 	bl	8000874 <__aeabi_f2iz>
 8000d64:	4602      	mov	r2, r0
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f8c3 209b 	str.w	r2, [r3, #155]	@ 0x9b
    motor_s->motor_send_data.comd.spd_des  = motor_s->W/6.2832f*256;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000d72:	4922      	ldr	r1, [pc, #136]	@ (8000dfc <modify_data+0x290>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fc6b 	bl	8000650 <__aeabi_fdiv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbb1 	bl	80004e8 <__aeabi_fmul>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fd73 	bl	8000874 <__aeabi_f2iz>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f8a3 2099 	strh.w	r2, [r3, #153]	@ 0x99
    motor_s->motor_send_data.comd.tor_des  = motor_s->T*256;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8000d9e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fba0 	bl	80004e8 <__aeabi_fmul>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fd62 	bl	8000874 <__aeabi_f2iz>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f8a3 2097 	strh.w	r2, [r3, #151]	@ 0x97
    motor_s->motor_send_data.CRC16 = crc_ccitt(0, (uint8_t *)&motor_s->motor_send_data, 15);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3394      	adds	r3, #148	@ 0x94
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff feb2 	bl	8000b2c <crc_ccitt>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8a3 20a3 	strh.w	r2, [r3, #163]	@ 0xa3
    return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	41cccac1 	.word	0x41cccac1
 8000de0:	c2fffae1 	.word	0xc2fffae1
 8000de4:	42fffae1 	.word	0x42fffae1
 8000de8:	c4490000 	.word	0xc4490000
 8000dec:	44490000 	.word	0x44490000
 8000df0:	c8c90fc0 	.word	0xc8c90fc0
 8000df4:	48c90fc0 	.word	0x48c90fc0
 8000df8:	41cccccd 	.word	0x41cccccd
 8000dfc:	40c90ff9 	.word	0x40c90ff9

08000e00 <extract_data>:

int extract_data(MOTOR_recv *motor_r)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    if(motor_r->motor_recv_data.CRC16 !=
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	89dc      	ldrh	r4, [r3, #14]
        crc_ccitt(0, (uint8_t *)&motor_r->motor_recv_data, 14)){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	220e      	movs	r2, #14
 8000e10:	4619      	mov	r1, r3
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff fe8a 	bl	8000b2c <crc_ccitt>
 8000e18:	4603      	mov	r3, r0
    if(motor_r->motor_recv_data.CRC16 !=
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	d005      	beq.n	8000e2a <extract_data+0x2a>
        // printf("[WARNING] Receive data CRC error");
        motor_r->correct = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
        return motor_r->correct;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	e06c      	b.n	8000f04 <extract_data+0x104>
    }
    else
		{
        motor_r->motor_id = motor_r->motor_recv_data.mode.id;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        motor_r->mode = motor_r->motor_recv_data.mode.status;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        motor_r->Temp = motor_r->motor_recv_data.fbk.temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000e54:	461a      	mov	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	@ 0x28
        motor_r->MError = motor_r->motor_recv_data.fbk.MError;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7b1b      	ldrb	r3, [r3, #12]
 8000e5e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        motor_r->W = ((float)motor_r->motor_recv_data.fbk.speed/256)*6.2832f ;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fae3 	bl	8000440 <__aeabi_i2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fbe5 	bl	8000650 <__aeabi_fdiv>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4920      	ldr	r1, [pc, #128]	@ (8000f0c <extract_data+0x10c>)
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb2c 	bl	80004e8 <__aeabi_fmul>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	635a      	str	r2, [r3, #52]	@ 0x34
        motor_r->T = ((float)motor_r->motor_recv_data.fbk.torque) / 256;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff facd 	bl	8000440 <__aeabi_i2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fbcf 	bl	8000650 <__aeabi_fdiv>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        motor_r->Pos = 6.2832f*((float)motor_r->motor_recv_data.fbk.pos) / 32768;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fabd 	bl	8000440 <__aeabi_i2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4910      	ldr	r1, [pc, #64]	@ (8000f0c <extract_data+0x10c>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb0c 	bl	80004e8 <__aeabi_fmul>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fbba 	bl	8000650 <__aeabi_fdiv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	639a      	str	r2, [r3, #56]	@ 0x38
				motor_r->footForce = motor_r->motor_recv_data.fbk.force;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	899b      	ldrh	r3, [r3, #12]
 8000ee8:	f3c3 03cb 	ubfx	r3, r3, #3, #12
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff faa2 	bl	8000438 <__aeabi_ui2f>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
				motor_r->correct = 1;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	621a      	str	r2, [r3, #32]
        return motor_r->correct;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
    }
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	40c90ff9 	.word	0x40c90ff9

08000f10 <SERVO_Send_recv>:

HAL_StatusTypeDef SERVO_Send_recv(MOTOR_send *pData, MOTOR_recv *rData)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    uint16_t rxlen = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	817b      	strh	r3, [r7, #10]

    modify_data(pData);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fe24 	bl	8000b6c <modify_data>


    SET_huart2_DE_UP();
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	4825      	ldr	r0, [pc, #148]	@ (8000fc0 <SERVO_Send_recv+0xb0>)
 8000f2a:	f000 ff49 	bl	8001dc0 <HAL_GPIO_WritePin>
    SET_huart3_DE_UP();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f34:	4823      	ldr	r0, [pc, #140]	@ (8000fc4 <SERVO_Send_recv+0xb4>)
 8000f36:	f000 ff43 	bl	8001dc0 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&pData->channel, (uint8_t *)&(pData->motor_send_data), sizeof(pData->motor_send_data), 10);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f103 0194 	add.w	r1, r3, #148	@ 0x94
 8000f42:	230a      	movs	r3, #10
 8000f44:	2211      	movs	r2, #17
 8000f46:	f003 fd3f 	bl	80049c8 <HAL_UART_Transmit>


    SET_huart3_DE_DOWN();
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f50:	481c      	ldr	r0, [pc, #112]	@ (8000fc4 <SERVO_Send_recv+0xb4>)
 8000f52:	f000 ff35 	bl	8001dc0 <HAL_GPIO_WritePin>
    SET_huart2_DE_DOWN();
 8000f56:	2200      	movs	r2, #0
 8000f58:	2110      	movs	r1, #16
 8000f5a:	4819      	ldr	r0, [pc, #100]	@ (8000fc0 <SERVO_Send_recv+0xb0>)
 8000f5c:	f000 ff30 	bl	8001dc0 <HAL_GPIO_WritePin>
    HAL_UARTEx_ReceiveToIdle(&pData->channel, (uint8_t *)&(rData->motor_recv_data), sizeof(rData->motor_recv_data), &rxlen, 10);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	f107 030a 	add.w	r3, r7, #10
 8000f68:	220a      	movs	r2, #10
 8000f6a:	9200      	str	r2, [sp, #0]
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	f004 ff5d 	bl	8005e2c <HAL_UARTEx_ReceiveToIdle>
		

    if(rxlen == 0)
 8000f72:	897b      	ldrh	r3, [r7, #10]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <SERVO_Send_recv+0x6c>

      return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e01c      	b.n	8000fb6 <SERVO_Send_recv+0xa6>

    if(rxlen != sizeof(rData->motor_recv_data))
 8000f7c:	897b      	ldrh	r3, [r7, #10]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d001      	beq.n	8000f86 <SERVO_Send_recv+0x76>
			return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e017      	b.n	8000fb6 <SERVO_Send_recv+0xa6>

    uint8_t *rp = (uint8_t *)&rData->motor_recv_data;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
    if((rp[0] == 0xFE || rp[0] == 0xFD) && rp[1] == 0xEE)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	d003      	beq.n	8000f9a <SERVO_Send_recv+0x8a>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f98:	d10c      	bne.n	8000fb4 <SERVO_Send_recv+0xa4>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2bee      	cmp	r3, #238	@ 0xee
 8000fa2:	d107      	bne.n	8000fb4 <SERVO_Send_recv+0xa4>
    {
        rData->correct = 1;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	621a      	str	r2, [r3, #32]
        extract_data(rData);
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f7ff ff28 	bl	8000e00 <extract_data>
        return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <SERVO_Send_recv+0xa6>
    }

    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	58020c00 	.word	0x58020c00
 8000fc4:	58020400 	.word	0x58020400

08000fc8 <MX_GPIO_Init>:
     PE8   ------> UART7_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	4b48      	ldr	r3, [pc, #288]	@ (8001100 <MX_GPIO_Init+0x138>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	4a46      	ldr	r2, [pc, #280]	@ (8001100 <MX_GPIO_Init+0x138>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fee:	4b44      	ldr	r3, [pc, #272]	@ (8001100 <MX_GPIO_Init+0x138>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffc:	4b40      	ldr	r3, [pc, #256]	@ (8001100 <MX_GPIO_Init+0x138>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001002:	4a3f      	ldr	r2, [pc, #252]	@ (8001100 <MX_GPIO_Init+0x138>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100c:	4b3c      	ldr	r3, [pc, #240]	@ (8001100 <MX_GPIO_Init+0x138>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <MX_GPIO_Init+0x138>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	4a37      	ldr	r2, [pc, #220]	@ (8001100 <MX_GPIO_Init+0x138>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102a:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <MX_GPIO_Init+0x138>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <MX_GPIO_Init+0x138>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	4a30      	ldr	r2, [pc, #192]	@ (8001100 <MX_GPIO_Init+0x138>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_GPIO_Init+0x138>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_GPIO_Init+0x138>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <MX_GPIO_Init+0x138>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_GPIO_Init+0x138>)
 8001068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001074:	2304      	movs	r3, #4
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8001084:	2304      	movs	r3, #4
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	481d      	ldr	r0, [pc, #116]	@ (8001104 <MX_GPIO_Init+0x13c>)
 8001090:	f000 fcee 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001094:	2308      	movs	r3, #8
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80010a4:	230b      	movs	r3, #11
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4815      	ldr	r0, [pc, #84]	@ (8001104 <MX_GPIO_Init+0x13c>)
 80010b0:	f000 fcde 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80010b4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <MX_GPIO_Init+0x13c>)
 80010d2:	f000 fccd 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e8:	2307      	movs	r3, #7
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_GPIO_Init+0x140>)
 80010f4:	f000 fcbc 	bl	8001a70 <HAL_GPIO_Init>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	@ 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58024400 	.word	0x58024400
 8001104:	58021000 	.word	0x58021000
 8001108:	58020000 	.word	0x58020000

0800110c <main>:
  * @brief  The application entry point.
  * @retval int
  */
  int a=0;
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001110:	f000 fb1a 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001114:	f000 f816 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001118:	f7ff ff56 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800111c:	f000 f96c 	bl	80013f8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001120:	f000 f9ba 	bl	8001498 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
    init_example_motor();
 8001124:	f004 ffd0 	bl	80060c8 <init_example_motor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      a++;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <main+0x34>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <main+0x34>)
 8001130:	6013      	str	r3, [r2, #0]
      unitree_motor_control();
 8001132:	f005 f88b 	bl	800624c <unitree_motor_control>
      HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f000 fb94 	bl	8001864 <HAL_Delay>
      a++;
 800113c:	e7f4      	b.n	8001128 <main+0x1c>
 800113e:	bf00      	nop
 8001140:	24000588 	.word	0x24000588

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09c      	sub	sp, #112	@ 0x70
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114e:	224c      	movs	r2, #76	@ 0x4c
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f005 fd0c 	bl	8006b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2220      	movs	r2, #32
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f005 fd06 	bl	8006b70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001164:	2002      	movs	r0, #2
 8001166:	f000 fe43 	bl	8001df0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b2b      	ldr	r3, [pc, #172]	@ (800121c <SystemClock_Config+0xd8>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a2a      	ldr	r2, [pc, #168]	@ (800121c <SystemClock_Config+0xd8>)
 8001174:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <SystemClock_Config+0xd8>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001186:	bf00      	nop
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <SystemClock_Config+0xd8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001194:	d1f8      	bne.n	8001188 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001196:	2301      	movs	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011ac:	2328      	movs	r3, #40	@ 0x28
 80011ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011bc:	230c      	movs	r3, #12
 80011be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fe49 	bl	8001e64 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011d8:	f000 f822 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	233f      	movs	r3, #63	@ 0x3f
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2303      	movs	r3, #3
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011e8:	2308      	movs	r3, #8
 80011ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011ec:	2340      	movs	r3, #64	@ 0x40
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011f0:	2340      	movs	r3, #64	@ 0x40
 80011f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011fa:	2340      	movs	r3, #64	@ 0x40
 80011fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2103      	movs	r1, #3
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fa08 	bl	8002618 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800120e:	f000 f807 	bl	8001220 <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3770      	adds	r7, #112	@ 0x70
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	58024800 	.word	0x58024800

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_MspInit+0x30>)
 8001234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001238:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_MspInit+0x30>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_MspInit+0x30>)
 8001244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	58024400 	.word	0x58024400

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 fac1 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f005 fca6 	bl	8006c30 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	24050000 	.word	0x24050000
 8001310:	00000400 	.word	0x00000400
 8001314:	2400058c 	.word	0x2400058c
 8001318:	240009f8 	.word	0x240009f8

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <SystemInit+0xc0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	2b06      	cmp	r3, #6
 800132a:	d807      	bhi.n	800133c <SystemInit+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <SystemInit+0xc0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 030f 	bic.w	r3, r3, #15
 8001334:	4a29      	ldr	r2, [pc, #164]	@ (80013dc <SystemInit+0xc0>)
 8001336:	f043 0307 	orr.w	r3, r3, #7
 800133a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800133c:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <SystemInit+0xc4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <SystemInit+0xc4>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <SystemInit+0xc4>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800134e:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <SystemInit+0xc4>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4923      	ldr	r1, [pc, #140]	@ (80013e0 <SystemInit+0xc4>)
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <SystemInit+0xc8>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800135a:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <SystemInit+0xc0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <SystemInit+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <SystemInit+0xc0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 030f 	bic.w	r3, r3, #15
 800136e:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <SystemInit+0xc0>)
 8001370:	f043 0307 	orr.w	r3, r3, #7
 8001374:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <SystemInit+0xc4>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <SystemInit+0xc4>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <SystemInit+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <SystemInit+0xc4>)
 800138a:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <SystemInit+0xcc>)
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <SystemInit+0xc4>)
 8001390:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <SystemInit+0xd0>)
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <SystemInit+0xc4>)
 8001396:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <SystemInit+0xd4>)
 8001398:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <SystemInit+0xc4>)
 800139c:	2200      	movs	r2, #0
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <SystemInit+0xc4>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <SystemInit+0xd4>)
 80013a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <SystemInit+0xc4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <SystemInit+0xc4>)
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <SystemInit+0xd4>)
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <SystemInit+0xc4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <SystemInit+0xc4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <SystemInit+0xc4>)
 80013be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <SystemInit+0xc4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <SystemInit+0xd8>)
 80013cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	52002000 	.word	0x52002000
 80013e0:	58024400 	.word	0x58024400
 80013e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e8:	02020200 	.word	0x02020200
 80013ec:	01ff0000 	.word	0x01ff0000
 80013f0:	01010280 	.word	0x01010280
 80013f4:	52004000 	.word	0x52004000

080013f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013fc:	4b23      	ldr	r3, [pc, #140]	@ (800148c <MX_USART2_UART_Init+0x94>)
 80013fe:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <MX_USART2_UART_Init+0x98>)
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4000000;
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001404:	4a23      	ldr	r2, [pc, #140]	@ (8001494 <MX_USART2_UART_Init+0x9c>)
 8001406:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <MX_USART2_UART_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <MX_USART2_UART_Init+0x94>)
 800141c:	220c      	movs	r2, #12
 800141e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <MX_USART2_UART_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <MX_USART2_UART_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800143e:	2300      	movs	r3, #0
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001446:	f004 fbd3 	bl	8005bf0 <HAL_RS485Ex_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001450:	f7ff fee6 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	480d      	ldr	r0, [pc, #52]	@ (800148c <MX_USART2_UART_Init+0x94>)
 8001458:	f004 fc6c 	bl	8005d34 <HAL_UARTEx_SetTxFifoThreshold>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001462:	f7ff fedd 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <MX_USART2_UART_Init+0x94>)
 800146a:	f004 fca1 	bl	8005db0 <HAL_UARTEx_SetRxFifoThreshold>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001474:	f7ff fed4 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_USART2_UART_Init+0x94>)
 800147a:	f004 fc23 	bl	8005cc4 <HAL_UARTEx_DisableFifoMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001484:	f7ff fecc 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	24000590 	.word	0x24000590
 8001490:	40004400 	.word	0x40004400
 8001494:	003d0900 	.word	0x003d0900

08001498 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <MX_USART3_UART_Init+0x94>)
 800149e:	4a24      	ldr	r2, [pc, #144]	@ (8001530 <MX_USART3_UART_Init+0x98>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014a4:	4a23      	ldr	r2, [pc, #140]	@ (8001534 <MX_USART3_UART_Init+0x9c>)
 80014a6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014bc:	220c      	movs	r2, #12
 80014be:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80014de:	2300      	movs	r3, #0
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	4811      	ldr	r0, [pc, #68]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014e6:	f004 fb83 	bl	8005bf0 <HAL_RS485Ex_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f7ff fe96 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_USART3_UART_Init+0x94>)
 80014f8:	f004 fc1c 	bl	8005d34 <HAL_UARTEx_SetTxFifoThreshold>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART3_UART_Init+0x6e>
  {
    Error_Handler();
 8001502:	f7ff fe8d 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4808      	ldr	r0, [pc, #32]	@ (800152c <MX_USART3_UART_Init+0x94>)
 800150a:	f004 fc51 	bl	8005db0 <HAL_UARTEx_SetRxFifoThreshold>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 8001514:	f7ff fe84 	bl	8001220 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <MX_USART3_UART_Init+0x94>)
 800151a:	f004 fbd3 	bl	8005cc4 <HAL_UARTEx_DisableFifoMode>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 8001524:	f7ff fe7c 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24000624 	.word	0x24000624
 8001530:	40004800 	.word	0x40004800
 8001534:	003d0900 	.word	0x003d0900

08001538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0bc      	sub	sp, #240	@ 0xf0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	22b8      	movs	r2, #184	@ 0xb8
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fb09 	bl	8006b70 <memset>
  if(uartHandle->Instance==USART2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5f      	ldr	r2, [pc, #380]	@ (80016e0 <HAL_UART_MspInit+0x1a8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d146      	bne.n	80015f6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001568:	f04f 0202 	mov.w	r2, #2
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fc00 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800158a:	f7ff fe49 	bl	8001220 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	4b55      	ldr	r3, [pc, #340]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001594:	4a53      	ldr	r2, [pc, #332]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800159e:	4b51      	ldr	r3, [pc, #324]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 80015a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	4b4d      	ldr	r3, [pc, #308]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	4a4c      	ldr	r2, [pc, #304]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015bc:	4b49      	ldr	r3, [pc, #292]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD4     ------> USART2_DE
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015ca:	2370      	movs	r3, #112	@ 0x70
 80015cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e2:	2307      	movs	r3, #7
 80015e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015ec:	4619      	mov	r1, r3
 80015ee:	483e      	ldr	r0, [pc, #248]	@ (80016e8 <HAL_UART_MspInit+0x1b0>)
 80015f0:	f000 fa3e 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015f4:	e070      	b.n	80016d8 <HAL_UART_MspInit+0x1a0>
  else if(uartHandle->Instance==USART3)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a3c      	ldr	r2, [pc, #240]	@ (80016ec <HAL_UART_MspInit+0x1b4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d16b      	bne.n	80016d8 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001600:	f04f 0202 	mov.w	r2, #2
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fbb4 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001622:	f7ff fdfd 	bl	8001220 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001626:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162c:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 800162e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001632:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001636:	4b2b      	ldr	r3, [pc, #172]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800163c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	4a26      	ldr	r2, [pc, #152]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001672:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <HAL_UART_MspInit+0x1ac>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001684:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800169a:	2307      	movs	r3, #7
 800169c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016a4:	4619      	mov	r1, r3
 80016a6:	4812      	ldr	r0, [pc, #72]	@ (80016f0 <HAL_UART_MspInit+0x1b8>)
 80016a8:	f000 f9e2 	bl	8001a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c6:	2307      	movs	r3, #7
 80016c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <HAL_UART_MspInit+0x1b0>)
 80016d4:	f000 f9cc 	bl	8001a70 <HAL_GPIO_Init>
}
 80016d8:	bf00      	nop
 80016da:	37f0      	adds	r7, #240	@ 0xf0
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40004400 	.word	0x40004400
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020c00 	.word	0x58020c00
 80016ec:	40004800 	.word	0x40004800
 80016f0:	58020400 	.word	0x58020400

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800172c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f8:	f7ff fe10 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	@ (8001734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	@ (8001740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f005 fa8b 	bl	8006c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff fcf1 	bl	800110c <main>
  bx  lr
 800172a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001730:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001734:	2400056c 	.word	0x2400056c
  ldr r2, =_sidata
 8001738:	08007284 	.word	0x08007284
  ldr r2, =_sbss
 800173c:	2400056c 	.word	0x2400056c
  ldr r4, =_ebss
 8001740:	240009f4 	.word	0x240009f4

08001744 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC3_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174e:	2003      	movs	r0, #3
 8001750:	f000 f95c 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001754:	f001 f916 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8001758:	4602      	mov	r2, r0
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <HAL_Init+0x68>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	4913      	ldr	r1, [pc, #76]	@ (80017b4 <HAL_Init+0x6c>)
 8001766:	5ccb      	ldrb	r3, [r1, r3]
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <HAL_Init+0x68>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	4a0e      	ldr	r2, [pc, #56]	@ (80017b4 <HAL_Init+0x6c>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a0b      	ldr	r2, [pc, #44]	@ (80017b8 <HAL_Init+0x70>)
 800178a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <HAL_Init+0x74>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001792:	200f      	movs	r0, #15
 8001794:	f000 f814 	bl	80017c0 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e002      	b.n	80017a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017a2:	f7ff fd43 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	58024400 	.word	0x58024400
 80017b4:	08007238 	.word	0x08007238
 80017b8:	24000004 	.word	0x24000004
 80017bc:	24000000 	.word	0x24000000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_InitTick+0x60>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e021      	b.n	8001818 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_InitTick+0x64>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_InitTick+0x60>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f933 	bl	8001a56 <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f90b 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	@ (8001828 <HAL_InitTick+0x68>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2400000c 	.word	0x2400000c
 8001824:	24000000 	.word	0x24000000
 8001828:	24000008 	.word	0x24000008

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_IncTick+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_IncTick+0x20>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a03      	ldr	r2, [pc, #12]	@ (800184c <HAL_IncTick+0x20>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	2400000c 	.word	0x2400000c
 800184c:	240006b8 	.word	0x240006b8

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b02      	ldr	r3, [pc, #8]	@ (8001860 <HAL_GetTick+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	240006b8 	.word	0x240006b8

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fff0 	bl	8001850 <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffe0 	bl	8001850 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2400000c 	.word	0x2400000c

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x40>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00
 80018f0:	05fa0000 	.word	0x05fa0000

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	@ (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	@ (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	@ 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff90 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff49 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff60 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff92 	bl	8001964 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff61 	bl	8001910 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb2 	bl	80019c8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a7e:	4b86      	ldr	r3, [pc, #536]	@ (8001c98 <HAL_GPIO_Init+0x228>)
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a82:	e18c      	b.n	8001d9e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 817e 	beq.w	8001d98 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x44>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d130      	bne.n	8001b16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aea:	2201      	movs	r2, #1
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 0201 	and.w	r2, r3, #1
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d017      	beq.n	8001b52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d123      	bne.n	8001ba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0203 	and.w	r2, r3, #3
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80d8 	beq.w	8001d98 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c9c <HAL_GPIO_Init+0x22c>)
 8001bea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bee:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_GPIO_Init+0x22c>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_GPIO_Init+0x22c>)
 8001bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a26      	ldr	r2, [pc, #152]	@ (8001ca0 <HAL_GPIO_Init+0x230>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_GPIO_Init+0x234>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d04a      	beq.n	8001cc8 <HAL_GPIO_Init+0x258>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca8 <HAL_GPIO_Init+0x238>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d02b      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cac <HAL_GPIO_Init+0x23c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d025      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <HAL_GPIO_Init+0x240>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d01f      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_GPIO_Init+0x244>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <HAL_GPIO_Init+0x248>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <HAL_GPIO_Init+0x24c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_GPIO_Init+0x250>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <HAL_GPIO_Init+0x254>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x206>
 8001c72:	2309      	movs	r3, #9
 8001c74:	e029      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c76:	230a      	movs	r3, #10
 8001c78:	e027      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e025      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e023      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e021      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e01f      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e01d      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e01b      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e019      	b.n	8001cca <HAL_GPIO_Init+0x25a>
 8001c96:	bf00      	nop
 8001c98:	58000080 	.word	0x58000080
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	58000400 	.word	0x58000400
 8001ca4:	58020000 	.word	0x58020000
 8001ca8:	58020400 	.word	0x58020400
 8001cac:	58020800 	.word	0x58020800
 8001cb0:	58020c00 	.word	0x58020c00
 8001cb4:	58021000 	.word	0x58021000
 8001cb8:	58021400 	.word	0x58021400
 8001cbc:	58021800 	.word	0x58021800
 8001cc0:	58021c00 	.word	0x58021c00
 8001cc4:	58022400 	.word	0x58022400
 8001cc8:	2300      	movs	r3, #0
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cda:	4938      	ldr	r1, [pc, #224]	@ (8001dbc <HAL_GPIO_Init+0x34c>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f ae6b 	bne.w	8001a84 <HAL_GPIO_Init+0x14>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3724      	adds	r7, #36	@ 0x24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	58000400 	.word	0x58000400

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001df8:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_PWREx_ConfigSupply+0x70>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d00a      	beq.n	8001e1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e04:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_PWREx_ConfigSupply+0x70>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e01f      	b.n	8001e56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e01d      	b.n	8001e56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_PWREx_ConfigSupply+0x70>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	490f      	ldr	r1, [pc, #60]	@ (8001e60 <HAL_PWREx_ConfigSupply+0x70>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e2a:	f7ff fd11 	bl	8001850 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e30:	e009      	b.n	8001e46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e32:	f7ff fd0d 	bl	8001850 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e40:	d901      	bls.n	8001e46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_PWREx_ConfigSupply+0x70>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e52:	d1ee      	bne.n	8001e32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58024800 	.word	0x58024800

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	@ 0x30
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e3c8      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e84:	4b88      	ldr	r3, [pc, #544]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e8e:	4b86      	ldr	r3, [pc, #536]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d007      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46>
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	2b18      	cmp	r3, #24
 8001e9e:	d110      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
 8001ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x12c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d168      	bne.n	8001f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e3a2      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x76>
 8001ecc:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a75      	ldr	r2, [pc, #468]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e02e      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b71      	ldr	r3, [pc, #452]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a70      	ldr	r2, [pc, #448]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6e      	ldr	r3, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6d      	ldr	r2, [pc, #436]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0xbc>
 8001f06:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a67      	ldr	r2, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a64      	ldr	r2, [pc, #400]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001f20:	4b61      	ldr	r3, [pc, #388]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a60      	ldr	r2, [pc, #384]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff fc86 	bl	8001850 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fc82 	bl	8001850 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e356      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f5a:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe4>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fc72 	bl	8001850 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fc6e 	bl	8001850 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e342      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x10c>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 808c 	beq.w	80020b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa0:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fa8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001faa:	4b3f      	ldr	r3, [pc, #252]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x162>
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	2b18      	cmp	r3, #24
 8001fba:	d137      	bne.n	800202c <HAL_RCC_OscConfig+0x1c8>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d132      	bne.n	800202c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x17a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e314      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fde:	4b32      	ldr	r3, [pc, #200]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0219 	bic.w	r2, r3, #25
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	492f      	ldr	r1, [pc, #188]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fc2e 	bl	8001850 <HAL_GetTick>
 8001ff4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fc2a 	bl	8001850 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e2fe      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800200a:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	061b      	lsls	r3, r3, #24
 8002024:	4920      	ldr	r1, [pc, #128]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202a:	e045      	b.n	80020b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d026      	beq.n	8002082 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002034:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 0219 	bic.w	r2, r3, #25
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4919      	ldr	r1, [pc, #100]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff fc03 	bl	8001850 <HAL_GetTick>
 800204a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff fbff 	bl	8001850 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e2d3      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	490b      	ldr	r1, [pc, #44]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
 8002080:	e01a      	b.n	80020b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a08      	ldr	r2, [pc, #32]	@ (80020a8 <HAL_RCC_OscConfig+0x244>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff fbdf 	bl	8001850 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fbdb 	bl	8001850 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d903      	bls.n	80020ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e2af      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
 80020a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ac:	4b96      	ldr	r3, [pc, #600]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d06a      	beq.n	800219a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c4:	4b90      	ldr	r3, [pc, #576]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d007      	beq.n	80020ea <HAL_RCC_OscConfig+0x286>
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b18      	cmp	r3, #24
 80020de:	d11b      	bne.n	8002118 <HAL_RCC_OscConfig+0x2b4>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d116      	bne.n	8002118 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020ea:	4b87      	ldr	r3, [pc, #540]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x29e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b80      	cmp	r3, #128	@ 0x80
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e282      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002102:	4b81      	ldr	r3, [pc, #516]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	497d      	ldr	r1, [pc, #500]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002116:	e040      	b.n	800219a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d023      	beq.n	8002168 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002120:	4b79      	ldr	r3, [pc, #484]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a78      	ldr	r2, [pc, #480]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fb90 	bl	8001850 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002134:	f7ff fb8c 	bl	8001850 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e260      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002146:	4b70      	ldr	r3, [pc, #448]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002152:	4b6d      	ldr	r3, [pc, #436]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	4969      	ldr	r1, [pc, #420]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	60cb      	str	r3, [r1, #12]
 8002166:	e018      	b.n	800219a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002168:	4b67      	ldr	r3, [pc, #412]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a66      	ldr	r2, [pc, #408]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 800216e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fb6c 	bl	8001850 <HAL_GetTick>
 8002178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800217c:	f7ff fb68 	bl	8001850 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e23c      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800218e:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b56      	ldr	r3, [pc, #344]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b2:	4a55      	ldr	r2, [pc, #340]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb49 	bl	8001850 <HAL_GetTick>
 80021be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff fb45 	bl	8001850 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e219      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x35e>
 80021e0:	e018      	b.n	8002214 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	4a48      	ldr	r2, [pc, #288]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7ff fb2f 	bl	8001850 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7ff fb2b 	bl	8001850 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e1ff      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002208:	4b3f      	ldr	r3, [pc, #252]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d036      	beq.n	800228e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d019      	beq.n	800225c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002228:	4b37      	ldr	r3, [pc, #220]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a36      	ldr	r2, [pc, #216]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 800222e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002232:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002234:	f7ff fb0c 	bl	8001850 <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800223c:	f7ff fb08 	bl	8001850 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1dc      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800224e:	4b2e      	ldr	r3, [pc, #184]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x3d8>
 800225a:	e018      	b.n	800228e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800225c:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a29      	ldr	r2, [pc, #164]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002262:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002266:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002268:	f7ff faf2 	bl	8001850 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002270:	f7ff faee 	bl	8001850 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1c2      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8086 	beq.w	80023a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x4a8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1a      	ldr	r2, [pc, #104]	@ (800230c <HAL_RCC_OscConfig+0x4a8>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022a8:	f7ff fad2 	bl	8001850 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7ff face 	bl	8001850 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1a2      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c2:	4b12      	ldr	r3, [pc, #72]	@ (800230c <HAL_RCC_OscConfig+0x4a8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d106      	bne.n	80022e4 <HAL_RCC_OscConfig+0x480>
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e2:	e032      	b.n	800234a <HAL_RCC_OscConfig+0x4e6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <HAL_RCC_OscConfig+0x4ac>
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	4a02      	ldr	r2, [pc, #8]	@ (8002308 <HAL_RCC_OscConfig+0x4a4>)
 80022fe:	f023 0304 	bic.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	@ 0x70
 8002304:	e021      	b.n	800234a <HAL_RCC_OscConfig+0x4e6>
 8002306:	bf00      	nop
 8002308:	58024400 	.word	0x58024400
 800230c:	58024800 	.word	0x58024800
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d10c      	bne.n	8002332 <HAL_RCC_OscConfig+0x4ce>
 8002318:	4b83      	ldr	r3, [pc, #524]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231c:	4a82      	ldr	r2, [pc, #520]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	@ 0x70
 8002324:	4b80      	ldr	r3, [pc, #512]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a7f      	ldr	r2, [pc, #508]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	e00b      	b.n	800234a <HAL_RCC_OscConfig+0x4e6>
 8002332:	4b7d      	ldr	r3, [pc, #500]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	4a7c      	ldr	r2, [pc, #496]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	@ 0x70
 800233e:	4b7a      	ldr	r3, [pc, #488]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002342:	4a79      	ldr	r2, [pc, #484]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff fa7d 	bl	8001850 <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff fa79 	bl	8001850 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e14b      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002370:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ee      	beq.n	800235a <HAL_RCC_OscConfig+0x4f6>
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237e:	f7ff fa67 	bl	8001850 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fa63 	bl	8001850 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e135      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800239c:	4b62      	ldr	r3, [pc, #392]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 812a 	beq.w	8002606 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ba:	2b18      	cmp	r3, #24
 80023bc:	f000 80ba 	beq.w	8002534 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 8095 	bne.w	80024f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a56      	ldr	r2, [pc, #344]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7ff fa3b 	bl	8001850 <HAL_GetTick>
 80023da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7ff fa37 	bl	8001850 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e10b      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80023fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002400:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x6c8>)
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	430a      	orrs	r2, r1
 8002410:	4945      	ldr	r1, [pc, #276]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	628b      	str	r3, [r1, #40]	@ 0x28
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	3b01      	subs	r3, #1
 800241c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002424:	3b01      	subs	r3, #1
 8002426:	025b      	lsls	r3, r3, #9
 8002428:	b29b      	uxth	r3, r3
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243e:	3b01      	subs	r3, #1
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002446:	4938      	ldr	r1, [pc, #224]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800244c:	4b36      	ldr	r3, [pc, #216]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	4a35      	ldr	r2, [pc, #212]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002458:	4b33      	ldr	r3, [pc, #204]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800245a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245c:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_RCC_OscConfig+0x6cc>)
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	4930      	ldr	r1, [pc, #192]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800246c:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	f023 020c 	bic.w	r2, r3, #12
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	492b      	ldr	r1, [pc, #172]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800247e:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f023 0202 	bic.w	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	4927      	ldr	r1, [pc, #156]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	4a24      	ldr	r2, [pc, #144]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 8002496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249c:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff f9c0 	bl	8001850 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f9bc 	bl	8001850 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e090      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x670>
 80024f2:	e088      	b.n	8002606 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 80024fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7ff f9a6 	bl	8001850 <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff f9a2 	bl	8001850 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e076      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800251a:	4b03      	ldr	r3, [pc, #12]	@ (8002528 <HAL_RCC_OscConfig+0x6c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x6a4>
 8002526:	e06e      	b.n	8002606 <HAL_RCC_OscConfig+0x7a2>
 8002528:	58024400 	.word	0x58024400
 800252c:	fffffc0c 	.word	0xfffffc0c
 8002530:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002534:	4b36      	ldr	r3, [pc, #216]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800253a:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	2b01      	cmp	r3, #1
 8002546:	d031      	beq.n	80025ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d12a      	bne.n	80025ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d122      	bne.n	80025ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d11a      	bne.n	80025ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0a5b      	lsrs	r3, r3, #9
 800257a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002582:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d111      	bne.n	80025ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002594:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d108      	bne.n	80025ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e02b      	b.n	8002608 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025b0:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 80025b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d01f      	beq.n	8002606 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ca:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d2:	f7ff f93d 	bl	8001850 <HAL_GetTick>
 80025d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025d8:	bf00      	nop
 80025da:	f7ff f939 	bl	8001850 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d0f9      	beq.n	80025da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 80025e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_RCC_OscConfig+0x7b0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025f2:	00d2      	lsls	r2, r2, #3
 80025f4:	4906      	ldr	r1, [pc, #24]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_RCC_OscConfig+0x7ac>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3730      	adds	r7, #48	@ 0x30
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	58024400 	.word	0x58024400
 8002614:	ffff0007 	.word	0xffff0007

08002618 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e19c      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b8a      	ldr	r3, [pc, #552]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b87      	ldr	r3, [pc, #540]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	4985      	ldr	r1, [pc, #532]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b83      	ldr	r3, [pc, #524]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e184      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	4b7b      	ldr	r3, [pc, #492]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002674:	429a      	cmp	r2, r3
 8002676:	d908      	bls.n	800268a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002678:	4b78      	ldr	r3, [pc, #480]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	4975      	ldr	r1, [pc, #468]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002686:	4313      	orrs	r3, r2
 8002688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d010      	beq.n	80026b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	4b70      	ldr	r3, [pc, #448]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d908      	bls.n	80026b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026a6:	4b6d      	ldr	r3, [pc, #436]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	496a      	ldr	r1, [pc, #424]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d010      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	4b64      	ldr	r3, [pc, #400]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d908      	bls.n	80026e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026d4:	4b61      	ldr	r3, [pc, #388]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	495e      	ldr	r1, [pc, #376]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d010      	beq.n	8002714 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	4b59      	ldr	r3, [pc, #356]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026fe:	429a      	cmp	r2, r3
 8002700:	d908      	bls.n	8002714 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002702:	4b56      	ldr	r3, [pc, #344]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4953      	ldr	r1, [pc, #332]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002710:	4313      	orrs	r3, r2
 8002712:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	429a      	cmp	r2, r3
 800272e:	d908      	bls.n	8002742 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f023 020f 	bic.w	r2, r3, #15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4947      	ldr	r1, [pc, #284]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800273e:	4313      	orrs	r3, r2
 8002740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d055      	beq.n	80027fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800274e:	4b43      	ldr	r3, [pc, #268]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4940      	ldr	r1, [pc, #256]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800275c:	4313      	orrs	r3, r2
 800275e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d107      	bne.n	8002778 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002768:	4b3c      	ldr	r3, [pc, #240]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d121      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0f6      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d107      	bne.n	8002790 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002780:	4b36      	ldr	r3, [pc, #216]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d115      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0ea      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002798:	4b30      	ldr	r3, [pc, #192]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0de      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a8:	4b2c      	ldr	r3, [pc, #176]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0d6      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027b8:	4b28      	ldr	r3, [pc, #160]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f023 0207 	bic.w	r2, r3, #7
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4925      	ldr	r1, [pc, #148]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ca:	f7ff f841 	bl	8001850 <HAL_GetTick>
 80027ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7ff f83d 	bl	8001850 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0be      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e8:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d1eb      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	4b14      	ldr	r3, [pc, #80]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	429a      	cmp	r2, r3
 8002814:	d208      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f023 020f 	bic.w	r2, r3, #15
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	490e      	ldr	r1, [pc, #56]	@ (800285c <HAL_RCC_ClockConfig+0x244>)
 8002824:	4313      	orrs	r3, r2
 8002826:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d214      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 020f 	bic.w	r2, r3, #15
 800283e:	4906      	ldr	r1, [pc, #24]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <HAL_RCC_ClockConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e086      	b.n	8002966 <HAL_RCC_ClockConfig+0x34e>
 8002858:	52002000 	.word	0x52002000
 800285c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d010      	beq.n	800288e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	4b3f      	ldr	r3, [pc, #252]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002878:	429a      	cmp	r2, r3
 800287a:	d208      	bcs.n	800288e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800287c:	4b3c      	ldr	r3, [pc, #240]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	4939      	ldr	r1, [pc, #228]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 800288a:	4313      	orrs	r3, r2
 800288c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d208      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028aa:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	492e      	ldr	r1, [pc, #184]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d010      	beq.n	80028ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d208      	bcs.n	80028ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4922      	ldr	r1, [pc, #136]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002902:	429a      	cmp	r2, r3
 8002904:	d208      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4917      	ldr	r1, [pc, #92]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 8002914:	4313      	orrs	r3, r2
 8002916:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002918:	f000 f834 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	4912      	ldr	r1, [pc, #72]	@ (8002974 <HAL_RCC_ClockConfig+0x35c>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <HAL_RCC_ClockConfig+0x358>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <HAL_RCC_ClockConfig+0x35c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x360>)
 800294e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002950:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <HAL_RCC_ClockConfig+0x364>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_RCC_ClockConfig+0x368>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe ff30 	bl	80017c0 <HAL_InitTick>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	58024400 	.word	0x58024400
 8002974:	08007238 	.word	0x08007238
 8002978:	24000004 	.word	0x24000004
 800297c:	24000000 	.word	0x24000000
 8002980:	24000008 	.word	0x24000008

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298a:	4ba0      	ldr	r3, [pc, #640]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002992:	2b18      	cmp	r3, #24
 8002994:	f200 818b 	bhi.w	8002cae <HAL_RCC_GetSysClockFreq+0x32a>
 8002998:	a201      	add	r2, pc, #4	@ (adr r2, 80029a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	08002a05 	.word	0x08002a05
 80029a4:	08002caf 	.word	0x08002caf
 80029a8:	08002caf 	.word	0x08002caf
 80029ac:	08002caf 	.word	0x08002caf
 80029b0:	08002caf 	.word	0x08002caf
 80029b4:	08002caf 	.word	0x08002caf
 80029b8:	08002caf 	.word	0x08002caf
 80029bc:	08002caf 	.word	0x08002caf
 80029c0:	08002a2b 	.word	0x08002a2b
 80029c4:	08002caf 	.word	0x08002caf
 80029c8:	08002caf 	.word	0x08002caf
 80029cc:	08002caf 	.word	0x08002caf
 80029d0:	08002caf 	.word	0x08002caf
 80029d4:	08002caf 	.word	0x08002caf
 80029d8:	08002caf 	.word	0x08002caf
 80029dc:	08002caf 	.word	0x08002caf
 80029e0:	08002a31 	.word	0x08002a31
 80029e4:	08002caf 	.word	0x08002caf
 80029e8:	08002caf 	.word	0x08002caf
 80029ec:	08002caf 	.word	0x08002caf
 80029f0:	08002caf 	.word	0x08002caf
 80029f4:	08002caf 	.word	0x08002caf
 80029f8:	08002caf 	.word	0x08002caf
 80029fc:	08002caf 	.word	0x08002caf
 8002a00:	08002a37 	.word	0x08002a37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a04:	4b81      	ldr	r3, [pc, #516]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a10:	4b7e      	ldr	r3, [pc, #504]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x28c>)
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a22:	e147      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x330>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a24:	4b7a      	ldr	r3, [pc, #488]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x28c>)
 8002a26:	61bb      	str	r3, [r7, #24]
      break;
 8002a28:	e144      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x330>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x290>)
 8002a2c:	61bb      	str	r3, [r7, #24]
      break;
 8002a2e:	e141      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x330>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a30:	4b79      	ldr	r3, [pc, #484]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x294>)
 8002a32:	61bb      	str	r3, [r7, #24]
      break;
 8002a34:	e13e      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x330>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a36:	4b75      	ldr	r3, [pc, #468]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a40:	4b72      	ldr	r3, [pc, #456]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a56:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fce6 	bl	8000438 <__aeabi_ui2f>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60bb      	str	r3, [r7, #8]

      if (pllm != 0U)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8118 	beq.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x324>
      {
        switch (pllsource)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f000 809c 	beq.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x234>
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f200 80d0 	bhi.w	8002c28 <HAL_RCC_GetSysClockFreq+0x2a4>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x112>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d067      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002a94:	e0c8      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x2a4>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a96:	4b5d      	ldr	r3, [pc, #372]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d036      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x18c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	4a58      	ldr	r2, [pc, #352]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x28c>)
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fd fcbf 	bl	8000438 <__aeabi_ui2f>
 8002aba:	4604      	mov	r4, r0
 8002abc:	6938      	ldr	r0, [r7, #16]
 8002abe:	f7fd fcbb 	bl	8000438 <__aeabi_ui2f>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7fd fdc2 	bl	8000650 <__aeabi_fdiv>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461d      	mov	r5, r3
 8002ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fcad 	bl	8000438 <__aeabi_ui2f>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8002ae4:	68b8      	ldr	r0, [r7, #8]
 8002ae6:	f7fd fdb3 	bl	8000650 <__aeabi_fdiv>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4619      	mov	r1, r3
 8002aee:	4620      	mov	r0, r4
 8002af0:	f7fd fbf2 	bl	80002d8 <__addsf3>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fbec 	bl	80002d8 <__addsf3>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4619      	mov	r1, r3
 8002b04:	4628      	mov	r0, r5
 8002b06:	f7fd fcef 	bl	80004e8 <__aeabi_fmul>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	61fb      	str	r3, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b0e:	e0b5      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2f8>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b10:	6938      	ldr	r0, [r7, #16]
 8002b12:	f7fd fc91 	bl	8000438 <__aeabi_ui2f>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4840      	ldr	r0, [pc, #256]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x298>)
 8002b1c:	f7fd fd98 	bl	8000650 <__aeabi_fdiv>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461d      	mov	r5, r3
 8002b24:	4b39      	ldr	r3, [pc, #228]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fc83 	bl	8000438 <__aeabi_ui2f>
 8002b32:	4604      	mov	r4, r0
 8002b34:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8002b38:	68b8      	ldr	r0, [r7, #8]
 8002b3a:	f7fd fd89 	bl	8000650 <__aeabi_fdiv>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f7fd fbc8 	bl	80002d8 <__addsf3>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fbc2 	bl	80002d8 <__addsf3>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4619      	mov	r1, r3
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f7fd fcc5 	bl	80004e8 <__aeabi_fmul>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	61fb      	str	r3, [r7, #28]
            break;
 8002b62:	e08b      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2f8>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b64:	6938      	ldr	r0, [r7, #16]
 8002b66:	f7fd fc67 	bl	8000438 <__aeabi_ui2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482c      	ldr	r0, [pc, #176]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002b70:	f7fd fd6e 	bl	8000650 <__aeabi_fdiv>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461d      	mov	r5, r3
 8002b78:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fc59 	bl	8000438 <__aeabi_ui2f>
 8002b86:	4604      	mov	r4, r0
 8002b88:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8002b8c:	68b8      	ldr	r0, [r7, #8]
 8002b8e:	f7fd fd5f 	bl	8000650 <__aeabi_fdiv>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fd fb9e 	bl	80002d8 <__addsf3>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fb98 	bl	80002d8 <__addsf3>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4619      	mov	r1, r3
 8002bac:	4628      	mov	r0, r5
 8002bae:	f7fd fc9b 	bl	80004e8 <__aeabi_fmul>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	61fb      	str	r3, [r7, #28]
            break;
 8002bb6:	e061      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2f8>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb8:	6938      	ldr	r0, [r7, #16]
 8002bba:	f7fd fc3d 	bl	8000438 <__aeabi_ui2f>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4818      	ldr	r0, [pc, #96]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002bc4:	f7fd fd44 	bl	8000650 <__aeabi_fdiv>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461d      	mov	r5, r3
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_RCC_GetSysClockFreq+0x288>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fc2f 	bl	8000438 <__aeabi_ui2f>
 8002bda:	4604      	mov	r4, r0
 8002bdc:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8002be0:	68b8      	ldr	r0, [r7, #8]
 8002be2:	f7fd fd35 	bl	8000650 <__aeabi_fdiv>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4619      	mov	r1, r3
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7fd fb74 	bl	80002d8 <__addsf3>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fb6e 	bl	80002d8 <__addsf3>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4628      	mov	r0, r5
 8002c02:	f7fd fc71 	bl	80004e8 <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	61fb      	str	r3, [r7, #28]
            break;
 8002c0a:	e037      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2f8>
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	03d09000 	.word	0x03d09000
 8002c14:	003d0900 	.word	0x003d0900
 8002c18:	016e3600 	.word	0x016e3600
 8002c1c:	4c742400 	.word	0x4c742400
 8002c20:	4a742400 	.word	0x4a742400
 8002c24:	4bb71b00 	.word	0x4bb71b00

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c28:	6938      	ldr	r0, [r7, #16]
 8002c2a:	f7fd fc05 	bl	8000438 <__aeabi_ui2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4619      	mov	r1, r3
 8002c32:	4823      	ldr	r0, [pc, #140]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002c34:	f7fd fd0c 	bl	8000650 <__aeabi_fdiv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x340>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fbf7 	bl	8000438 <__aeabi_ui2f>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8002c50:	68b8      	ldr	r0, [r7, #8]
 8002c52:	f7fd fcfd 	bl	8000650 <__aeabi_fdiv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7fd fb3c 	bl	80002d8 <__addsf3>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fb36 	bl	80002d8 <__addsf3>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4628      	mov	r0, r5
 8002c72:	f7fd fc39 	bl	80004e8 <__aeabi_fmul>
 8002c76:	4603      	mov	r3, r0
 8002c78:	61fb      	str	r3, [r7, #28]
            break;
 8002c7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x340>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	0a5b      	lsrs	r3, r3, #9
 8002c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c86:	3301      	adds	r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	f7fd fbd4 	bl	8000438 <__aeabi_ui2f>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4619      	mov	r1, r3
 8002c94:	69f8      	ldr	r0, [r7, #28]
 8002c96:	f7fd fcdb 	bl	8000650 <__aeabi_fdiv>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fe0f 	bl	80008c0 <__aeabi_f2uiz>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x330>
        sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
      break;
 8002cac:	e002      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x330>

    default:
      sysclockfreq = CSI_VALUE;
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x344>)
 8002cb0:	61bb      	str	r3, [r7, #24]
      break;
 8002cb2:	bf00      	nop
  }

  return sysclockfreq;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	4a742400 	.word	0x4a742400
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	003d0900 	.word	0x003d0900

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cd2:	f7ff fe57 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490f      	ldr	r1, [pc, #60]	@ (8002d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	fa22 f303 	lsr.w	r3, r2, r3
 8002d06:	4a07      	ldr	r2, [pc, #28]	@ (8002d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d0a:	4a07      	ldr	r2, [pc, #28]	@ (8002d28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d10:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	08007238 	.word	0x08007238
 8002d24:	24000004 	.word	0x24000004
 8002d28:	24000000 	.word	0x24000000

08002d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d30:	f7ff ffcc 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	091b      	lsrs	r3, r3, #4
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4904      	ldr	r1, [pc, #16]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	58024400 	.word	0x58024400
 8002d54:	08007238 	.word	0x08007238

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d5c:	f7ff ffb6 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4904      	ldr	r1, [pc, #16]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	08007238 	.word	0x08007238

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b0c6      	sub	sp, #280	@ 0x118
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002da8:	2500      	movs	r5, #0
 8002daa:	ea54 0305 	orrs.w	r3, r4, r5
 8002dae:	d049      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002dba:	d02f      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002dbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002dc0:	d828      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc6:	d01a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dcc:	d822      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dd6:	d007      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dd8:	e01c      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dda:	4bab      	ldr	r3, [pc, #684]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	4aaa      	ldr	r2, [pc, #680]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002de6:	e01a      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dec:	3308      	adds	r3, #8
 8002dee:	2102      	movs	r1, #2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 fc85 	bl	8004700 <RCCEx_PLL2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dfc:	e00f      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e02:	3328      	adds	r3, #40	@ 0x28
 8002e04:	2102      	movs	r1, #2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 fd2c 	bl	8004864 <RCCEx_PLL3_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e12:	e004      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e26:	4b98      	ldr	r3, [pc, #608]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e34:	4a94      	ldr	r2, [pc, #592]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e36:	430b      	orrs	r3, r1
 8002e38:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e3a:	e003      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e50:	f04f 0900 	mov.w	r9, #0
 8002e54:	ea58 0309 	orrs.w	r3, r8, r9
 8002e58:	d047      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d82a      	bhi.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e8f 	.word	0x08002e8f
 8002e74:	08002ea5 	.word	0x08002ea5
 8002e78:	08002ec3 	.word	0x08002ec3
 8002e7c:	08002ec3 	.word	0x08002ec3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e80:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	4a80      	ldr	r2, [pc, #512]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e8c:	e01a      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e92:	3308      	adds	r3, #8
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fc32 	bl	8004700 <RCCEx_PLL2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ea2:	e00f      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ea8:	3328      	adds	r3, #40	@ 0x28
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fcd9 	bl	8004864 <RCCEx_PLL3_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10a      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ecc:	4b6e      	ldr	r3, [pc, #440]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed0:	f023 0107 	bic.w	r1, r3, #7
 8002ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	4a6b      	ldr	r2, [pc, #428]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ee6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002ef6:	f04f 0b00 	mov.w	fp, #0
 8002efa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f08:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002f0c:	d03b      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002f0e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002f12:	d834      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f18:	d037      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002f1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f1e:	d82e      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f20:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f24:	d033      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f2a:	d828      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f30:	d01a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f36:	d822      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002f3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f40:	d007      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f42:	e01c      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f44:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	4a4f      	ldr	r2, [pc, #316]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f50:	e01e      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f56:	3308      	adds	r3, #8
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fbd0 	bl	8004700 <RCCEx_PLL2_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f66:	e013      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f6c:	3328      	adds	r3, #40	@ 0x28
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fc77 	bl	8004864 <RCCEx_PLL3_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f84:	e004      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fa8:	4a37      	ldr	r2, [pc, #220]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002faa:	430b      	orrs	r3, r1
 8002fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fae:	e003      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	d05d      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fe0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002fe4:	d03b      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002fe6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002fea:	d834      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ff0:	d037      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002ff2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ff6:	d82e      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ff8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ffc:	d033      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002ffe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003002:	d828      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003004:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003008:	d01a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800300a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800300e:	d822      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003018:	d007      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800301a:	e01c      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301c:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003028:	e01e      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800302a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800302e:	3308      	adds	r3, #8
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fb64 	bl	8004700 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800303e:	e013      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003044:	3328      	adds	r3, #40	@ 0x28
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fc0b 	bl	8004864 <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003054:	e008      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800305c:	e004      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800305e:	bf00      	nop
 8003060:	e002      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800307c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003080:	4a01      	ldr	r2, [pc, #4]	@ (8003088 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003082:	430b      	orrs	r3, r1
 8003084:	6593      	str	r3, [r2, #88]	@ 0x58
 8003086:	e005      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80030a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80030aa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4313      	orrs	r3, r2
 80030b2:	d03a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80030b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ba:	2b30      	cmp	r3, #48	@ 0x30
 80030bc:	d01f      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80030be:	2b30      	cmp	r3, #48	@ 0x30
 80030c0:	d819      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d815      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d019      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d111      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d2:	4baa      	ldr	r3, [pc, #680]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	4aa9      	ldr	r2, [pc, #676]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030de:	e011      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e4:	3308      	adds	r3, #8
 80030e6:	2102      	movs	r1, #2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 fb09 	bl	8004700 <RCCEx_PLL2_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030fc:	e002      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800310c:	4b9b      	ldr	r3, [pc, #620]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800310e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003110:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311a:	4a98      	ldr	r2, [pc, #608]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800311c:	430b      	orrs	r3, r1
 800311e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003120:	e003      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003122:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003126:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800312a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003136:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003140:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003144:	460b      	mov	r3, r1
 8003146:	4313      	orrs	r3, r2
 8003148:	d051      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800314a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800314e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003154:	d035      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315a:	d82e      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 800315c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003160:	d031      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003162:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003166:	d828      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316c:	d01a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003172:	d822      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317c:	d007      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800317e:	e01c      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	4a7d      	ldr	r2, [pc, #500]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800318a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800318c:	e01c      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800318e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003192:	3308      	adds	r3, #8
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f001 fab2 	bl	8004700 <RCCEx_PLL2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031a2:	e011      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a8:	3328      	adds	r3, #40	@ 0x28
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fb59 	bl	8004864 <RCCEx_PLL3_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031b8:	e006      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80031c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031d0:	4b6a      	ldr	r3, [pc, #424]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	4a67      	ldr	r2, [pc, #412]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003204:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003208:	460b      	mov	r3, r1
 800320a:	4313      	orrs	r3, r2
 800320c:	d053      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800320e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003218:	d033      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800321a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800321e:	d82c      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003220:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003224:	d02f      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003226:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800322a:	d826      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800322c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003230:	d02b      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003232:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003236:	d820      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800323c:	d012      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800323e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003242:	d81a      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d022      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324c:	d115      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800324e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003252:	3308      	adds	r3, #8
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f001 fa52 	bl	8004700 <RCCEx_PLL2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003262:	e015      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003268:	3328      	adds	r3, #40	@ 0x28
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f001 faf9 	bl	8004864 <RCCEx_PLL3_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003278:	e00a      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003280:	e006      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800328e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003298:	4b38      	ldr	r3, [pc, #224]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800329a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80032a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	4a35      	ldr	r2, [pc, #212]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ac:	e003      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032d0:	460b      	mov	r3, r1
 80032d2:	4313      	orrs	r3, r2
 80032d4:	d058      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e2:	d033      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80032e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e8:	d82c      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ee:	d02f      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f4:	d826      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032fa:	d02b      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80032fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003300:	d820      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003306:	d012      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800330c:	d81a      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d022      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003316:	d115      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331c:	3308      	adds	r3, #8
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f001 f9ed 	bl	8004700 <RCCEx_PLL2_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800332c:	e015      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800332e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003332:	3328      	adds	r3, #40	@ 0x28
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f001 fa94 	bl	8004864 <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003342:	e00a      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800334a:	e006      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800334c:	bf00      	nop
 800334e:	e004      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003350:	bf00      	nop
 8003352:	e002      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800336a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003372:	4a02      	ldr	r2, [pc, #8]	@ (800337c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003374:	430b      	orrs	r3, r1
 8003376:	6593      	str	r3, [r2, #88]	@ 0x58
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800339e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4313      	orrs	r3, r2
 80033a6:	d037      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80033a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033b2:	d00e      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033b8:	d816      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80033be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033c2:	d111      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c4:	4b8c      	ldr	r3, [pc, #560]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	4a8b      	ldr	r2, [pc, #556]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80033ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033d0:	e00f      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d6:	3308      	adds	r3, #8
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f001 f990 	bl	8004700 <RCCEx_PLL2_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80033f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033fa:	4b7f      	ldr	r3, [pc, #508]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80033fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003408:	4a7b      	ldr	r2, [pc, #492]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6513      	str	r3, [r2, #80]	@ 0x50
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003424:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800342e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d039      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800343c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343e:	2b03      	cmp	r3, #3
 8003440:	d81c      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003485 	.word	0x08003485
 800344c:	08003459 	.word	0x08003459
 8003450:	08003467 	.word	0x08003467
 8003454:	08003485 	.word	0x08003485
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003458:	4b67      	ldr	r3, [pc, #412]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	4a66      	ldr	r2, [pc, #408]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003464:	e00f      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346a:	3308      	adds	r3, #8
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f946 	bl	8004700 <RCCEx_PLL2_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800348e:	4b5a      	ldr	r3, [pc, #360]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003492:	f023 0103 	bic.w	r1, r3, #3
 8003496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349c:	4a56      	ldr	r2, [pc, #344]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a2:	e003      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80034b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f000 809f 	beq.w	800360c <HAL_RCCEx_PeriphCLKConfig+0x888>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ce:	4b4b      	ldr	r3, [pc, #300]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x878>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4a      	ldr	r2, [pc, #296]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x878>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034da:	f7fe f9b9 	bl	8001850 <HAL_GetTick>
 80034de:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e2:	e00b      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fe f9b4 	bl	8001850 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	@ 0x64
 80034f2:	d903      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034fa:	e005      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034fc:	4b3f      	ldr	r3, [pc, #252]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x878>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ed      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800350c:	2b00      	cmp	r3, #0
 800350e:	d179      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x880>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003510:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003512:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800351c:	4053      	eors	r3, r2
 800351e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d015      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003526:	4b34      	ldr	r3, [pc, #208]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800352e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	4a30      	ldr	r2, [pc, #192]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800353e:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003542:	4a2d      	ldr	r2, [pc, #180]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003548:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800354a:	4a2b      	ldr	r2, [pc, #172]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800354c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800355a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355e:	d118      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe f976 	bl	8001850 <HAL_GetTick>
 8003564:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003568:	e00d      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe f971 	bl	8001850 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	f241 3388 	movw	r3, #5000	@ 0x1388
 800357a:	429a      	cmp	r2, r3
 800357c:	d903      	bls.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003584:	e005      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003586:	4b1c      	ldr	r3, [pc, #112]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0eb      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003596:	2b00      	cmp	r3, #0
 8003598:	d129      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800359a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035aa:	d10e      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80035ac:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035bc:	091a      	lsrs	r2, r3, #4
 80035be:	4b10      	ldr	r3, [pc, #64]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6113      	str	r3, [r2, #16]
 80035c8:	e005      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80035ca:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80035d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035d4:	6113      	str	r3, [r2, #16]
 80035d6:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80035d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	4a04      	ldr	r2, [pc, #16]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ec:	e00e      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x888>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80035f6:	e009      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x888>
 80035f8:	58024400 	.word	0x58024400
 80035fc:	58024800 	.word	0x58024800
 8003600:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003608:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800360c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f002 0301 	and.w	r3, r2, #1
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003622:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	f000 8089 	beq.w	8003740 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800362e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003634:	2b28      	cmp	r3, #40	@ 0x28
 8003636:	d86b      	bhi.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003638:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003719 	.word	0x08003719
 8003644:	08003711 	.word	0x08003711
 8003648:	08003711 	.word	0x08003711
 800364c:	08003711 	.word	0x08003711
 8003650:	08003711 	.word	0x08003711
 8003654:	08003711 	.word	0x08003711
 8003658:	08003711 	.word	0x08003711
 800365c:	08003711 	.word	0x08003711
 8003660:	080036e5 	.word	0x080036e5
 8003664:	08003711 	.word	0x08003711
 8003668:	08003711 	.word	0x08003711
 800366c:	08003711 	.word	0x08003711
 8003670:	08003711 	.word	0x08003711
 8003674:	08003711 	.word	0x08003711
 8003678:	08003711 	.word	0x08003711
 800367c:	08003711 	.word	0x08003711
 8003680:	080036fb 	.word	0x080036fb
 8003684:	08003711 	.word	0x08003711
 8003688:	08003711 	.word	0x08003711
 800368c:	08003711 	.word	0x08003711
 8003690:	08003711 	.word	0x08003711
 8003694:	08003711 	.word	0x08003711
 8003698:	08003711 	.word	0x08003711
 800369c:	08003711 	.word	0x08003711
 80036a0:	08003719 	.word	0x08003719
 80036a4:	08003711 	.word	0x08003711
 80036a8:	08003711 	.word	0x08003711
 80036ac:	08003711 	.word	0x08003711
 80036b0:	08003711 	.word	0x08003711
 80036b4:	08003711 	.word	0x08003711
 80036b8:	08003711 	.word	0x08003711
 80036bc:	08003711 	.word	0x08003711
 80036c0:	08003719 	.word	0x08003719
 80036c4:	08003711 	.word	0x08003711
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003711 	.word	0x08003711
 80036d0:	08003711 	.word	0x08003711
 80036d4:	08003711 	.word	0x08003711
 80036d8:	08003711 	.word	0x08003711
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003719 	.word	0x08003719
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e8:	3308      	adds	r3, #8
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f807 	bl	8004700 <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036f8:	e00f      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fe:	3328      	adds	r3, #40	@ 0x28
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f8ae 	bl	8004864 <RCCEx_PLL3_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800370e:	e004      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003722:	4bbf      	ldr	r3, [pc, #764]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800372a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003730:	4abb      	ldr	r2, [pc, #748]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003732:	430b      	orrs	r3, r1
 8003734:	6553      	str	r3, [r2, #84]	@ 0x54
 8003736:	e003      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800373c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f002 0302 	and.w	r3, r2, #2
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003756:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d041      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003766:	2b05      	cmp	r3, #5
 8003768:	d824      	bhi.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800376a:	a201      	add	r2, pc, #4	@ (adr r2, 8003770 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	080037bd 	.word	0x080037bd
 8003774:	08003789 	.word	0x08003789
 8003778:	0800379f 	.word	0x0800379f
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037bd 	.word	0x080037bd
 8003784:	080037bd 	.word	0x080037bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378c:	3308      	adds	r3, #8
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ffb5 	bl	8004700 <RCCEx_PLL2_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800379c:	e00f      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a2:	3328      	adds	r3, #40	@ 0x28
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f85c 	bl	8004864 <RCCEx_PLL3_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037b2:	e004      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037ba:	e000      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80037bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037c6:	4b96      	ldr	r3, [pc, #600]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	f023 0107 	bic.w	r1, r3, #7
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d4:	4a92      	ldr	r2, [pc, #584]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80037da:	e003      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f002 0304 	and.w	r3, r2, #4
 80037f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037fa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037fe:	460b      	mov	r3, r1
 8003800:	4313      	orrs	r3, r2
 8003802:	d044      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380c:	2b05      	cmp	r3, #5
 800380e:	d825      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003810:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	08003865 	.word	0x08003865
 800381c:	08003831 	.word	0x08003831
 8003820:	08003847 	.word	0x08003847
 8003824:	08003865 	.word	0x08003865
 8003828:	08003865 	.word	0x08003865
 800382c:	08003865 	.word	0x08003865
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003834:	3308      	adds	r3, #8
 8003836:	2101      	movs	r1, #1
 8003838:	4618      	mov	r0, r3
 800383a:	f000 ff61 	bl	8004700 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003844:	e00f      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800384a:	3328      	adds	r3, #40	@ 0x28
 800384c:	2101      	movs	r1, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f001 f808 	bl	8004864 <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800385a:	e004      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800386e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	f023 0107 	bic.w	r1, r3, #7
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	4a68      	ldr	r2, [pc, #416]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6593      	str	r3, [r2, #88]	@ 0x58
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800388a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f002 0320 	and.w	r3, r2, #32
 800389a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800389e:	2300      	movs	r3, #0
 80038a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d055      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ba:	d033      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80038bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c0:	d82c      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d02f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d826      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038d2:	d02b      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80038d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038d8:	d820      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038de:	d012      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80038e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e4:	d81a      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d022      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80038ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ee:	d115      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f4:	3308      	adds	r3, #8
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 ff01 	bl	8004700 <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003904:	e015      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390a:	3328      	adds	r3, #40	@ 0x28
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 ffa8 	bl	8004864 <RCCEx_PLL3_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800391a:	e00a      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003922:	e006      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003924:	bf00      	nop
 8003926:	e004      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003928:	bf00      	nop
 800392a:	e002      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b39      	ldr	r3, [pc, #228]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800394a:	4a35      	ldr	r2, [pc, #212]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800394c:	430b      	orrs	r3, r1
 800394e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003950:	e003      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003956:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800395a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003966:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003970:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003974:	460b      	mov	r3, r1
 8003976:	4313      	orrs	r3, r2
 8003978:	d058      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003982:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003986:	d033      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003988:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800398c:	d82c      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800398e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003992:	d02f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003998:	d826      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800399a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800399e:	d02b      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80039a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039a4:	d820      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039aa:	d012      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80039ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b0:	d81a      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d022      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ba:	d115      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c0:	3308      	adds	r3, #8
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fe9b 	bl	8004700 <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039d0:	e015      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d6:	3328      	adds	r3, #40	@ 0x28
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 ff42 	bl	8004864 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039e6:	e00a      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039ee:	e006      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039f0:	bf00      	nop
 80039f2:	e004      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039f4:	bf00      	nop
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a16:	4a02      	ldr	r2, [pc, #8]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a46:	460b      	mov	r3, r1
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	d055      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a58:	d033      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003a5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a5e:	d82c      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a64:	d02f      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a6a:	d826      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a70:	d02b      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003a72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a76:	d820      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a7c:	d012      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a82:	d81a      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d022      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8c:	d115      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a92:	3308      	adds	r3, #8
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fe32 	bl	8004700 <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e015      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa8:	3328      	adds	r3, #40	@ 0x28
 8003aaa:	2102      	movs	r1, #2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fed9 	bl	8004864 <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ac0:	e006      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ad8:	4ba0      	ldr	r3, [pc, #640]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003adc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ae8:	4a9c      	ldr	r2, [pc, #624]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f002 0308 	and.w	r3, r2, #8
 8003b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b0e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b12:	460b      	mov	r3, r1
 8003b14:	4313      	orrs	r3, r2
 8003b16:	d01e      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fe98 	bl	8004864 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003b40:	4b86      	ldr	r3, [pc, #536]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b50:	4a82      	ldr	r2, [pc, #520]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f002 0310 	and.w	r3, r2, #16
 8003b62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b6c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d01e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	3328      	adds	r3, #40	@ 0x28
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe69 	bl	8004864 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bae:	4a6b      	ldr	r2, [pc, #428]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bc6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d03e      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bdc:	d022      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003be2:	d81b      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003bee:	e015      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fd81 	bl	8004700 <RCCEx_PLL2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c04:	e00f      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0a:	3328      	adds	r3, #40	@ 0x28
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fe28 	bl	8004864 <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c1a:	e004      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c3e:	4a47      	ldr	r2, [pc, #284]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d03b      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c76:	d01f      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003c78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c7c:	d818      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003c7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c82:	d003      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003c84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c88:	d007      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003c8a:	e011      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	4a32      	ldr	r2, [pc, #200]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c98:	e00f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9e:	3328      	adds	r3, #40	@ 0x28
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fdde 	bl	8004864 <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cc2:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd2:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cf4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	d034      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0c:	d007      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003d0e:	e011      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4b12      	ldr	r3, [pc, #72]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	4a11      	ldr	r2, [pc, #68]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d1c:	e00e      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d22:	3308      	adds	r3, #8
 8003d24:	2102      	movs	r1, #2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fcea 	bl	8004700 <RCCEx_PLL2_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d52:	4a02      	ldr	r2, [pc, #8]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d54:	430b      	orrs	r3, r1
 8003d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003d5a:	bf00      	nop
 8003d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d74:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d76:	2300      	movs	r3, #0
 8003d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d7a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d00c      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	3328      	adds	r3, #40	@ 0x28
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fd69 	bl	8004864 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003daa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dac:	2300      	movs	r3, #0
 8003dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003db0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003db4:	460b      	mov	r3, r1
 8003db6:	4313      	orrs	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dc4:	d018      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dca:	d811      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd0:	d014      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd6:	d80b      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de0:	d106      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de2:	4bb3      	ldr	r3, [pc, #716]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	4ab2      	ldr	r2, [pc, #712]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dee:	e008      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003df8:	bf00      	nop
 8003dfa:	e002      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e0a:	4ba9      	ldr	r3, [pc, #676]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e18:	4aa5      	ldr	r2, [pc, #660]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e36:	2300      	movs	r3, #0
 8003e38:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e44:	4b9a      	ldr	r3, [pc, #616]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	4a97      	ldr	r2, [pc, #604]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e66:	2300      	movs	r3, #0
 8003e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e74:	4b8e      	ldr	r3, [pc, #568]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e78:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e82:	4a8b      	ldr	r2, [pc, #556]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003e94:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e96:	2300      	movs	r3, #0
 8003e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea4:	4b82      	ldr	r3, [pc, #520]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4a81      	ldr	r2, [pc, #516]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003eaa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003eae:	6113      	str	r3, [r2, #16]
 8003eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003eb2:	6919      	ldr	r1, [r3, #16]
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ebc:	4a7c      	ldr	r2, [pc, #496]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ede:	4b74      	ldr	r3, [pc, #464]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	4a70      	ldr	r2, [pc, #448]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f00:	2300      	movs	r3, #0
 8003f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f0e:	4b68      	ldr	r3, [pc, #416]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1e:	4a64      	ldr	r2, [pc, #400]	@ (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x132c>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d011      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f44:	3308      	adds	r3, #8
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fbd9 	bl	8004700 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	6239      	str	r1, [r7, #32]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f76:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	d011      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f84:	3308      	adds	r3, #8
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fbb9 	bl	8004700 <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	2100      	movs	r1, #0
 8003fae:	61b9      	str	r1, [r7, #24]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d011      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb99 	bl	8004700 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	2100      	movs	r1, #0
 8003fee:	6139      	str	r1, [r7, #16]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d011      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	3328      	adds	r3, #40	@ 0x28
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fc2b 	bl	8004864 <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	2100      	movs	r1, #0
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800403a:	460b      	mov	r3, r1
 800403c:	4313      	orrs	r3, r2
 800403e:	d011      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004044:	3328      	adds	r3, #40	@ 0x28
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fc0b 	bl	8004864 <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	2100      	movs	r1, #0
 800406e:	6039      	str	r1, [r7, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	e9d7 1200 	ldrd	r1, r2, [r7]
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d011      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004084:	3328      	adds	r3, #40	@ 0x28
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fbeb 	bl	8004864 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80040a4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d103      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1330>
  {
    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1332>
 80040b0:	58024400 	.word	0x58024400
  }
  return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80040bc:	46bd      	mov	sp, r7
 80040be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c2:	bf00      	nop

080040c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040c8:	f7fe fe00 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	4904      	ldr	r1, [pc, #16]	@ (80040ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	58024400 	.word	0x58024400
 80040ec:	08007238 	.word	0x08007238

080040f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040f8:	4b75      	ldr	r3, [pc, #468]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004102:	4b73      	ldr	r3, [pc, #460]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004106:	0b1b      	lsrs	r3, r3, #12
 8004108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800410c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800410e:	4b70      	ldr	r3, [pc, #448]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800411a:	4b6d      	ldr	r3, [pc, #436]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc f984 	bl	8000438 <__aeabi_ui2f>
 8004130:	4603      	mov	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]

  if (pll2m != 0U)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 814d 	beq.w	80043d6 <HAL_RCCEx_GetPLL2ClockFreq+0x2e6>
  {
    switch (pllsource)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b02      	cmp	r3, #2
 8004140:	f000 809c 	beq.w	800427c <HAL_RCCEx_GetPLL2ClockFreq+0x18c>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b02      	cmp	r3, #2
 8004148:	f200 80cc 	bhi.w	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_GetPLL2ClockFreq+0x6a>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d067      	beq.n	8004228 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
 8004158:	e0c4      	b.n	80042e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800415a:	4b5d      	ldr	r3, [pc, #372]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d036      	beq.n	80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0xe4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004166:	4b5a      	ldr	r3, [pc, #360]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	08db      	lsrs	r3, r3, #3
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	4a58      	ldr	r2, [pc, #352]	@ (80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004178:	68b8      	ldr	r0, [r7, #8]
 800417a:	f7fc f95d 	bl	8000438 <__aeabi_ui2f>
 800417e:	4604      	mov	r4, r0
 8004180:	6978      	ldr	r0, [r7, #20]
 8004182:	f7fc f959 	bl	8000438 <__aeabi_ui2f>
 8004186:	4603      	mov	r3, r0
 8004188:	4619      	mov	r1, r3
 800418a:	4620      	mov	r0, r4
 800418c:	f7fc fa60 	bl	8000650 <__aeabi_fdiv>
 8004190:	4603      	mov	r3, r0
 8004192:	461d      	mov	r5, r3
 8004194:	4b4e      	ldr	r3, [pc, #312]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc f94b 	bl	8000438 <__aeabi_ui2f>
 80041a2:	4604      	mov	r4, r0
 80041a4:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7fc fa51 	bl	8000650 <__aeabi_fdiv>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4619      	mov	r1, r3
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7fc f890 	bl	80002d8 <__addsf3>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f88a 	bl	80002d8 <__addsf3>
 80041c4:	4603      	mov	r3, r0
 80041c6:	4619      	mov	r1, r3
 80041c8:	4628      	mov	r0, r5
 80041ca:	f7fc f98d 	bl	80004e8 <__aeabi_fmul>
 80041ce:	4603      	mov	r3, r0
 80041d0:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041d2:	e0b1      	b.n	8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f7fc f92f 	bl	8000438 <__aeabi_ui2f>
 80041da:	4603      	mov	r3, r0
 80041dc:	4619      	mov	r1, r3
 80041de:	483e      	ldr	r0, [pc, #248]	@ (80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80041e0:	f7fc fa36 	bl	8000650 <__aeabi_fdiv>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461d      	mov	r5, r3
 80041e8:	4b39      	ldr	r3, [pc, #228]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80041ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f921 	bl	8000438 <__aeabi_ui2f>
 80041f6:	4604      	mov	r4, r0
 80041f8:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7fc fa27 	bl	8000650 <__aeabi_fdiv>
 8004202:	4603      	mov	r3, r0
 8004204:	4619      	mov	r1, r3
 8004206:	4620      	mov	r0, r4
 8004208:	f7fc f866 	bl	80002d8 <__addsf3>
 800420c:	4603      	mov	r3, r0
 800420e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f860 	bl	80002d8 <__addsf3>
 8004218:	4603      	mov	r3, r0
 800421a:	4619      	mov	r1, r3
 800421c:	4628      	mov	r0, r5
 800421e:	f7fc f963 	bl	80004e8 <__aeabi_fmul>
 8004222:	4603      	mov	r3, r0
 8004224:	61fb      	str	r3, [r7, #28]
        break;
 8004226:	e087      	b.n	8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x248>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004228:	6978      	ldr	r0, [r7, #20]
 800422a:	f7fc f905 	bl	8000438 <__aeabi_ui2f>
 800422e:	4603      	mov	r3, r0
 8004230:	4619      	mov	r1, r3
 8004232:	482a      	ldr	r0, [pc, #168]	@ (80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8004234:	f7fc fa0c 	bl	8000650 <__aeabi_fdiv>
 8004238:	4603      	mov	r3, r0
 800423a:	461d      	mov	r5, r3
 800423c:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f8f7 	bl	8000438 <__aeabi_ui2f>
 800424a:	4604      	mov	r4, r0
 800424c:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7fc f9fd 	bl	8000650 <__aeabi_fdiv>
 8004256:	4603      	mov	r3, r0
 8004258:	4619      	mov	r1, r3
 800425a:	4620      	mov	r0, r4
 800425c:	f7fc f83c 	bl	80002d8 <__addsf3>
 8004260:	4603      	mov	r3, r0
 8004262:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc f836 	bl	80002d8 <__addsf3>
 800426c:	4603      	mov	r3, r0
 800426e:	4619      	mov	r1, r3
 8004270:	4628      	mov	r0, r5
 8004272:	f7fc f939 	bl	80004e8 <__aeabi_fmul>
 8004276:	4603      	mov	r3, r0
 8004278:	61fb      	str	r3, [r7, #28]
        break;
 800427a:	e05d      	b.n	8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x248>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800427c:	6978      	ldr	r0, [r7, #20]
 800427e:	f7fc f8db 	bl	8000438 <__aeabi_ui2f>
 8004282:	4603      	mov	r3, r0
 8004284:	4619      	mov	r1, r3
 8004286:	4816      	ldr	r0, [pc, #88]	@ (80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004288:	f7fc f9e2 	bl	8000650 <__aeabi_fdiv>
 800428c:	4603      	mov	r3, r0
 800428e:	461d      	mov	r5, r3
 8004290:	4b0f      	ldr	r3, [pc, #60]	@ (80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc f8cd 	bl	8000438 <__aeabi_ui2f>
 800429e:	4604      	mov	r4, r0
 80042a0:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7fc f9d3 	bl	8000650 <__aeabi_fdiv>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4619      	mov	r1, r3
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7fc f812 	bl	80002d8 <__addsf3>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc f80c 	bl	80002d8 <__addsf3>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4619      	mov	r1, r3
 80042c4:	4628      	mov	r0, r5
 80042c6:	f7fc f90f 	bl	80004e8 <__aeabi_fmul>
 80042ca:	4603      	mov	r3, r0
 80042cc:	61fb      	str	r3, [r7, #28]
        break;
 80042ce:	e033      	b.n	8004338 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
 80042d0:	58024400 	.word	0x58024400
 80042d4:	03d09000 	.word	0x03d09000
 80042d8:	4c742400 	.word	0x4c742400
 80042dc:	4a742400 	.word	0x4a742400
 80042e0:	4bb71b00 	.word	0x4bb71b00

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042e4:	6978      	ldr	r0, [r7, #20]
 80042e6:	f7fc f8a7 	bl	8000438 <__aeabi_ui2f>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4619      	mov	r1, r3
 80042ee:	4840      	ldr	r0, [pc, #256]	@ (80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x300>)
 80042f0:	f7fc f9ae 	bl	8000650 <__aeabi_fdiv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461d      	mov	r5, r3
 80042f8:	4b3e      	ldr	r3, [pc, #248]	@ (80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x304>)
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc f899 	bl	8000438 <__aeabi_ui2f>
 8004306:	4604      	mov	r4, r0
 8004308:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7fc f99f 	bl	8000650 <__aeabi_fdiv>
 8004312:	4603      	mov	r3, r0
 8004314:	4619      	mov	r1, r3
 8004316:	4620      	mov	r0, r4
 8004318:	f7fb ffde 	bl	80002d8 <__addsf3>
 800431c:	4603      	mov	r3, r0
 800431e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004322:	4618      	mov	r0, r3
 8004324:	f7fb ffd8 	bl	80002d8 <__addsf3>
 8004328:	4603      	mov	r3, r0
 800432a:	4619      	mov	r1, r3
 800432c:	4628      	mov	r0, r5
 800432e:	f7fc f8db 	bl	80004e8 <__aeabi_fmul>
 8004332:	4603      	mov	r3, r0
 8004334:	61fb      	str	r3, [r7, #28]
        break;
 8004336:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004338:	4b2e      	ldr	r3, [pc, #184]	@ (80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x304>)
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	0a5b      	lsrs	r3, r3, #9
 800433e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004342:	4618      	mov	r0, r3
 8004344:	f7fc f878 	bl	8000438 <__aeabi_ui2f>
 8004348:	4603      	mov	r3, r0
 800434a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800434e:	4618      	mov	r0, r3
 8004350:	f7fb ffc2 	bl	80002d8 <__addsf3>
 8004354:	4603      	mov	r3, r0
 8004356:	4619      	mov	r1, r3
 8004358:	69f8      	ldr	r0, [r7, #28]
 800435a:	f7fc f979 	bl	8000650 <__aeabi_fdiv>
 800435e:	4603      	mov	r3, r0
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc faad 	bl	80008c0 <__aeabi_f2uiz>
 8004366:	4602      	mov	r2, r0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x304>)
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc f85e 	bl	8000438 <__aeabi_ui2f>
 800437c:	4603      	mov	r3, r0
 800437e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004382:	4618      	mov	r0, r3
 8004384:	f7fb ffa8 	bl	80002d8 <__addsf3>
 8004388:	4603      	mov	r3, r0
 800438a:	4619      	mov	r1, r3
 800438c:	69f8      	ldr	r0, [r7, #28]
 800438e:	f7fc f95f 	bl	8000650 <__aeabi_fdiv>
 8004392:	4603      	mov	r3, r0
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc fa93 	bl	80008c0 <__aeabi_f2uiz>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80043a0:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x304>)
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc f844 	bl	8000438 <__aeabi_ui2f>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fb ff8e 	bl	80002d8 <__addsf3>
 80043bc:	4603      	mov	r3, r0
 80043be:	4619      	mov	r1, r3
 80043c0:	69f8      	ldr	r0, [r7, #28]
 80043c2:	f7fc f945 	bl	8000650 <__aeabi_fdiv>
 80043c6:	4603      	mov	r3, r0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fa79 	bl	80008c0 <__aeabi_f2uiz>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2f8>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bdb0      	pop	{r4, r5, r7, pc}
 80043f0:	4a742400 	.word	0x4a742400
 80043f4:	58024400 	.word	0x58024400

080043f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043f8:	b5b0      	push	{r4, r5, r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004400:	4b75      	ldr	r3, [pc, #468]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800440a:	4b73      	ldr	r3, [pc, #460]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	0d1b      	lsrs	r3, r3, #20
 8004410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004416:	4b70      	ldr	r3, [pc, #448]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004422:	4b6d      	ldr	r3, [pc, #436]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc f800 	bl	8000438 <__aeabi_ui2f>
 8004438:	4603      	mov	r3, r0
 800443a:	60fb      	str	r3, [r7, #12]

  if (pll3m != 0U)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 814d 	beq.w	80046de <HAL_RCCEx_GetPLL3ClockFreq+0x2e6>
  {
    switch (pllsource)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b02      	cmp	r3, #2
 8004448:	f000 809c 	beq.w	8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x18c>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b02      	cmp	r3, #2
 8004450:	f200 80cc 	bhi.w	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_RCCEx_GetPLL3ClockFreq+0x6a>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d067      	beq.n	8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
 8004460:	e0c4      	b.n	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004462:	4b5d      	ldr	r3, [pc, #372]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d036      	beq.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0xe4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800446e:	4b5a      	ldr	r3, [pc, #360]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	08db      	lsrs	r3, r3, #3
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	4a58      	ldr	r2, [pc, #352]	@ (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004480:	68b8      	ldr	r0, [r7, #8]
 8004482:	f7fb ffd9 	bl	8000438 <__aeabi_ui2f>
 8004486:	4604      	mov	r4, r0
 8004488:	6978      	ldr	r0, [r7, #20]
 800448a:	f7fb ffd5 	bl	8000438 <__aeabi_ui2f>
 800448e:	4603      	mov	r3, r0
 8004490:	4619      	mov	r1, r3
 8004492:	4620      	mov	r0, r4
 8004494:	f7fc f8dc 	bl	8000650 <__aeabi_fdiv>
 8004498:	4603      	mov	r3, r0
 800449a:	461d      	mov	r5, r3
 800449c:	4b4e      	ldr	r3, [pc, #312]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fb ffc7 	bl	8000438 <__aeabi_ui2f>
 80044aa:	4604      	mov	r4, r0
 80044ac:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7fc f8cd 	bl	8000650 <__aeabi_fdiv>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4619      	mov	r1, r3
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7fb ff0c 	bl	80002d8 <__addsf3>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fb ff06 	bl	80002d8 <__addsf3>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4619      	mov	r1, r3
 80044d0:	4628      	mov	r0, r5
 80044d2:	f7fc f809 	bl	80004e8 <__aeabi_fmul>
 80044d6:	4603      	mov	r3, r0
 80044d8:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044da:	e0b1      	b.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044dc:	6978      	ldr	r0, [r7, #20]
 80044de:	f7fb ffab 	bl	8000438 <__aeabi_ui2f>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4619      	mov	r1, r3
 80044e6:	483e      	ldr	r0, [pc, #248]	@ (80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80044e8:	f7fc f8b2 	bl	8000650 <__aeabi_fdiv>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461d      	mov	r5, r3
 80044f0:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fb ff9d 	bl	8000438 <__aeabi_ui2f>
 80044fe:	4604      	mov	r4, r0
 8004500:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fc f8a3 	bl	8000650 <__aeabi_fdiv>
 800450a:	4603      	mov	r3, r0
 800450c:	4619      	mov	r1, r3
 800450e:	4620      	mov	r0, r4
 8004510:	f7fb fee2 	bl	80002d8 <__addsf3>
 8004514:	4603      	mov	r3, r0
 8004516:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800451a:	4618      	mov	r0, r3
 800451c:	f7fb fedc 	bl	80002d8 <__addsf3>
 8004520:	4603      	mov	r3, r0
 8004522:	4619      	mov	r1, r3
 8004524:	4628      	mov	r0, r5
 8004526:	f7fb ffdf 	bl	80004e8 <__aeabi_fmul>
 800452a:	4603      	mov	r3, r0
 800452c:	61fb      	str	r3, [r7, #28]
        break;
 800452e:	e087      	b.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f7fb ff81 	bl	8000438 <__aeabi_ui2f>
 8004536:	4603      	mov	r3, r0
 8004538:	4619      	mov	r1, r3
 800453a:	482a      	ldr	r0, [pc, #168]	@ (80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 800453c:	f7fc f888 	bl	8000650 <__aeabi_fdiv>
 8004540:	4603      	mov	r3, r0
 8004542:	461d      	mov	r5, r3
 8004544:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454c:	4618      	mov	r0, r3
 800454e:	f7fb ff73 	bl	8000438 <__aeabi_ui2f>
 8004552:	4604      	mov	r4, r0
 8004554:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7fc f879 	bl	8000650 <__aeabi_fdiv>
 800455e:	4603      	mov	r3, r0
 8004560:	4619      	mov	r1, r3
 8004562:	4620      	mov	r0, r4
 8004564:	f7fb feb8 	bl	80002d8 <__addsf3>
 8004568:	4603      	mov	r3, r0
 800456a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb feb2 	bl	80002d8 <__addsf3>
 8004574:	4603      	mov	r3, r0
 8004576:	4619      	mov	r1, r3
 8004578:	4628      	mov	r0, r5
 800457a:	f7fb ffb5 	bl	80004e8 <__aeabi_fmul>
 800457e:	4603      	mov	r3, r0
 8004580:	61fb      	str	r3, [r7, #28]
        break;
 8004582:	e05d      	b.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x248>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004584:	6978      	ldr	r0, [r7, #20]
 8004586:	f7fb ff57 	bl	8000438 <__aeabi_ui2f>
 800458a:	4603      	mov	r3, r0
 800458c:	4619      	mov	r1, r3
 800458e:	4816      	ldr	r0, [pc, #88]	@ (80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004590:	f7fc f85e 	bl	8000650 <__aeabi_fdiv>
 8004594:	4603      	mov	r3, r0
 8004596:	461d      	mov	r5, r3
 8004598:	4b0f      	ldr	r3, [pc, #60]	@ (80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb ff49 	bl	8000438 <__aeabi_ui2f>
 80045a6:	4604      	mov	r4, r0
 80045a8:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7fc f84f 	bl	8000650 <__aeabi_fdiv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4619      	mov	r1, r3
 80045b6:	4620      	mov	r0, r4
 80045b8:	f7fb fe8e 	bl	80002d8 <__addsf3>
 80045bc:	4603      	mov	r3, r0
 80045be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb fe88 	bl	80002d8 <__addsf3>
 80045c8:	4603      	mov	r3, r0
 80045ca:	4619      	mov	r1, r3
 80045cc:	4628      	mov	r0, r5
 80045ce:	f7fb ff8b 	bl	80004e8 <__aeabi_fmul>
 80045d2:	4603      	mov	r3, r0
 80045d4:	61fb      	str	r3, [r7, #28]
        break;
 80045d6:	e033      	b.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
 80045d8:	58024400 	.word	0x58024400
 80045dc:	03d09000 	.word	0x03d09000
 80045e0:	4c742400 	.word	0x4c742400
 80045e4:	4a742400 	.word	0x4a742400
 80045e8:	4bb71b00 	.word	0x4bb71b00

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7fb ff23 	bl	8000438 <__aeabi_ui2f>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4619      	mov	r1, r3
 80045f6:	4840      	ldr	r0, [pc, #256]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x300>)
 80045f8:	f7fc f82a 	bl	8000650 <__aeabi_fdiv>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461d      	mov	r5, r3
 8004600:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x304>)
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff15 	bl	8000438 <__aeabi_ui2f>
 800460e:	4604      	mov	r4, r0
 8004610:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7fc f81b 	bl	8000650 <__aeabi_fdiv>
 800461a:	4603      	mov	r3, r0
 800461c:	4619      	mov	r1, r3
 800461e:	4620      	mov	r0, r4
 8004620:	f7fb fe5a 	bl	80002d8 <__addsf3>
 8004624:	4603      	mov	r3, r0
 8004626:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800462a:	4618      	mov	r0, r3
 800462c:	f7fb fe54 	bl	80002d8 <__addsf3>
 8004630:	4603      	mov	r3, r0
 8004632:	4619      	mov	r1, r3
 8004634:	4628      	mov	r0, r5
 8004636:	f7fb ff57 	bl	80004e8 <__aeabi_fmul>
 800463a:	4603      	mov	r3, r0
 800463c:	61fb      	str	r3, [r7, #28]
        break;
 800463e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004640:	4b2e      	ldr	r3, [pc, #184]	@ (80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x304>)
 8004642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004644:	0a5b      	lsrs	r3, r3, #9
 8004646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800464a:	4618      	mov	r0, r3
 800464c:	f7fb fef4 	bl	8000438 <__aeabi_ui2f>
 8004650:	4603      	mov	r3, r0
 8004652:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb fe3e 	bl	80002d8 <__addsf3>
 800465c:	4603      	mov	r3, r0
 800465e:	4619      	mov	r1, r3
 8004660:	69f8      	ldr	r0, [r7, #28]
 8004662:	f7fb fff5 	bl	8000650 <__aeabi_fdiv>
 8004666:	4603      	mov	r3, r0
 8004668:	4618      	mov	r0, r3
 800466a:	f7fc f929 	bl	80008c0 <__aeabi_f2uiz>
 800466e:	4602      	mov	r2, r0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004674:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x304>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb feda 	bl	8000438 <__aeabi_ui2f>
 8004684:	4603      	mov	r3, r0
 8004686:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb fe24 	bl	80002d8 <__addsf3>
 8004690:	4603      	mov	r3, r0
 8004692:	4619      	mov	r1, r3
 8004694:	69f8      	ldr	r0, [r7, #28]
 8004696:	f7fb ffdb 	bl	8000650 <__aeabi_fdiv>
 800469a:	4603      	mov	r3, r0
 800469c:	4618      	mov	r0, r3
 800469e:	f7fc f90f 	bl	80008c0 <__aeabi_f2uiz>
 80046a2:	4602      	mov	r2, r0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80046a8:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x304>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	0e1b      	lsrs	r3, r3, #24
 80046ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fec0 	bl	8000438 <__aeabi_ui2f>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fb fe0a 	bl	80002d8 <__addsf3>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4619      	mov	r1, r3
 80046c8:	69f8      	ldr	r0, [r7, #28]
 80046ca:	f7fb ffc1 	bl	8000650 <__aeabi_fdiv>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fc f8f5 	bl	80008c0 <__aeabi_f2uiz>
 80046d6:	4602      	mov	r2, r0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046dc:	e008      	b.n	80046f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2f8>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
}
 80046f0:	bf00      	nop
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bdb0      	pop	{r4, r5, r7, pc}
 80046f8:	4a742400 	.word	0x4a742400
 80046fc:	58024400 	.word	0x58024400

08004700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800470e:	4b53      	ldr	r3, [pc, #332]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d101      	bne.n	800471e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e099      	b.n	8004852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800471e:	4b4f      	ldr	r3, [pc, #316]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a4e      	ldr	r2, [pc, #312]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004724:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472a:	f7fd f891 	bl	8001850 <HAL_GetTick>
 800472e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004730:	e008      	b.n	8004744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004732:	f7fd f88d 	bl	8001850 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e086      	b.n	8004852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004744:	4b45      	ldr	r3, [pc, #276]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004750:	4b42      	ldr	r3, [pc, #264]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	493f      	ldr	r1, [pc, #252]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004760:	4313      	orrs	r3, r2
 8004762:	628b      	str	r3, [r1, #40]	@ 0x28
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	3b01      	subs	r3, #1
 800476a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	3b01      	subs	r3, #1
 8004774:	025b      	lsls	r3, r3, #9
 8004776:	b29b      	uxth	r3, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	3b01      	subs	r3, #1
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	3b01      	subs	r3, #1
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004794:	4931      	ldr	r1, [pc, #196]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800479a:	4b30      	ldr	r3, [pc, #192]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	492d      	ldr	r1, [pc, #180]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047ac:	4b2b      	ldr	r3, [pc, #172]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	f023 0220 	bic.w	r2, r3, #32
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	4928      	ldr	r1, [pc, #160]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047be:	4b27      	ldr	r3, [pc, #156]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	4a26      	ldr	r2, [pc, #152]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047c4:	f023 0310 	bic.w	r3, r3, #16
 80047c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047ca:	4b24      	ldr	r3, [pc, #144]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ce:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <RCCEx_PLL2_Config+0x160>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	69d2      	ldr	r2, [r2, #28]
 80047d6:	00d2      	lsls	r2, r2, #3
 80047d8:	4920      	ldr	r1, [pc, #128]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047de:	4b1f      	ldr	r3, [pc, #124]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	4a1e      	ldr	r2, [pc, #120]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047e4:	f043 0310 	orr.w	r3, r3, #16
 80047e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	4a19      	ldr	r2, [pc, #100]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 80047f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047fc:	e00f      	b.n	800481e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004804:	4b15      	ldr	r3, [pc, #84]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004808:	4a14      	ldr	r2, [pc, #80]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 800480a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800480e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004810:	e005      	b.n	800481e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004812:	4b12      	ldr	r3, [pc, #72]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	4a11      	ldr	r2, [pc, #68]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800481c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800481e:	4b0f      	ldr	r3, [pc, #60]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a0e      	ldr	r2, [pc, #56]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482a:	f7fd f811 	bl	8001850 <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004830:	e008      	b.n	8004844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004832:	f7fd f80d 	bl	8001850 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e006      	b.n	8004852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004844:	4b05      	ldr	r3, [pc, #20]	@ (800485c <RCCEx_PLL2_Config+0x15c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	58024400 	.word	0x58024400
 8004860:	ffff0007 	.word	0xffff0007

08004864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004872:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b03      	cmp	r3, #3
 800487c:	d101      	bne.n	8004882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e099      	b.n	80049b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004882:	4b4f      	ldr	r3, [pc, #316]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4e      	ldr	r2, [pc, #312]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800488c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fc ffdf 	bl	8001850 <HAL_GetTick>
 8004892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004894:	e008      	b.n	80048a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004896:	f7fc ffdb 	bl	8001850 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e086      	b.n	80049b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048a8:	4b45      	ldr	r3, [pc, #276]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048b4:	4b42      	ldr	r3, [pc, #264]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	051b      	lsls	r3, r3, #20
 80048c2:	493f      	ldr	r1, [pc, #252]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	025b      	lsls	r3, r3, #9
 80048da:	b29b      	uxth	r3, r3
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	061b      	lsls	r3, r3, #24
 80048f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048f8:	4931      	ldr	r1, [pc, #196]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048fe:	4b30      	ldr	r3, [pc, #192]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	492d      	ldr	r1, [pc, #180]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800490c:	4313      	orrs	r3, r2
 800490e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004910:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4928      	ldr	r1, [pc, #160]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004922:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	4a26      	ldr	r2, [pc, #152]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800492c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800492e:	4b24      	ldr	r3, [pc, #144]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004932:	4b24      	ldr	r3, [pc, #144]	@ (80049c4 <RCCEx_PLL3_Config+0x160>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	69d2      	ldr	r2, [r2, #28]
 800493a:	00d2      	lsls	r2, r2, #3
 800493c:	4920      	ldr	r1, [pc, #128]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004942:	4b1f      	ldr	r3, [pc, #124]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	4a1e      	ldr	r2, [pc, #120]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004954:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	4a19      	ldr	r2, [pc, #100]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800495a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800495e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004960:	e00f      	b.n	8004982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800496e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004974:	e005      	b.n	8004982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	4a11      	ldr	r2, [pc, #68]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 800497c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004980:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004982:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a0e      	ldr	r2, [pc, #56]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498e:	f7fc ff5f 	bl	8001850 <HAL_GetTick>
 8004992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004994:	e008      	b.n	80049a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004996:	f7fc ff5b 	bl	8001850 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e006      	b.n	80049b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049a8:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	58024400 	.word	0x58024400
 80049c4:	ffff0007 	.word	0xffff0007

080049c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	@ 0x28
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d17b      	bne.n	8004ada <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_Transmit+0x26>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e074      	b.n	8004adc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2221      	movs	r2, #33	@ 0x21
 80049fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a02:	f7fc ff25 	bl	8001850 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a20:	d108      	bne.n	8004a34 <HAL_UART_Transmit+0x6c>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	e003      	b.n	8004a3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a3c:	e030      	b.n	8004aa0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2180      	movs	r1, #128	@ 0x80
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f001 f804 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e03d      	b.n	8004adc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e007      	b.n	8004a8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1c8      	bne.n	8004a3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2140      	movs	r1, #64	@ 0x40
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 ffcd 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e006      	b.n	8004adc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
  }
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae8:	b092      	sub	sp, #72	@ 0x48
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4bbe      	ldr	r3, [pc, #760]	@ (8004e0c <UART_SetConfig+0x328>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4ab3      	ldr	r2, [pc, #716]	@ (8004e10 <UART_SetConfig+0x32c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	4baf      	ldr	r3, [pc, #700]	@ (8004e14 <UART_SetConfig+0x330>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	f023 010f 	bic.w	r1, r3, #15
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4aa6      	ldr	r2, [pc, #664]	@ (8004e18 <UART_SetConfig+0x334>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d177      	bne.n	8004c74 <UART_SetConfig+0x190>
 8004b84:	4ba5      	ldr	r3, [pc, #660]	@ (8004e1c <UART_SetConfig+0x338>)
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b8c:	2b28      	cmp	r3, #40	@ 0x28
 8004b8e:	d86d      	bhi.n	8004c6c <UART_SetConfig+0x188>
 8004b90:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <UART_SetConfig+0xb4>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004c3d 	.word	0x08004c3d
 8004b9c:	08004c6d 	.word	0x08004c6d
 8004ba0:	08004c6d 	.word	0x08004c6d
 8004ba4:	08004c6d 	.word	0x08004c6d
 8004ba8:	08004c6d 	.word	0x08004c6d
 8004bac:	08004c6d 	.word	0x08004c6d
 8004bb0:	08004c6d 	.word	0x08004c6d
 8004bb4:	08004c6d 	.word	0x08004c6d
 8004bb8:	08004c45 	.word	0x08004c45
 8004bbc:	08004c6d 	.word	0x08004c6d
 8004bc0:	08004c6d 	.word	0x08004c6d
 8004bc4:	08004c6d 	.word	0x08004c6d
 8004bc8:	08004c6d 	.word	0x08004c6d
 8004bcc:	08004c6d 	.word	0x08004c6d
 8004bd0:	08004c6d 	.word	0x08004c6d
 8004bd4:	08004c6d 	.word	0x08004c6d
 8004bd8:	08004c4d 	.word	0x08004c4d
 8004bdc:	08004c6d 	.word	0x08004c6d
 8004be0:	08004c6d 	.word	0x08004c6d
 8004be4:	08004c6d 	.word	0x08004c6d
 8004be8:	08004c6d 	.word	0x08004c6d
 8004bec:	08004c6d 	.word	0x08004c6d
 8004bf0:	08004c6d 	.word	0x08004c6d
 8004bf4:	08004c6d 	.word	0x08004c6d
 8004bf8:	08004c55 	.word	0x08004c55
 8004bfc:	08004c6d 	.word	0x08004c6d
 8004c00:	08004c6d 	.word	0x08004c6d
 8004c04:	08004c6d 	.word	0x08004c6d
 8004c08:	08004c6d 	.word	0x08004c6d
 8004c0c:	08004c6d 	.word	0x08004c6d
 8004c10:	08004c6d 	.word	0x08004c6d
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c5d 	.word	0x08004c5d
 8004c1c:	08004c6d 	.word	0x08004c6d
 8004c20:	08004c6d 	.word	0x08004c6d
 8004c24:	08004c6d 	.word	0x08004c6d
 8004c28:	08004c6d 	.word	0x08004c6d
 8004c2c:	08004c6d 	.word	0x08004c6d
 8004c30:	08004c6d 	.word	0x08004c6d
 8004c34:	08004c6d 	.word	0x08004c6d
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e326      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e322      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e31e      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e31a      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e316      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c64:	2340      	movs	r3, #64	@ 0x40
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e312      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e30e      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a69      	ldr	r2, [pc, #420]	@ (8004e20 <UART_SetConfig+0x33c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d130      	bne.n	8004ce0 <UART_SetConfig+0x1fc>
 8004c7e:	4b67      	ldr	r3, [pc, #412]	@ (8004e1c <UART_SetConfig+0x338>)
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	2b05      	cmp	r3, #5
 8004c88:	d826      	bhi.n	8004cd8 <UART_SetConfig+0x1f4>
 8004c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <UART_SetConfig+0x1ac>)
 8004c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c90:	08004ca9 	.word	0x08004ca9
 8004c94:	08004cb1 	.word	0x08004cb1
 8004c98:	08004cb9 	.word	0x08004cb9
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e2f0      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e2ec      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e2e8      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc6:	e2e4      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004cc8:	2320      	movs	r3, #32
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e2e0      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004cd0:	2340      	movs	r3, #64	@ 0x40
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e2dc      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004cd8:	2380      	movs	r3, #128	@ 0x80
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e2d8      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8004e24 <UART_SetConfig+0x340>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d130      	bne.n	8004d4c <UART_SetConfig+0x268>
 8004cea:	4b4c      	ldr	r3, [pc, #304]	@ (8004e1c <UART_SetConfig+0x338>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d826      	bhi.n	8004d44 <UART_SetConfig+0x260>
 8004cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <UART_SetConfig+0x218>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d15 	.word	0x08004d15
 8004d00:	08004d1d 	.word	0x08004d1d
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d35 	.word	0x08004d35
 8004d10:	08004d3d 	.word	0x08004d3d
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e2ba      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e2b6      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e2b2      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d32:	e2ae      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d34:	2320      	movs	r3, #32
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e2aa      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d3c:	2340      	movs	r3, #64	@ 0x40
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e2a6      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e2a2      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a35      	ldr	r2, [pc, #212]	@ (8004e28 <UART_SetConfig+0x344>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d130      	bne.n	8004db8 <UART_SetConfig+0x2d4>
 8004d56:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <UART_SetConfig+0x338>)
 8004d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d826      	bhi.n	8004db0 <UART_SetConfig+0x2cc>
 8004d62:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <UART_SetConfig+0x284>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d81 	.word	0x08004d81
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	08004d91 	.word	0x08004d91
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e284      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8e:	e280      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d90:	2308      	movs	r3, #8
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d96:	e27c      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9e:	e278      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004da0:	2320      	movs	r3, #32
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e274      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004da8:	2340      	movs	r3, #64	@ 0x40
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e270      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db6:	e26c      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <UART_SetConfig+0x348>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d142      	bne.n	8004e48 <UART_SetConfig+0x364>
 8004dc2:	4b16      	ldr	r3, [pc, #88]	@ (8004e1c <UART_SetConfig+0x338>)
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d838      	bhi.n	8004e40 <UART_SetConfig+0x35c>
 8004dce:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <UART_SetConfig+0x2f0>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004ded 	.word	0x08004ded
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004dfd 	.word	0x08004dfd
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e39 	.word	0x08004e39
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e24e      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004df4:	2304      	movs	r3, #4
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfa:	e24a      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004dfc:	2308      	movs	r3, #8
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e02:	e246      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004e04:	2310      	movs	r3, #16
 8004e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0a:	e242      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004e0c:	cfff69f3 	.word	0xcfff69f3
 8004e10:	58000c00 	.word	0x58000c00
 8004e14:	11fff4ff 	.word	0x11fff4ff
 8004e18:	40011000 	.word	0x40011000
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	40004400 	.word	0x40004400
 8004e24:	40004800 	.word	0x40004800
 8004e28:	40004c00 	.word	0x40004c00
 8004e2c:	40005000 	.word	0x40005000
 8004e30:	2320      	movs	r3, #32
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e36:	e22c      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004e38:	2340      	movs	r3, #64	@ 0x40
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3e:	e228      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004e40:	2380      	movs	r3, #128	@ 0x80
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e46:	e224      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4ab1      	ldr	r2, [pc, #708]	@ (8005114 <UART_SetConfig+0x630>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d176      	bne.n	8004f40 <UART_SetConfig+0x45c>
 8004e52:	4bb1      	ldr	r3, [pc, #708]	@ (8005118 <UART_SetConfig+0x634>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5a:	2b28      	cmp	r3, #40	@ 0x28
 8004e5c:	d86c      	bhi.n	8004f38 <UART_SetConfig+0x454>
 8004e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <UART_SetConfig+0x380>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004f09 	.word	0x08004f09
 8004e68:	08004f39 	.word	0x08004f39
 8004e6c:	08004f39 	.word	0x08004f39
 8004e70:	08004f39 	.word	0x08004f39
 8004e74:	08004f39 	.word	0x08004f39
 8004e78:	08004f39 	.word	0x08004f39
 8004e7c:	08004f39 	.word	0x08004f39
 8004e80:	08004f39 	.word	0x08004f39
 8004e84:	08004f11 	.word	0x08004f11
 8004e88:	08004f39 	.word	0x08004f39
 8004e8c:	08004f39 	.word	0x08004f39
 8004e90:	08004f39 	.word	0x08004f39
 8004e94:	08004f39 	.word	0x08004f39
 8004e98:	08004f39 	.word	0x08004f39
 8004e9c:	08004f39 	.word	0x08004f39
 8004ea0:	08004f39 	.word	0x08004f39
 8004ea4:	08004f19 	.word	0x08004f19
 8004ea8:	08004f39 	.word	0x08004f39
 8004eac:	08004f39 	.word	0x08004f39
 8004eb0:	08004f39 	.word	0x08004f39
 8004eb4:	08004f39 	.word	0x08004f39
 8004eb8:	08004f39 	.word	0x08004f39
 8004ebc:	08004f39 	.word	0x08004f39
 8004ec0:	08004f39 	.word	0x08004f39
 8004ec4:	08004f21 	.word	0x08004f21
 8004ec8:	08004f39 	.word	0x08004f39
 8004ecc:	08004f39 	.word	0x08004f39
 8004ed0:	08004f39 	.word	0x08004f39
 8004ed4:	08004f39 	.word	0x08004f39
 8004ed8:	08004f39 	.word	0x08004f39
 8004edc:	08004f39 	.word	0x08004f39
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f29 	.word	0x08004f29
 8004ee8:	08004f39 	.word	0x08004f39
 8004eec:	08004f39 	.word	0x08004f39
 8004ef0:	08004f39 	.word	0x08004f39
 8004ef4:	08004f39 	.word	0x08004f39
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f39 	.word	0x08004f39
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e1c0      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f16:	e1bc      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e1b8      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e1b4      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e1b0      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f30:	2340      	movs	r3, #64	@ 0x40
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e1ac      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e1a8      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a75      	ldr	r2, [pc, #468]	@ (800511c <UART_SetConfig+0x638>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d130      	bne.n	8004fac <UART_SetConfig+0x4c8>
 8004f4a:	4b73      	ldr	r3, [pc, #460]	@ (8005118 <UART_SetConfig+0x634>)
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d826      	bhi.n	8004fa4 <UART_SetConfig+0x4c0>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <UART_SetConfig+0x478>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f75 	.word	0x08004f75
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e18a      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e186      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e182      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e17e      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f94:	2320      	movs	r3, #32
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e17a      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004f9c:	2340      	movs	r3, #64	@ 0x40
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e176      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e172      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a5b      	ldr	r2, [pc, #364]	@ (8005120 <UART_SetConfig+0x63c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d130      	bne.n	8005018 <UART_SetConfig+0x534>
 8004fb6:	4b58      	ldr	r3, [pc, #352]	@ (8005118 <UART_SetConfig+0x634>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d826      	bhi.n	8005010 <UART_SetConfig+0x52c>
 8004fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x4e4>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fe1 	.word	0x08004fe1
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e154      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e150      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e14c      	b.n	8005292 <UART_SetConfig+0x7ae>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e148      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005000:	2320      	movs	r3, #32
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e144      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005008:	2340      	movs	r3, #64	@ 0x40
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e140      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e13c      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a41      	ldr	r2, [pc, #260]	@ (8005124 <UART_SetConfig+0x640>)
 800501e:	4293      	cmp	r3, r2
 8005020:	f040 8082 	bne.w	8005128 <UART_SetConfig+0x644>
 8005024:	4b3c      	ldr	r3, [pc, #240]	@ (8005118 <UART_SetConfig+0x634>)
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800502c:	2b28      	cmp	r3, #40	@ 0x28
 800502e:	d86d      	bhi.n	800510c <UART_SetConfig+0x628>
 8005030:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <UART_SetConfig+0x554>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	080050dd 	.word	0x080050dd
 800503c:	0800510d 	.word	0x0800510d
 8005040:	0800510d 	.word	0x0800510d
 8005044:	0800510d 	.word	0x0800510d
 8005048:	0800510d 	.word	0x0800510d
 800504c:	0800510d 	.word	0x0800510d
 8005050:	0800510d 	.word	0x0800510d
 8005054:	0800510d 	.word	0x0800510d
 8005058:	080050e5 	.word	0x080050e5
 800505c:	0800510d 	.word	0x0800510d
 8005060:	0800510d 	.word	0x0800510d
 8005064:	0800510d 	.word	0x0800510d
 8005068:	0800510d 	.word	0x0800510d
 800506c:	0800510d 	.word	0x0800510d
 8005070:	0800510d 	.word	0x0800510d
 8005074:	0800510d 	.word	0x0800510d
 8005078:	080050ed 	.word	0x080050ed
 800507c:	0800510d 	.word	0x0800510d
 8005080:	0800510d 	.word	0x0800510d
 8005084:	0800510d 	.word	0x0800510d
 8005088:	0800510d 	.word	0x0800510d
 800508c:	0800510d 	.word	0x0800510d
 8005090:	0800510d 	.word	0x0800510d
 8005094:	0800510d 	.word	0x0800510d
 8005098:	080050f5 	.word	0x080050f5
 800509c:	0800510d 	.word	0x0800510d
 80050a0:	0800510d 	.word	0x0800510d
 80050a4:	0800510d 	.word	0x0800510d
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	0800510d 	.word	0x0800510d
 80050b0:	0800510d 	.word	0x0800510d
 80050b4:	0800510d 	.word	0x0800510d
 80050b8:	080050fd 	.word	0x080050fd
 80050bc:	0800510d 	.word	0x0800510d
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	0800510d 	.word	0x0800510d
 80050c8:	0800510d 	.word	0x0800510d
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	0800510d 	.word	0x0800510d
 80050d4:	0800510d 	.word	0x0800510d
 80050d8:	08005105 	.word	0x08005105
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e2:	e0d6      	b.n	8005292 <UART_SetConfig+0x7ae>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ea:	e0d2      	b.n	8005292 <UART_SetConfig+0x7ae>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f2:	e0ce      	b.n	8005292 <UART_SetConfig+0x7ae>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fa:	e0ca      	b.n	8005292 <UART_SetConfig+0x7ae>
 80050fc:	2320      	movs	r3, #32
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005102:	e0c6      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005104:	2340      	movs	r3, #64	@ 0x40
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510a:	e0c2      	b.n	8005292 <UART_SetConfig+0x7ae>
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005112:	e0be      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005114:	40011400 	.word	0x40011400
 8005118:	58024400 	.word	0x58024400
 800511c:	40007800 	.word	0x40007800
 8005120:	40007c00 	.word	0x40007c00
 8005124:	40011800 	.word	0x40011800
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4aad      	ldr	r2, [pc, #692]	@ (80053e4 <UART_SetConfig+0x900>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d176      	bne.n	8005220 <UART_SetConfig+0x73c>
 8005132:	4bad      	ldr	r3, [pc, #692]	@ (80053e8 <UART_SetConfig+0x904>)
 8005134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800513a:	2b28      	cmp	r3, #40	@ 0x28
 800513c:	d86c      	bhi.n	8005218 <UART_SetConfig+0x734>
 800513e:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <UART_SetConfig+0x660>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	080051e9 	.word	0x080051e9
 8005148:	08005219 	.word	0x08005219
 800514c:	08005219 	.word	0x08005219
 8005150:	08005219 	.word	0x08005219
 8005154:	08005219 	.word	0x08005219
 8005158:	08005219 	.word	0x08005219
 800515c:	08005219 	.word	0x08005219
 8005160:	08005219 	.word	0x08005219
 8005164:	080051f1 	.word	0x080051f1
 8005168:	08005219 	.word	0x08005219
 800516c:	08005219 	.word	0x08005219
 8005170:	08005219 	.word	0x08005219
 8005174:	08005219 	.word	0x08005219
 8005178:	08005219 	.word	0x08005219
 800517c:	08005219 	.word	0x08005219
 8005180:	08005219 	.word	0x08005219
 8005184:	080051f9 	.word	0x080051f9
 8005188:	08005219 	.word	0x08005219
 800518c:	08005219 	.word	0x08005219
 8005190:	08005219 	.word	0x08005219
 8005194:	08005219 	.word	0x08005219
 8005198:	08005219 	.word	0x08005219
 800519c:	08005219 	.word	0x08005219
 80051a0:	08005219 	.word	0x08005219
 80051a4:	08005201 	.word	0x08005201
 80051a8:	08005219 	.word	0x08005219
 80051ac:	08005219 	.word	0x08005219
 80051b0:	08005219 	.word	0x08005219
 80051b4:	08005219 	.word	0x08005219
 80051b8:	08005219 	.word	0x08005219
 80051bc:	08005219 	.word	0x08005219
 80051c0:	08005219 	.word	0x08005219
 80051c4:	08005209 	.word	0x08005209
 80051c8:	08005219 	.word	0x08005219
 80051cc:	08005219 	.word	0x08005219
 80051d0:	08005219 	.word	0x08005219
 80051d4:	08005219 	.word	0x08005219
 80051d8:	08005219 	.word	0x08005219
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005219 	.word	0x08005219
 80051e4:	08005211 	.word	0x08005211
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e050      	b.n	8005292 <UART_SetConfig+0x7ae>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f6:	e04c      	b.n	8005292 <UART_SetConfig+0x7ae>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e048      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005206:	e044      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005208:	2320      	movs	r3, #32
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520e:	e040      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005210:	2340      	movs	r3, #64	@ 0x40
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005216:	e03c      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521e:	e038      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a71      	ldr	r2, [pc, #452]	@ (80053ec <UART_SetConfig+0x908>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d130      	bne.n	800528c <UART_SetConfig+0x7a8>
 800522a:	4b6f      	ldr	r3, [pc, #444]	@ (80053e8 <UART_SetConfig+0x904>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b05      	cmp	r3, #5
 8005234:	d826      	bhi.n	8005284 <UART_SetConfig+0x7a0>
 8005236:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <UART_SetConfig+0x758>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005255 	.word	0x08005255
 8005240:	0800525d 	.word	0x0800525d
 8005244:	08005265 	.word	0x08005265
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	2302      	movs	r3, #2
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e01a      	b.n	8005292 <UART_SetConfig+0x7ae>
 800525c:	2304      	movs	r3, #4
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e016      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005264:	2308      	movs	r3, #8
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e012      	b.n	8005292 <UART_SetConfig+0x7ae>
 800526c:	2310      	movs	r3, #16
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e00e      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005274:	2320      	movs	r3, #32
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527a:	e00a      	b.n	8005292 <UART_SetConfig+0x7ae>
 800527c:	2340      	movs	r3, #64	@ 0x40
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005282:	e006      	b.n	8005292 <UART_SetConfig+0x7ae>
 8005284:	2380      	movs	r3, #128	@ 0x80
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528a:	e002      	b.n	8005292 <UART_SetConfig+0x7ae>
 800528c:	2380      	movs	r3, #128	@ 0x80
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a55      	ldr	r2, [pc, #340]	@ (80053ec <UART_SetConfig+0x908>)
 8005298:	4293      	cmp	r3, r2
 800529a:	f040 80f8 	bne.w	800548e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800529e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	dc46      	bgt.n	8005334 <UART_SetConfig+0x850>
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	db75      	blt.n	8005396 <UART_SetConfig+0x8b2>
 80052aa:	3b02      	subs	r3, #2
 80052ac:	2b1e      	cmp	r3, #30
 80052ae:	d872      	bhi.n	8005396 <UART_SetConfig+0x8b2>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <UART_SetConfig+0x7d4>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	0800533b 	.word	0x0800533b
 80052bc:	08005397 	.word	0x08005397
 80052c0:	08005343 	.word	0x08005343
 80052c4:	08005397 	.word	0x08005397
 80052c8:	08005397 	.word	0x08005397
 80052cc:	08005397 	.word	0x08005397
 80052d0:	08005353 	.word	0x08005353
 80052d4:	08005397 	.word	0x08005397
 80052d8:	08005397 	.word	0x08005397
 80052dc:	08005397 	.word	0x08005397
 80052e0:	08005397 	.word	0x08005397
 80052e4:	08005397 	.word	0x08005397
 80052e8:	08005397 	.word	0x08005397
 80052ec:	08005397 	.word	0x08005397
 80052f0:	08005363 	.word	0x08005363
 80052f4:	08005397 	.word	0x08005397
 80052f8:	08005397 	.word	0x08005397
 80052fc:	08005397 	.word	0x08005397
 8005300:	08005397 	.word	0x08005397
 8005304:	08005397 	.word	0x08005397
 8005308:	08005397 	.word	0x08005397
 800530c:	08005397 	.word	0x08005397
 8005310:	08005397 	.word	0x08005397
 8005314:	08005397 	.word	0x08005397
 8005318:	08005397 	.word	0x08005397
 800531c:	08005397 	.word	0x08005397
 8005320:	08005397 	.word	0x08005397
 8005324:	08005397 	.word	0x08005397
 8005328:	08005397 	.word	0x08005397
 800532c:	08005397 	.word	0x08005397
 8005330:	08005389 	.word	0x08005389
 8005334:	2b40      	cmp	r3, #64	@ 0x40
 8005336:	d02a      	beq.n	800538e <UART_SetConfig+0x8aa>
 8005338:	e02d      	b.n	8005396 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800533a:	f7fe fec3 	bl	80040c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800533e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005340:	e02f      	b.n	80053a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fed2 	bl	80040f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005350:	e027      	b.n	80053a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005352:	f107 0318 	add.w	r3, r7, #24
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff f84e 	bl	80043f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005360:	e01f      	b.n	80053a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005362:	4b21      	ldr	r3, [pc, #132]	@ (80053e8 <UART_SetConfig+0x904>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800536e:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <UART_SetConfig+0x904>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	08db      	lsrs	r3, r3, #3
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	4a1d      	ldr	r2, [pc, #116]	@ (80053f0 <UART_SetConfig+0x90c>)
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005380:	e00f      	b.n	80053a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005382:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <UART_SetConfig+0x90c>)
 8005384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005386:	e00c      	b.n	80053a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005388:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <UART_SetConfig+0x910>)
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800538c:	e009      	b.n	80053a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800538e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005394:	e005      	b.n	80053a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80053a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 81ee 	beq.w	8005786 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	4a12      	ldr	r2, [pc, #72]	@ (80053f8 <UART_SetConfig+0x914>)
 80053b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80053bc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	4413      	add	r3, r2
 80053c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d305      	bcc.n	80053da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d910      	bls.n	80053fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80053e0:	e1d1      	b.n	8005786 <UART_SetConfig+0xca2>
 80053e2:	bf00      	nop
 80053e4:	40011c00 	.word	0x40011c00
 80053e8:	58024400 	.word	0x58024400
 80053ec:	58000c00 	.word	0x58000c00
 80053f0:	03d09000 	.word	0x03d09000
 80053f4:	003d0900 	.word	0x003d0900
 80053f8:	08007248 	.word	0x08007248
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053fe:	2200      	movs	r2, #0
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	60fa      	str	r2, [r7, #12]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	4ab8      	ldr	r2, [pc, #736]	@ (80056ec <UART_SetConfig+0xc08>)
 800540a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540e:	b29b      	uxth	r3, r3
 8005410:	2200      	movs	r2, #0
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800541e:	f7fb fa6f 	bl	8000900 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4610      	mov	r0, r2
 8005428:	4619      	mov	r1, r3
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	020b      	lsls	r3, r1, #8
 8005434:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005438:	0202      	lsls	r2, r0, #8
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	6849      	ldr	r1, [r1, #4]
 800543e:	0849      	lsrs	r1, r1, #1
 8005440:	2000      	movs	r0, #0
 8005442:	460c      	mov	r4, r1
 8005444:	4605      	mov	r5, r0
 8005446:	eb12 0804 	adds.w	r8, r2, r4
 800544a:	eb43 0905 	adc.w	r9, r3, r5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	469a      	mov	sl, r3
 8005456:	4693      	mov	fp, r2
 8005458:	4652      	mov	r2, sl
 800545a:	465b      	mov	r3, fp
 800545c:	4640      	mov	r0, r8
 800545e:	4649      	mov	r1, r9
 8005460:	f7fb fa4e 	bl	8000900 <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4613      	mov	r3, r2
 800546a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005472:	d308      	bcc.n	8005486 <UART_SetConfig+0x9a2>
 8005474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800547a:	d204      	bcs.n	8005486 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005482:	60da      	str	r2, [r3, #12]
 8005484:	e17f      	b.n	8005786 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800548c:	e17b      	b.n	8005786 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005496:	f040 80bd 	bne.w	8005614 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800549a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800549e:	2b20      	cmp	r3, #32
 80054a0:	dc48      	bgt.n	8005534 <UART_SetConfig+0xa50>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db7b      	blt.n	800559e <UART_SetConfig+0xaba>
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d879      	bhi.n	800559e <UART_SetConfig+0xaba>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <UART_SetConfig+0x9cc>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	0800553b 	.word	0x0800553b
 80054b4:	08005543 	.word	0x08005543
 80054b8:	0800559f 	.word	0x0800559f
 80054bc:	0800559f 	.word	0x0800559f
 80054c0:	0800554b 	.word	0x0800554b
 80054c4:	0800559f 	.word	0x0800559f
 80054c8:	0800559f 	.word	0x0800559f
 80054cc:	0800559f 	.word	0x0800559f
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	0800559f 	.word	0x0800559f
 80054d8:	0800559f 	.word	0x0800559f
 80054dc:	0800559f 	.word	0x0800559f
 80054e0:	0800559f 	.word	0x0800559f
 80054e4:	0800559f 	.word	0x0800559f
 80054e8:	0800559f 	.word	0x0800559f
 80054ec:	0800559f 	.word	0x0800559f
 80054f0:	0800556b 	.word	0x0800556b
 80054f4:	0800559f 	.word	0x0800559f
 80054f8:	0800559f 	.word	0x0800559f
 80054fc:	0800559f 	.word	0x0800559f
 8005500:	0800559f 	.word	0x0800559f
 8005504:	0800559f 	.word	0x0800559f
 8005508:	0800559f 	.word	0x0800559f
 800550c:	0800559f 	.word	0x0800559f
 8005510:	0800559f 	.word	0x0800559f
 8005514:	0800559f 	.word	0x0800559f
 8005518:	0800559f 	.word	0x0800559f
 800551c:	0800559f 	.word	0x0800559f
 8005520:	0800559f 	.word	0x0800559f
 8005524:	0800559f 	.word	0x0800559f
 8005528:	0800559f 	.word	0x0800559f
 800552c:	0800559f 	.word	0x0800559f
 8005530:	08005591 	.word	0x08005591
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d02e      	beq.n	8005596 <UART_SetConfig+0xab2>
 8005538:	e031      	b.n	800559e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553a:	f7fd fbf7 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 800553e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005540:	e033      	b.n	80055aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005542:	f7fd fc09 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8005546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005548:	e02f      	b.n	80055aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800554a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fdce 	bl	80040f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005558:	e027      	b.n	80055aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800555a:	f107 0318 	add.w	r3, r7, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe ff4a 	bl	80043f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005568:	e01f      	b.n	80055aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800556a:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <UART_SetConfig+0xc0c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005576:	4b5e      	ldr	r3, [pc, #376]	@ (80056f0 <UART_SetConfig+0xc0c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	4a5c      	ldr	r2, [pc, #368]	@ (80056f4 <UART_SetConfig+0xc10>)
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005588:	e00f      	b.n	80055aa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800558a:	4b5a      	ldr	r3, [pc, #360]	@ (80056f4 <UART_SetConfig+0xc10>)
 800558c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800558e:	e00c      	b.n	80055aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005590:	4b59      	ldr	r3, [pc, #356]	@ (80056f8 <UART_SetConfig+0xc14>)
 8005592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005594:	e009      	b.n	80055aa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800559a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800559c:	e005      	b.n	80055aa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80ea 	beq.w	8005786 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	4a4d      	ldr	r2, [pc, #308]	@ (80056ec <UART_SetConfig+0xc08>)
 80055b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055bc:	461a      	mov	r2, r3
 80055be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055c4:	005a      	lsls	r2, r3, #1
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	441a      	add	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	2b0f      	cmp	r3, #15
 80055dc:	d916      	bls.n	800560c <UART_SetConfig+0xb28>
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e4:	d212      	bcs.n	800560c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f023 030f 	bic.w	r3, r3, #15
 80055ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055fe:	4313      	orrs	r3, r2
 8005600:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	e0bc      	b.n	8005786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005612:	e0b8      	b.n	8005786 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005614:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005618:	2b20      	cmp	r3, #32
 800561a:	dc4b      	bgt.n	80056b4 <UART_SetConfig+0xbd0>
 800561c:	2b00      	cmp	r3, #0
 800561e:	f2c0 8087 	blt.w	8005730 <UART_SetConfig+0xc4c>
 8005622:	2b20      	cmp	r3, #32
 8005624:	f200 8084 	bhi.w	8005730 <UART_SetConfig+0xc4c>
 8005628:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <UART_SetConfig+0xb4c>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	080056bb 	.word	0x080056bb
 8005634:	080056c3 	.word	0x080056c3
 8005638:	08005731 	.word	0x08005731
 800563c:	08005731 	.word	0x08005731
 8005640:	080056cb 	.word	0x080056cb
 8005644:	08005731 	.word	0x08005731
 8005648:	08005731 	.word	0x08005731
 800564c:	08005731 	.word	0x08005731
 8005650:	080056db 	.word	0x080056db
 8005654:	08005731 	.word	0x08005731
 8005658:	08005731 	.word	0x08005731
 800565c:	08005731 	.word	0x08005731
 8005660:	08005731 	.word	0x08005731
 8005664:	08005731 	.word	0x08005731
 8005668:	08005731 	.word	0x08005731
 800566c:	08005731 	.word	0x08005731
 8005670:	080056fd 	.word	0x080056fd
 8005674:	08005731 	.word	0x08005731
 8005678:	08005731 	.word	0x08005731
 800567c:	08005731 	.word	0x08005731
 8005680:	08005731 	.word	0x08005731
 8005684:	08005731 	.word	0x08005731
 8005688:	08005731 	.word	0x08005731
 800568c:	08005731 	.word	0x08005731
 8005690:	08005731 	.word	0x08005731
 8005694:	08005731 	.word	0x08005731
 8005698:	08005731 	.word	0x08005731
 800569c:	08005731 	.word	0x08005731
 80056a0:	08005731 	.word	0x08005731
 80056a4:	08005731 	.word	0x08005731
 80056a8:	08005731 	.word	0x08005731
 80056ac:	08005731 	.word	0x08005731
 80056b0:	08005723 	.word	0x08005723
 80056b4:	2b40      	cmp	r3, #64	@ 0x40
 80056b6:	d037      	beq.n	8005728 <UART_SetConfig+0xc44>
 80056b8:	e03a      	b.n	8005730 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ba:	f7fd fb37 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 80056be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056c0:	e03c      	b.n	800573c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c2:	f7fd fb49 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 80056c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056c8:	e038      	b.n	800573c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fd0e 	bl	80040f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d8:	e030      	b.n	800573c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056da:	f107 0318 	add.w	r3, r7, #24
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fe8a 	bl	80043f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e8:	e028      	b.n	800573c <UART_SetConfig+0xc58>
 80056ea:	bf00      	nop
 80056ec:	08007248 	.word	0x08007248
 80056f0:	58024400 	.word	0x58024400
 80056f4:	03d09000 	.word	0x03d09000
 80056f8:	003d0900 	.word	0x003d0900
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056fc:	4b2c      	ldr	r3, [pc, #176]	@ (80057b0 <UART_SetConfig+0xccc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005708:	4b29      	ldr	r3, [pc, #164]	@ (80057b0 <UART_SetConfig+0xccc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	08db      	lsrs	r3, r3, #3
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	4a28      	ldr	r2, [pc, #160]	@ (80057b4 <UART_SetConfig+0xcd0>)
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800571a:	e00f      	b.n	800573c <UART_SetConfig+0xc58>
          pclk = (uint32_t) HSI_VALUE;
 800571c:	4b25      	ldr	r3, [pc, #148]	@ (80057b4 <UART_SetConfig+0xcd0>)
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005720:	e00c      	b.n	800573c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005722:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <UART_SetConfig+0xcd4>)
 8005724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005726:	e009      	b.n	800573c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800572e:	e005      	b.n	800573c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800573a:	bf00      	nop
    }

    if (pclk != 0U)
 800573c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d021      	beq.n	8005786 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	4a1d      	ldr	r2, [pc, #116]	@ (80057bc <UART_SetConfig+0xcd8>)
 8005748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574c:	461a      	mov	r2, r3
 800574e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005750:	fbb3 f2f2 	udiv	r2, r3, r2
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	441a      	add	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	2b0f      	cmp	r3, #15
 800576a:	d909      	bls.n	8005780 <UART_SetConfig+0xc9c>
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005772:	d205      	bcs.n	8005780 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	b29a      	uxth	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60da      	str	r2, [r3, #12]
 800577e:	e002      	b.n	8005786 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2201      	movs	r2, #1
 800578a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2201      	movs	r2, #1
 8005792:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2200      	movs	r2, #0
 80057a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3748      	adds	r7, #72	@ 0x48
 80057aa:	46bd      	mov	sp, r7
 80057ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b0:	58024400 	.word	0x58024400
 80057b4:	03d09000 	.word	0x03d09000
 80057b8:	003d0900 	.word	0x003d0900
 80057bc:	08007248 	.word	0x08007248

080057c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058be:	d10a      	bne.n	80058d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b098      	sub	sp, #96	@ 0x60
 8005906:	af02      	add	r7, sp, #8
 8005908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005912:	f7fb ff9d 	bl	8001850 <HAL_GetTick>
 8005916:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b08      	cmp	r3, #8
 8005924:	d12f      	bne.n	8005986 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005926:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592e:	2200      	movs	r2, #0
 8005930:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f88e 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d022      	beq.n	8005986 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800594e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005954:	653b      	str	r3, [r7, #80]	@ 0x50
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800595e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005960:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800596c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e6      	bne.n	8005940 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e063      	b.n	8005a4e <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b04      	cmp	r3, #4
 8005992:	d149      	bne.n	8005a28 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005994:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f857 	bl	8005a56 <UART_WaitOnFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d03c      	beq.n	8005a28 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	623b      	str	r3, [r7, #32]
   return(result);
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e6      	bne.n	80059ae <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0301 	bic.w	r3, r3, #1
 80059f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3308      	adds	r3, #8
 80059fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	69b9      	ldr	r1, [r7, #24]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e012      	b.n	8005a4e <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3758      	adds	r7, #88	@ 0x58
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a66:	e049      	b.n	8005afc <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d045      	beq.n	8005afc <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fb feee 	bl	8001850 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e048      	b.n	8005b1c <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d031      	beq.n	8005afc <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d110      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f838 	bl	8005b24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e029      	b.n	8005b1c <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad6:	d111      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ae0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f81e 	bl	8005b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e00f      	b.n	8005b1c <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d0a6      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b095      	sub	sp, #84	@ 0x54
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e6      	bne.n	8005b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3308      	adds	r3, #8
 8005b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	4b1e      	ldr	r3, [pc, #120]	@ (8005bec <UART_EndRxTransfer+0xc8>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e5      	bne.n	8005b5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d118      	bne.n	8005bcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005be0:	bf00      	nop
 8005be2:	3754      	adds	r7, #84	@ 0x54
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	effffffe 	.word	0xeffffffe

08005bf0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e056      	b.n	8005cb6 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7fb fc8c 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2224      	movs	r2, #36	@ 0x24
 8005c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7fe ff53 	bl	8004ae4 <UART_SetConfig>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e036      	b.n	8005cb6 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fdb5 	bl	80057c0 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c64:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	055b      	lsls	r3, r3, #21
 8005c7e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <HAL_RS485Ex_Init+0xd0>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	6979      	ldr	r1, [r7, #20]
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fe27 	bl	8005902 <UART_CheckIdleState>
 8005cb4:	4603      	mov	r3, r0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	fc00ffff 	.word	0xfc00ffff

08005cc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_UARTEx_DisableFifoMode+0x16>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e027      	b.n	8005d2a <HAL_UARTEx_DisableFifoMode+0x66>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2224      	movs	r2, #36	@ 0x24
 8005ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e02d      	b.n	8005da8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2224      	movs	r2, #36	@ 0x24
 8005d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f951 	bl	8006030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e02d      	b.n	8005e24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2224      	movs	r2, #36	@ 0x24
 8005dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f913 	bl	8006030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	f040 80ef 	bne.w	8006026 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_UARTEx_ReceiveToIdle+0x28>
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0e7      	b.n	8006028 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2222      	movs	r2, #34	@ 0x22
 8005e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	671a      	str	r2, [r3, #112]	@ 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e74:	f7fb fcec 	bl	8001850 <HAL_GetTick>
 8005e78:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	88fa      	ldrh	r2, [r7, #6]
 8005e7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	88fa      	ldrh	r2, [r7, #6]
 8005e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e92:	d10e      	bne.n	8005eb2 <HAL_UARTEx_ReceiveToIdle+0x86>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ea6:	e02d      	b.n	8005f04 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	22ff      	movs	r2, #255	@ 0xff
 8005eac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005eb0:	e028      	b.n	8005f04 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <HAL_UARTEx_ReceiveToIdle+0xa0>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	@ 0xff
 8005ec6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005eca:	e01b      	b.n	8005f04 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	227f      	movs	r2, #127	@ 0x7f
 8005ed0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ed4:	e016      	b.n	8005f04 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ede:	d10d      	bne.n	8005efc <HAL_UARTEx_ReceiveToIdle+0xd0>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	227f      	movs	r2, #127	@ 0x7f
 8005eec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ef0:	e008      	b.n	8005f04 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	223f      	movs	r2, #63	@ 0x3f
 8005ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005efa:	e003      	b.n	8005f04 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005f0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f14:	d108      	bne.n	8005f28 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e003      	b.n	8005f30 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f36:	e05f      	b.n	8005ff8 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d110      	bne.n	8005f68 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	671a      	str	r2, [r3, #112]	@ 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e05f      	b.n	8006028 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d12b      	bne.n	8005fce <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10c      	bne.n	8005f96 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	8a7b      	ldrh	r3, [r7, #18]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	3302      	adds	r3, #2
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e00c      	b.n	8005fb0 <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	8a7b      	ldrh	r3, [r7, #18]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	3301      	adds	r3, #1
 8005fae:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d010      	beq.n	8005ff8 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fb fc3b 	bl	8001850 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <HAL_UARTEx_ReceiveToIdle+0x1c0>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d105      	bne.n	8005ff8 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e017      	b.n	8006028 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d199      	bne.n	8005f38 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006010:	b29b      	uxth	r3, r3
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	b29a      	uxth	r2, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006050:	e031      	b.n	80060b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006052:	2310      	movs	r3, #16
 8006054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006056:	2310      	movs	r3, #16
 8006058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	0e5b      	lsrs	r3, r3, #25
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	0f5b      	lsrs	r3, r3, #29
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	7b3a      	ldrb	r2, [r7, #12]
 800607e:	4910      	ldr	r1, [pc, #64]	@ (80060c0 <UARTEx_SetNbDataToProcess+0x90>)
 8006080:	5c8a      	ldrb	r2, [r1, r2]
 8006082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006086:	7b3a      	ldrb	r2, [r7, #12]
 8006088:	490e      	ldr	r1, [pc, #56]	@ (80060c4 <UARTEx_SetNbDataToProcess+0x94>)
 800608a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800608c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006090:	b29a      	uxth	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	7b7a      	ldrb	r2, [r7, #13]
 800609c:	4908      	ldr	r1, [pc, #32]	@ (80060c0 <UARTEx_SetNbDataToProcess+0x90>)
 800609e:	5c8a      	ldrb	r2, [r1, r2]
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060a4:	7b7a      	ldrb	r2, [r7, #13]
 80060a6:	4907      	ldr	r1, [pc, #28]	@ (80060c4 <UARTEx_SetNbDataToProcess+0x94>)
 80060a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80060b6:	bf00      	nop
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr
 80060c0:	08007260 	.word	0x08007260
 80060c4:	08007268 	.word	0x08007268

080060c8 <init_example_motor>:
#include "unitree_motor.h"
#include "string.h"
static motor_config_t *example_motor_config;
unitree_motor_object_t *example_motor_object;
void init_example_motor()
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
    //memset(example_motor_config,0,sizeof(motor_config_t));
    // 为配置结构体分配内存
    example_motor_config = (motor_config_t *)malloc(sizeof(motor_config_t));
 80060ce:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 80060d2:	f000 fa65 	bl	80065a0 <malloc>
 80060d6:	4603      	mov	r3, r0
 80060d8:	461a      	mov	r2, r3
 80060da:	4b2a      	ldr	r3, [pc, #168]	@ (8006184 <init_example_motor+0xbc>)
 80060dc:	601a      	str	r2, [r3, #0]
    if (example_motor_config == NULL) {
 80060de:	4b29      	ldr	r3, [pc, #164]	@ (8006184 <init_example_motor+0xbc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d049      	beq.n	800617a <init_example_motor+0xb2>
        // 内存分配失败处理
        return;
    }
    memset(example_motor_config, 0, sizeof(motor_config_t));
 80060e6:	4b27      	ldr	r3, [pc, #156]	@ (8006184 <init_example_motor+0xbc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fd3d 	bl	8006b70 <memset>
    example_motor_config->motor_type = GO_M8010;
 80060f6:	4b23      	ldr	r3, [pc, #140]	@ (8006184 <init_example_motor+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2207      	movs	r2, #7
 80060fc:	701a      	strb	r2, [r3, #0]
    example_motor_config->cmd.channel = huart2;
 80060fe:	4b21      	ldr	r3, [pc, #132]	@ (8006184 <init_example_motor+0xbc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a21      	ldr	r2, [pc, #132]	@ (8006188 <init_example_motor+0xc0>)
 8006104:	33d8      	adds	r3, #216	@ 0xd8
 8006106:	4611      	mov	r1, r2
 8006108:	2294      	movs	r2, #148	@ 0x94
 800610a:	4618      	mov	r0, r3
 800610c:	f7fa fc12 	bl	8000934 <memcpy>
    MOTOR_send *cmds=&example_motor_config->cmd;
 8006110:	4b1c      	ldr	r3, [pc, #112]	@ (8006184 <init_example_motor+0xbc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	33d8      	adds	r3, #216	@ 0xd8
 8006116:	607b      	str	r3, [r7, #4]
    cmds->id=0;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    cmds->mode=1;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
    cmds->T=0;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    cmds->W=70;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a15      	ldr	r2, [pc, #84]	@ (800618c <init_example_motor+0xc4>)
 8006136:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    cmds->Pos=0;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    cmds->K_P=0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    cmds->K_W=0.05;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a0f      	ldr	r2, [pc, #60]	@ (8006190 <init_example_motor+0xc8>)
 8006152:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    example_motor_object=unitree_motor_register(example_motor_config,NULL);
 8006156:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <init_example_motor+0xbc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2100      	movs	r1, #0
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f829 	bl	80061b4 <unitree_motor_register>
 8006162:	4603      	mov	r3, r0
 8006164:	4a0b      	ldr	r2, [pc, #44]	@ (8006194 <init_example_motor+0xcc>)
 8006166:	6013      	str	r3, [r2, #0]
    free(example_motor_config);
 8006168:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <init_example_motor+0xbc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fa1f 	bl	80065b0 <free>
    example_motor_config = NULL;
 8006172:	4b04      	ldr	r3, [pc, #16]	@ (8006184 <init_example_motor+0xbc>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e000      	b.n	800617c <init_example_motor+0xb4>
        return;
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	240006bc 	.word	0x240006bc
 8006188:	24000590 	.word	0x24000590
 800618c:	428c0000 	.word	0x428c0000
 8006190:	3d4ccccd 	.word	0x3d4ccccd
 8006194:	240006c0 	.word	0x240006c0

08006198 <unitree_motor_enable>:
#include "motor_control.h"
static uint8_t idx = 0; // register idx,是该文件的全局电机索引,在注册时使用
/* DJI电机的实例,此处仅保存指针,内存的分配将通过电机实例初始化时通过malloc()进行 */
static unitree_motor_object_t *unitree_motor_obj[MOTOR_CNT] = {NULL};
void unitree_motor_enable(unitree_motor_object_t *motor_obj)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
    motor_obj->stop_flag = MOTOR_ENALBED;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
	...

080061b4 <unitree_motor_register>:
unitree_motor_object_t *unitree_motor_register(motor_config_t *config, void *control)
{
 80061b4:	b5b0      	push	{r4, r5, r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]


    unitree_motor_object_t *object = malloc(sizeof(unitree_motor_object_t));
 80061be:	f44f 7094 	mov.w	r0, #296	@ 0x128
 80061c2:	f000 f9ed 	bl	80065a0 <malloc>
 80061c6:	4603      	mov	r3, r0
 80061c8:	60fb      	str	r3, [r7, #12]
    object->motor_type = config->motor_type;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    object->cmd.channel=config->channel;
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 80061dc:	3304      	adds	r3, #4
 80061de:	2294      	movs	r2, #148	@ 0x94
 80061e0:	4619      	mov	r1, r3
 80061e2:	f7fa fba7 	bl	8000934 <memcpy>
    object->cmd=config->cmd;
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 80061ee:	33d8      	adds	r3, #216	@ 0xd8
 80061f0:	22d8      	movs	r2, #216	@ 0xd8
 80061f2:	4619      	mov	r1, r3
 80061f4:	f7fa fb9e 	bl	8000934 <memcpy>
    object->measure=config->measure;
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4615      	mov	r5, r2
 80061fe:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8006202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800620a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800620c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800620e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006212:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    object->control = control;
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

    unitree_motor_enable(object); // 默认使能电机
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff ffba 	bl	8006198 <unitree_motor_enable>
    unitree_motor_obj[idx++] = object;
 8006224:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <unitree_motor_register+0x90>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	b2d1      	uxtb	r1, r2
 800622c:	4a05      	ldr	r2, [pc, #20]	@ (8006244 <unitree_motor_register+0x90>)
 800622e:	7011      	strb	r1, [r2, #0]
 8006230:	4619      	mov	r1, r3
 8006232:	4a05      	ldr	r2, [pc, #20]	@ (8006248 <unitree_motor_register+0x94>)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    return object;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bdb0      	pop	{r4, r5, r7, pc}
 8006244:	240006c4 	.word	0x240006c4
 8006248:	240006c8 	.word	0x240006c8

0800624c <unitree_motor_control>:
void unitree_motor_relax(unitree_motor_object_t *motor_obj)
{
    motor_obj->stop_flag = MOTOR_STOP;
}
void unitree_motor_control()
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0

    for (int i = 0; i < idx; i++)
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	e018      	b.n	800628a <unitree_motor_control+0x3e>
    {
        if (unitree_motor_obj[i]->stop_flag == MOTOR_ENALBED)
 8006258:	4a11      	ldr	r2, [pc, #68]	@ (80062a0 <unitree_motor_control+0x54>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006260:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10d      	bne.n	8006284 <unitree_motor_control+0x38>
        {
            SERVO_Send_recv(&unitree_motor_obj[i]->cmd, &unitree_motor_obj[i]->measure);
 8006268:	4a0d      	ldr	r2, [pc, #52]	@ (80062a0 <unitree_motor_control+0x54>)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006270:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006274:	490a      	ldr	r1, [pc, #40]	@ (80062a0 <unitree_motor_control+0x54>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	f7fa fe46 	bl	8000f10 <SERVO_Send_recv>
    for (int i = 0; i < idx; i++)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3301      	adds	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <unitree_motor_control+0x58>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4293      	cmp	r3, r2
 8006294:	dbe0      	blt.n	8006258 <unitree_motor_control+0xc>
        }


    }

 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	240006c8 	.word	0x240006c8
 80062a4:	240006c4 	.word	0x240006c4

080062a8 <__udivmoddi4>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	9d08      	ldr	r5, [sp, #32]
 80062ae:	460f      	mov	r7, r1
 80062b0:	4604      	mov	r4, r0
 80062b2:	468c      	mov	ip, r1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d148      	bne.n	800634a <__udivmoddi4+0xa2>
 80062b8:	428a      	cmp	r2, r1
 80062ba:	4616      	mov	r6, r2
 80062bc:	d961      	bls.n	8006382 <__udivmoddi4+0xda>
 80062be:	fab2 f382 	clz	r3, r2
 80062c2:	b14b      	cbz	r3, 80062d8 <__udivmoddi4+0x30>
 80062c4:	f1c3 0220 	rsb	r2, r3, #32
 80062c8:	fa01 fc03 	lsl.w	ip, r1, r3
 80062cc:	fa20 f202 	lsr.w	r2, r0, r2
 80062d0:	409e      	lsls	r6, r3
 80062d2:	ea42 0c0c 	orr.w	ip, r2, ip
 80062d6:	409c      	lsls	r4, r3
 80062d8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80062dc:	b2b7      	uxth	r7, r6
 80062de:	fbbc f1fe 	udiv	r1, ip, lr
 80062e2:	0c22      	lsrs	r2, r4, #16
 80062e4:	fb0e cc11 	mls	ip, lr, r1, ip
 80062e8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80062ec:	fb01 f007 	mul.w	r0, r1, r7
 80062f0:	4290      	cmp	r0, r2
 80062f2:	d909      	bls.n	8006308 <__udivmoddi4+0x60>
 80062f4:	18b2      	adds	r2, r6, r2
 80062f6:	f101 3cff 	add.w	ip, r1, #4294967295
 80062fa:	f080 80ee 	bcs.w	80064da <__udivmoddi4+0x232>
 80062fe:	4290      	cmp	r0, r2
 8006300:	f240 80eb 	bls.w	80064da <__udivmoddi4+0x232>
 8006304:	3902      	subs	r1, #2
 8006306:	4432      	add	r2, r6
 8006308:	1a12      	subs	r2, r2, r0
 800630a:	b2a4      	uxth	r4, r4
 800630c:	fbb2 f0fe 	udiv	r0, r2, lr
 8006310:	fb0e 2210 	mls	r2, lr, r0, r2
 8006314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006318:	fb00 f707 	mul.w	r7, r0, r7
 800631c:	42a7      	cmp	r7, r4
 800631e:	d909      	bls.n	8006334 <__udivmoddi4+0x8c>
 8006320:	1934      	adds	r4, r6, r4
 8006322:	f100 32ff 	add.w	r2, r0, #4294967295
 8006326:	f080 80da 	bcs.w	80064de <__udivmoddi4+0x236>
 800632a:	42a7      	cmp	r7, r4
 800632c:	f240 80d7 	bls.w	80064de <__udivmoddi4+0x236>
 8006330:	4434      	add	r4, r6
 8006332:	3802      	subs	r0, #2
 8006334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006338:	1be4      	subs	r4, r4, r7
 800633a:	2100      	movs	r1, #0
 800633c:	b11d      	cbz	r5, 8006346 <__udivmoddi4+0x9e>
 800633e:	40dc      	lsrs	r4, r3
 8006340:	2300      	movs	r3, #0
 8006342:	e9c5 4300 	strd	r4, r3, [r5]
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	428b      	cmp	r3, r1
 800634c:	d906      	bls.n	800635c <__udivmoddi4+0xb4>
 800634e:	b10d      	cbz	r5, 8006354 <__udivmoddi4+0xac>
 8006350:	e9c5 0100 	strd	r0, r1, [r5]
 8006354:	2100      	movs	r1, #0
 8006356:	4608      	mov	r0, r1
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	fab3 f183 	clz	r1, r3
 8006360:	2900      	cmp	r1, #0
 8006362:	d148      	bne.n	80063f6 <__udivmoddi4+0x14e>
 8006364:	42bb      	cmp	r3, r7
 8006366:	d302      	bcc.n	800636e <__udivmoddi4+0xc6>
 8006368:	4282      	cmp	r2, r0
 800636a:	f200 8107 	bhi.w	800657c <__udivmoddi4+0x2d4>
 800636e:	1a84      	subs	r4, r0, r2
 8006370:	eb67 0203 	sbc.w	r2, r7, r3
 8006374:	2001      	movs	r0, #1
 8006376:	4694      	mov	ip, r2
 8006378:	2d00      	cmp	r5, #0
 800637a:	d0e4      	beq.n	8006346 <__udivmoddi4+0x9e>
 800637c:	e9c5 4c00 	strd	r4, ip, [r5]
 8006380:	e7e1      	b.n	8006346 <__udivmoddi4+0x9e>
 8006382:	2a00      	cmp	r2, #0
 8006384:	f000 8092 	beq.w	80064ac <__udivmoddi4+0x204>
 8006388:	fab2 f382 	clz	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 80a8 	bne.w	80064e2 <__udivmoddi4+0x23a>
 8006392:	1a8a      	subs	r2, r1, r2
 8006394:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006398:	fa1f fc86 	uxth.w	ip, r6
 800639c:	2101      	movs	r1, #1
 800639e:	0c20      	lsrs	r0, r4, #16
 80063a0:	fbb2 f7fe 	udiv	r7, r2, lr
 80063a4:	fb0e 2217 	mls	r2, lr, r7, r2
 80063a8:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80063ac:	fb0c f007 	mul.w	r0, ip, r7
 80063b0:	4290      	cmp	r0, r2
 80063b2:	d907      	bls.n	80063c4 <__udivmoddi4+0x11c>
 80063b4:	18b2      	adds	r2, r6, r2
 80063b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80063ba:	d202      	bcs.n	80063c2 <__udivmoddi4+0x11a>
 80063bc:	4290      	cmp	r0, r2
 80063be:	f200 80e2 	bhi.w	8006586 <__udivmoddi4+0x2de>
 80063c2:	4647      	mov	r7, r8
 80063c4:	1a12      	subs	r2, r2, r0
 80063c6:	b2a4      	uxth	r4, r4
 80063c8:	fbb2 f0fe 	udiv	r0, r2, lr
 80063cc:	fb0e 2210 	mls	r2, lr, r0, r2
 80063d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80063d4:	fb0c fc00 	mul.w	ip, ip, r0
 80063d8:	45a4      	cmp	ip, r4
 80063da:	d907      	bls.n	80063ec <__udivmoddi4+0x144>
 80063dc:	1934      	adds	r4, r6, r4
 80063de:	f100 32ff 	add.w	r2, r0, #4294967295
 80063e2:	d202      	bcs.n	80063ea <__udivmoddi4+0x142>
 80063e4:	45a4      	cmp	ip, r4
 80063e6:	f200 80cb 	bhi.w	8006580 <__udivmoddi4+0x2d8>
 80063ea:	4610      	mov	r0, r2
 80063ec:	eba4 040c 	sub.w	r4, r4, ip
 80063f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80063f4:	e7a2      	b.n	800633c <__udivmoddi4+0x94>
 80063f6:	f1c1 0620 	rsb	r6, r1, #32
 80063fa:	408b      	lsls	r3, r1
 80063fc:	fa22 fc06 	lsr.w	ip, r2, r6
 8006400:	ea4c 0c03 	orr.w	ip, ip, r3
 8006404:	fa07 f401 	lsl.w	r4, r7, r1
 8006408:	fa20 f306 	lsr.w	r3, r0, r6
 800640c:	40f7      	lsrs	r7, r6
 800640e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006412:	4323      	orrs	r3, r4
 8006414:	fa00 f801 	lsl.w	r8, r0, r1
 8006418:	fa1f fe8c 	uxth.w	lr, ip
 800641c:	fbb7 f0f9 	udiv	r0, r7, r9
 8006420:	0c1c      	lsrs	r4, r3, #16
 8006422:	fb09 7710 	mls	r7, r9, r0, r7
 8006426:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800642a:	fb00 f70e 	mul.w	r7, r0, lr
 800642e:	42a7      	cmp	r7, r4
 8006430:	fa02 f201 	lsl.w	r2, r2, r1
 8006434:	d90a      	bls.n	800644c <__udivmoddi4+0x1a4>
 8006436:	eb1c 0404 	adds.w	r4, ip, r4
 800643a:	f100 3aff 	add.w	sl, r0, #4294967295
 800643e:	f080 809b 	bcs.w	8006578 <__udivmoddi4+0x2d0>
 8006442:	42a7      	cmp	r7, r4
 8006444:	f240 8098 	bls.w	8006578 <__udivmoddi4+0x2d0>
 8006448:	3802      	subs	r0, #2
 800644a:	4464      	add	r4, ip
 800644c:	1be4      	subs	r4, r4, r7
 800644e:	b29f      	uxth	r7, r3
 8006450:	fbb4 f3f9 	udiv	r3, r4, r9
 8006454:	fb09 4413 	mls	r4, r9, r3, r4
 8006458:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 800645c:	fb03 fe0e 	mul.w	lr, r3, lr
 8006460:	45a6      	cmp	lr, r4
 8006462:	d909      	bls.n	8006478 <__udivmoddi4+0x1d0>
 8006464:	eb1c 0404 	adds.w	r4, ip, r4
 8006468:	f103 37ff 	add.w	r7, r3, #4294967295
 800646c:	f080 8082 	bcs.w	8006574 <__udivmoddi4+0x2cc>
 8006470:	45a6      	cmp	lr, r4
 8006472:	d97f      	bls.n	8006574 <__udivmoddi4+0x2cc>
 8006474:	3b02      	subs	r3, #2
 8006476:	4464      	add	r4, ip
 8006478:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800647c:	eba4 040e 	sub.w	r4, r4, lr
 8006480:	fba0 e702 	umull	lr, r7, r0, r2
 8006484:	42bc      	cmp	r4, r7
 8006486:	4673      	mov	r3, lr
 8006488:	46b9      	mov	r9, r7
 800648a:	d363      	bcc.n	8006554 <__udivmoddi4+0x2ac>
 800648c:	d060      	beq.n	8006550 <__udivmoddi4+0x2a8>
 800648e:	b15d      	cbz	r5, 80064a8 <__udivmoddi4+0x200>
 8006490:	ebb8 0203 	subs.w	r2, r8, r3
 8006494:	eb64 0409 	sbc.w	r4, r4, r9
 8006498:	fa04 f606 	lsl.w	r6, r4, r6
 800649c:	fa22 f301 	lsr.w	r3, r2, r1
 80064a0:	431e      	orrs	r6, r3
 80064a2:	40cc      	lsrs	r4, r1
 80064a4:	e9c5 6400 	strd	r6, r4, [r5]
 80064a8:	2100      	movs	r1, #0
 80064aa:	e74c      	b.n	8006346 <__udivmoddi4+0x9e>
 80064ac:	0862      	lsrs	r2, r4, #1
 80064ae:	0848      	lsrs	r0, r1, #1
 80064b0:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80064b4:	0c0b      	lsrs	r3, r1, #16
 80064b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80064ba:	b28a      	uxth	r2, r1
 80064bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064c0:	fbb3 f1f6 	udiv	r1, r3, r6
 80064c4:	07e4      	lsls	r4, r4, #31
 80064c6:	46b4      	mov	ip, r6
 80064c8:	4637      	mov	r7, r6
 80064ca:	46b6      	mov	lr, r6
 80064cc:	231f      	movs	r3, #31
 80064ce:	fbb0 f0f6 	udiv	r0, r0, r6
 80064d2:	1bd2      	subs	r2, r2, r7
 80064d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80064d8:	e761      	b.n	800639e <__udivmoddi4+0xf6>
 80064da:	4661      	mov	r1, ip
 80064dc:	e714      	b.n	8006308 <__udivmoddi4+0x60>
 80064de:	4610      	mov	r0, r2
 80064e0:	e728      	b.n	8006334 <__udivmoddi4+0x8c>
 80064e2:	f1c3 0120 	rsb	r1, r3, #32
 80064e6:	fa20 f201 	lsr.w	r2, r0, r1
 80064ea:	409e      	lsls	r6, r3
 80064ec:	fa27 f101 	lsr.w	r1, r7, r1
 80064f0:	409f      	lsls	r7, r3
 80064f2:	433a      	orrs	r2, r7
 80064f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80064f8:	fa1f fc86 	uxth.w	ip, r6
 80064fc:	fbb1 f7fe 	udiv	r7, r1, lr
 8006500:	fb0e 1017 	mls	r0, lr, r7, r1
 8006504:	0c11      	lsrs	r1, r2, #16
 8006506:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800650a:	fb07 f80c 	mul.w	r8, r7, ip
 800650e:	4588      	cmp	r8, r1
 8006510:	fa04 f403 	lsl.w	r4, r4, r3
 8006514:	d93a      	bls.n	800658c <__udivmoddi4+0x2e4>
 8006516:	1871      	adds	r1, r6, r1
 8006518:	f107 30ff 	add.w	r0, r7, #4294967295
 800651c:	d201      	bcs.n	8006522 <__udivmoddi4+0x27a>
 800651e:	4588      	cmp	r8, r1
 8006520:	d81f      	bhi.n	8006562 <__udivmoddi4+0x2ba>
 8006522:	eba1 0108 	sub.w	r1, r1, r8
 8006526:	fbb1 f8fe 	udiv	r8, r1, lr
 800652a:	fb08 f70c 	mul.w	r7, r8, ip
 800652e:	fb0e 1118 	mls	r1, lr, r8, r1
 8006532:	b292      	uxth	r2, r2
 8006534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006538:	42ba      	cmp	r2, r7
 800653a:	d22f      	bcs.n	800659c <__udivmoddi4+0x2f4>
 800653c:	18b2      	adds	r2, r6, r2
 800653e:	f108 31ff 	add.w	r1, r8, #4294967295
 8006542:	d2c6      	bcs.n	80064d2 <__udivmoddi4+0x22a>
 8006544:	42ba      	cmp	r2, r7
 8006546:	d2c4      	bcs.n	80064d2 <__udivmoddi4+0x22a>
 8006548:	f1a8 0102 	sub.w	r1, r8, #2
 800654c:	4432      	add	r2, r6
 800654e:	e7c0      	b.n	80064d2 <__udivmoddi4+0x22a>
 8006550:	45f0      	cmp	r8, lr
 8006552:	d29c      	bcs.n	800648e <__udivmoddi4+0x1e6>
 8006554:	ebbe 0302 	subs.w	r3, lr, r2
 8006558:	eb67 070c 	sbc.w	r7, r7, ip
 800655c:	3801      	subs	r0, #1
 800655e:	46b9      	mov	r9, r7
 8006560:	e795      	b.n	800648e <__udivmoddi4+0x1e6>
 8006562:	eba6 0808 	sub.w	r8, r6, r8
 8006566:	4441      	add	r1, r8
 8006568:	1eb8      	subs	r0, r7, #2
 800656a:	fbb1 f8fe 	udiv	r8, r1, lr
 800656e:	fb08 f70c 	mul.w	r7, r8, ip
 8006572:	e7dc      	b.n	800652e <__udivmoddi4+0x286>
 8006574:	463b      	mov	r3, r7
 8006576:	e77f      	b.n	8006478 <__udivmoddi4+0x1d0>
 8006578:	4650      	mov	r0, sl
 800657a:	e767      	b.n	800644c <__udivmoddi4+0x1a4>
 800657c:	4608      	mov	r0, r1
 800657e:	e6fb      	b.n	8006378 <__udivmoddi4+0xd0>
 8006580:	4434      	add	r4, r6
 8006582:	3802      	subs	r0, #2
 8006584:	e732      	b.n	80063ec <__udivmoddi4+0x144>
 8006586:	3f02      	subs	r7, #2
 8006588:	4432      	add	r2, r6
 800658a:	e71b      	b.n	80063c4 <__udivmoddi4+0x11c>
 800658c:	eba1 0108 	sub.w	r1, r1, r8
 8006590:	4638      	mov	r0, r7
 8006592:	fbb1 f8fe 	udiv	r8, r1, lr
 8006596:	fb08 f70c 	mul.w	r7, r8, ip
 800659a:	e7c8      	b.n	800652e <__udivmoddi4+0x286>
 800659c:	4641      	mov	r1, r8
 800659e:	e798      	b.n	80064d2 <__udivmoddi4+0x22a>

080065a0 <malloc>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	@ (80065ac <malloc+0xc>)
 80065a2:	4601      	mov	r1, r0
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	f000 b80b 	b.w	80065c0 <_malloc_r>
 80065aa:	bf00      	nop
 80065ac:	24000420 	.word	0x24000420

080065b0 <free>:
 80065b0:	4b02      	ldr	r3, [pc, #8]	@ (80065bc <free+0xc>)
 80065b2:	4601      	mov	r1, r0
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f000 bbe7 	b.w	8006d88 <_free_r>
 80065ba:	bf00      	nop
 80065bc:	24000420 	.word	0x24000420

080065c0 <_malloc_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	f101 050b 	add.w	r5, r1, #11
 80065c8:	2d16      	cmp	r5, #22
 80065ca:	b083      	sub	sp, #12
 80065cc:	4606      	mov	r6, r0
 80065ce:	d823      	bhi.n	8006618 <_malloc_r+0x58>
 80065d0:	2910      	cmp	r1, #16
 80065d2:	f200 80b4 	bhi.w	800673e <_malloc_r+0x17e>
 80065d6:	f000 fabf 	bl	8006b58 <__malloc_lock>
 80065da:	2510      	movs	r5, #16
 80065dc:	2318      	movs	r3, #24
 80065de:	2002      	movs	r0, #2
 80065e0:	4fb8      	ldr	r7, [pc, #736]	@ (80068c4 <_malloc_r+0x304>)
 80065e2:	443b      	add	r3, r7
 80065e4:	f1a3 0208 	sub.w	r2, r3, #8
 80065e8:	685c      	ldr	r4, [r3, #4]
 80065ea:	4294      	cmp	r4, r2
 80065ec:	f000 8164 	beq.w	80068b8 <_malloc_r+0x2f8>
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	68e2      	ldr	r2, [r4, #12]
 80065f4:	68a1      	ldr	r1, [r4, #8]
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	60ca      	str	r2, [r1, #12]
 80065fc:	4423      	add	r3, r4
 80065fe:	4630      	mov	r0, r6
 8006600:	6091      	str	r1, [r2, #8]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	f000 faab 	bl	8006b64 <__malloc_unlock>
 800660e:	3408      	adds	r4, #8
 8006610:	4620      	mov	r0, r4
 8006612:	b003      	add	sp, #12
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006618:	f035 0507 	bics.w	r5, r5, #7
 800661c:	f100 808f 	bmi.w	800673e <_malloc_r+0x17e>
 8006620:	42a9      	cmp	r1, r5
 8006622:	f200 808c 	bhi.w	800673e <_malloc_r+0x17e>
 8006626:	f000 fa97 	bl	8006b58 <__malloc_lock>
 800662a:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
 800662e:	f0c0 81b8 	bcc.w	80069a2 <_malloc_r+0x3e2>
 8006632:	ea5f 2e55 	movs.w	lr, r5, lsr #9
 8006636:	f000 8089 	beq.w	800674c <_malloc_r+0x18c>
 800663a:	f1be 0f04 	cmp.w	lr, #4
 800663e:	f200 8170 	bhi.w	8006922 <_malloc_r+0x362>
 8006642:	ea4f 1e95 	mov.w	lr, r5, lsr #6
 8006646:	f10e 0039 	add.w	r0, lr, #57	@ 0x39
 800664a:	b203      	sxth	r3, r0
 800664c:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4f9c      	ldr	r7, [pc, #624]	@ (80068c4 <_malloc_r+0x304>)
 8006654:	443b      	add	r3, r7
 8006656:	f1a3 0c08 	sub.w	ip, r3, #8
 800665a:	685c      	ldr	r4, [r3, #4]
 800665c:	45a4      	cmp	ip, r4
 800665e:	d107      	bne.n	8006670 <_malloc_r+0xb0>
 8006660:	e00d      	b.n	800667e <_malloc_r+0xbe>
 8006662:	2a00      	cmp	r2, #0
 8006664:	68e1      	ldr	r1, [r4, #12]
 8006666:	f280 8121 	bge.w	80068ac <_malloc_r+0x2ec>
 800666a:	458c      	cmp	ip, r1
 800666c:	d007      	beq.n	800667e <_malloc_r+0xbe>
 800666e:	460c      	mov	r4, r1
 8006670:	6863      	ldr	r3, [r4, #4]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	1b5a      	subs	r2, r3, r5
 8006678:	2a0f      	cmp	r2, #15
 800667a:	ddf2      	ble.n	8006662 <_malloc_r+0xa2>
 800667c:	4670      	mov	r0, lr
 800667e:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 80068c8 <_malloc_r+0x308>
 8006682:	693c      	ldr	r4, [r7, #16]
 8006684:	4544      	cmp	r4, r8
 8006686:	f000 80fe 	beq.w	8006886 <_malloc_r+0x2c6>
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	f023 0c03 	bic.w	ip, r3, #3
 8006690:	ebac 0305 	sub.w	r3, ip, r5
 8006694:	2b0f      	cmp	r3, #15
 8006696:	f300 8189 	bgt.w	80069ac <_malloc_r+0x3ec>
 800669a:	2b00      	cmp	r3, #0
 800669c:	e9c7 8804 	strd	r8, r8, [r7, #16]
 80066a0:	f280 8173 	bge.w	800698a <_malloc_r+0x3ca>
 80066a4:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80066a8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80066ac:	f080 8118 	bcs.w	80068e0 <_malloc_r+0x320>
 80066b0:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80066b4:	3301      	adds	r3, #1
 80066b6:	b219      	sxth	r1, r3
 80066b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80066bc:	2301      	movs	r3, #1
 80066be:	fa03 f30c 	lsl.w	r3, r3, ip
 80066c2:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
 80066c6:	60a2      	str	r2, [r4, #8]
 80066c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80066cc:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
 80066d0:	3b08      	subs	r3, #8
 80066d2:	60e3      	str	r3, [r4, #12]
 80066d4:	f8c7 e004 	str.w	lr, [r7, #4]
 80066d8:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 80066dc:	60d4      	str	r4, [r2, #12]
 80066de:	1083      	asrs	r3, r0, #2
 80066e0:	f04f 0c01 	mov.w	ip, #1
 80066e4:	fa0c fc03 	lsl.w	ip, ip, r3
 80066e8:	45f4      	cmp	ip, lr
 80066ea:	d835      	bhi.n	8006758 <_malloc_r+0x198>
 80066ec:	ea1c 0f0e 	tst.w	ip, lr
 80066f0:	d108      	bne.n	8006704 <_malloc_r+0x144>
 80066f2:	f020 0003 	bic.w	r0, r0, #3
 80066f6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80066fa:	ea1c 0f0e 	tst.w	ip, lr
 80066fe:	f100 0004 	add.w	r0, r0, #4
 8006702:	d0f8      	beq.n	80066f6 <_malloc_r+0x136>
 8006704:	eb07 0ac0 	add.w	sl, r7, r0, lsl #3
 8006708:	46d6      	mov	lr, sl
 800670a:	4681      	mov	r9, r0
 800670c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8006710:	e00b      	b.n	800672a <_malloc_r+0x16a>
 8006712:	6859      	ldr	r1, [r3, #4]
 8006714:	f021 0103 	bic.w	r1, r1, #3
 8006718:	1b4a      	subs	r2, r1, r5
 800671a:	2a0f      	cmp	r2, #15
 800671c:	461c      	mov	r4, r3
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f300 810f 	bgt.w	8006942 <_malloc_r+0x382>
 8006724:	2a00      	cmp	r2, #0
 8006726:	f280 8123 	bge.w	8006970 <_malloc_r+0x3b0>
 800672a:	459e      	cmp	lr, r3
 800672c:	d1f1      	bne.n	8006712 <_malloc_r+0x152>
 800672e:	f109 0901 	add.w	r9, r9, #1
 8006732:	f019 0f03 	tst.w	r9, #3
 8006736:	f10e 0e08 	add.w	lr, lr, #8
 800673a:	d1e7      	bne.n	800670c <_malloc_r+0x14c>
 800673c:	e161      	b.n	8006a02 <_malloc_r+0x442>
 800673e:	230c      	movs	r3, #12
 8006740:	6033      	str	r3, [r6, #0]
 8006742:	2400      	movs	r4, #0
 8006744:	4620      	mov	r0, r4
 8006746:	b003      	add	sp, #12
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006750:	2040      	movs	r0, #64	@ 0x40
 8006752:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8006756:	e77c      	b.n	8006652 <_malloc_r+0x92>
 8006758:	68bc      	ldr	r4, [r7, #8]
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	f023 0903 	bic.w	r9, r3, #3
 8006760:	45a9      	cmp	r9, r5
 8006762:	d304      	bcc.n	800676e <_malloc_r+0x1ae>
 8006764:	eba9 0305 	sub.w	r3, r9, r5
 8006768:	2b0f      	cmp	r3, #15
 800676a:	f300 808f 	bgt.w	800688c <_malloc_r+0x2cc>
 800676e:	4b57      	ldr	r3, [pc, #348]	@ (80068cc <_malloc_r+0x30c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2008      	movs	r0, #8
 8006774:	f103 0810 	add.w	r8, r3, #16
 8006778:	eb04 0309 	add.w	r3, r4, r9
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	f000 fa89 	bl	8006c94 <sysconf>
 8006782:	4a53      	ldr	r2, [pc, #332]	@ (80068d0 <_malloc_r+0x310>)
 8006784:	6813      	ldr	r3, [r2, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	44a8      	add	r8, r5
 800678a:	4683      	mov	fp, r0
 800678c:	d005      	beq.n	800679a <_malloc_r+0x1da>
 800678e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006792:	4480      	add	r8, r0
 8006794:	4243      	negs	r3, r0
 8006796:	ea03 0808 	and.w	r8, r3, r8
 800679a:	4641      	mov	r1, r8
 800679c:	4630      	mov	r0, r6
 800679e:	f000 fa35 	bl	8006c0c <_sbrk_r>
 80067a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80067a6:	4a4a      	ldr	r2, [pc, #296]	@ (80068d0 <_malloc_r+0x310>)
 80067a8:	4682      	mov	sl, r0
 80067aa:	f000 811b 	beq.w	80069e4 <_malloc_r+0x424>
 80067ae:	eb04 0309 	add.w	r3, r4, r9
 80067b2:	4283      	cmp	r3, r0
 80067b4:	f200 8114 	bhi.w	80069e0 <_malloc_r+0x420>
 80067b8:	4b46      	ldr	r3, [pc, #280]	@ (80068d4 <_malloc_r+0x314>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4440      	add	r0, r8
 80067be:	f10b 3cff 	add.w	ip, fp, #4294967295
 80067c2:	6018      	str	r0, [r3, #0]
 80067c4:	f000 8172 	beq.w	8006aac <_malloc_r+0x4ec>
 80067c8:	6811      	ldr	r1, [r2, #0]
 80067ca:	3101      	adds	r1, #1
 80067cc:	f000 817a 	beq.w	8006ac4 <_malloc_r+0x504>
 80067d0:	eb04 0209 	add.w	r2, r4, r9
 80067d4:	ebaa 0202 	sub.w	r2, sl, r2
 80067d8:	4402      	add	r2, r0
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f01a 0207 	ands.w	r2, sl, #7
 80067e0:	e9cd 2300 	strd	r2, r3, [sp]
 80067e4:	f000 8132 	beq.w	8006a4c <_malloc_r+0x48c>
 80067e8:	f1c2 0208 	rsb	r2, r2, #8
 80067ec:	4492      	add	sl, r2
 80067ee:	44d0      	add	r8, sl
 80067f0:	ea08 010c 	and.w	r1, r8, ip
 80067f4:	445a      	add	r2, fp
 80067f6:	1a52      	subs	r2, r2, r1
 80067f8:	ea02 0b0c 	and.w	fp, r2, ip
 80067fc:	4659      	mov	r1, fp
 80067fe:	4630      	mov	r0, r6
 8006800:	f000 fa04 	bl	8006c0c <_sbrk_r>
 8006804:	1c42      	adds	r2, r0, #1
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	f000 8179 	beq.w	8006afe <_malloc_r+0x53e>
 800680c:	eba0 000a 	sub.w	r0, r0, sl
 8006810:	eb00 080b 	add.w	r8, r0, fp
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	f8c7 a008 	str.w	sl, [r7, #8]
 800681a:	f048 0201 	orr.w	r2, r8, #1
 800681e:	4458      	add	r0, fp
 8006820:	42bc      	cmp	r4, r7
 8006822:	f8ca 2004 	str.w	r2, [sl, #4]
 8006826:	6018      	str	r0, [r3, #0]
 8006828:	d016      	beq.n	8006858 <_malloc_r+0x298>
 800682a:	f1b9 0f0f 	cmp.w	r9, #15
 800682e:	f240 814c 	bls.w	8006aca <_malloc_r+0x50a>
 8006832:	6861      	ldr	r1, [r4, #4]
 8006834:	f1a9 020c 	sub.w	r2, r9, #12
 8006838:	f022 0207 	bic.w	r2, r2, #7
 800683c:	f001 0101 	and.w	r1, r1, #1
 8006840:	4311      	orrs	r1, r2
 8006842:	6061      	str	r1, [r4, #4]
 8006844:	f04f 0c05 	mov.w	ip, #5
 8006848:	18a1      	adds	r1, r4, r2
 800684a:	2a0f      	cmp	r2, #15
 800684c:	e9c1 cc01 	strd	ip, ip, [r1, #4]
 8006850:	f200 815d 	bhi.w	8006b0e <_malloc_r+0x54e>
 8006854:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006858:	4b1f      	ldr	r3, [pc, #124]	@ (80068d8 <_malloc_r+0x318>)
 800685a:	6819      	ldr	r1, [r3, #0]
 800685c:	4281      	cmp	r1, r0
 800685e:	bf38      	it	cc
 8006860:	6018      	strcc	r0, [r3, #0]
 8006862:	4b1e      	ldr	r3, [pc, #120]	@ (80068dc <_malloc_r+0x31c>)
 8006864:	6819      	ldr	r1, [r3, #0]
 8006866:	4281      	cmp	r1, r0
 8006868:	bf38      	it	cc
 800686a:	6018      	strcc	r0, [r3, #0]
 800686c:	4654      	mov	r4, sl
 800686e:	f022 0803 	bic.w	r8, r2, #3
 8006872:	45a8      	cmp	r8, r5
 8006874:	eba8 0305 	sub.w	r3, r8, r5
 8006878:	d301      	bcc.n	800687e <_malloc_r+0x2be>
 800687a:	2b0f      	cmp	r3, #15
 800687c:	dc06      	bgt.n	800688c <_malloc_r+0x2cc>
 800687e:	4630      	mov	r0, r6
 8006880:	f000 f970 	bl	8006b64 <__malloc_unlock>
 8006884:	e75d      	b.n	8006742 <_malloc_r+0x182>
 8006886:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800688a:	e728      	b.n	80066de <_malloc_r+0x11e>
 800688c:	1962      	adds	r2, r4, r5
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	f045 0501 	orr.w	r5, r5, #1
 8006896:	6065      	str	r5, [r4, #4]
 8006898:	4630      	mov	r0, r6
 800689a:	60ba      	str	r2, [r7, #8]
 800689c:	6053      	str	r3, [r2, #4]
 800689e:	f000 f961 	bl	8006b64 <__malloc_unlock>
 80068a2:	3408      	adds	r4, #8
 80068a4:	4620      	mov	r0, r4
 80068a6:	b003      	add	sp, #12
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	68a2      	ldr	r2, [r4, #8]
 80068ae:	4423      	add	r3, r4
 80068b0:	60d1      	str	r1, [r2, #12]
 80068b2:	4630      	mov	r0, r6
 80068b4:	608a      	str	r2, [r1, #8]
 80068b6:	e6a4      	b.n	8006602 <_malloc_r+0x42>
 80068b8:	68dc      	ldr	r4, [r3, #12]
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	f47f ae98 	bne.w	80065f0 <_malloc_r+0x30>
 80068c0:	3002      	adds	r0, #2
 80068c2:	e6dc      	b.n	800667e <_malloc_r+0xbe>
 80068c4:	24000018 	.word	0x24000018
 80068c8:	24000020 	.word	0x24000020
 80068cc:	24000718 	.word	0x24000718
 80068d0:	24000010 	.word	0x24000010
 80068d4:	240006e8 	.word	0x240006e8
 80068d8:	24000714 	.word	0x24000714
 80068dc:	24000710 	.word	0x24000710
 80068e0:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80068e4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80068e8:	d372      	bcc.n	80069d0 <_malloc_r+0x410>
 80068ea:	2a14      	cmp	r2, #20
 80068ec:	f200 80c1 	bhi.w	8006a72 <_malloc_r+0x4b2>
 80068f0:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	325b      	adds	r2, #91	@ 0x5b
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	18f9      	adds	r1, r7, r3
 80068fc:	58fb      	ldr	r3, [r7, r3]
 80068fe:	3908      	subs	r1, #8
 8006900:	4299      	cmp	r1, r3
 8006902:	d103      	bne.n	800690c <_malloc_r+0x34c>
 8006904:	e098      	b.n	8006a38 <_malloc_r+0x478>
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	4299      	cmp	r1, r3
 800690a:	d004      	beq.n	8006916 <_malloc_r+0x356>
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	f022 0203 	bic.w	r2, r2, #3
 8006912:	4562      	cmp	r2, ip
 8006914:	d8f7      	bhi.n	8006906 <_malloc_r+0x346>
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	e9c4 3102 	strd	r3, r1, [r4, #8]
 800691c:	608c      	str	r4, [r1, #8]
 800691e:	60dc      	str	r4, [r3, #12]
 8006920:	e6dd      	b.n	80066de <_malloc_r+0x11e>
 8006922:	f1be 0f14 	cmp.w	lr, #20
 8006926:	d960      	bls.n	80069ea <_malloc_r+0x42a>
 8006928:	f1be 0f54 	cmp.w	lr, #84	@ 0x54
 800692c:	f200 80ab 	bhi.w	8006a86 <_malloc_r+0x4c6>
 8006930:	ea4f 3e15 	mov.w	lr, r5, lsr #12
 8006934:	f10e 006f 	add.w	r0, lr, #111	@ 0x6f
 8006938:	b203      	sxth	r3, r0
 800693a:	f10e 0e6e 	add.w	lr, lr, #110	@ 0x6e
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	e687      	b.n	8006652 <_malloc_r+0x92>
 8006942:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8006946:	4630      	mov	r0, r6
 8006948:	1966      	adds	r6, r4, r5
 800694a:	f045 0501 	orr.w	r5, r5, #1
 800694e:	6065      	str	r5, [r4, #4]
 8006950:	f8cc 300c 	str.w	r3, [ip, #12]
 8006954:	f8c3 c008 	str.w	ip, [r3, #8]
 8006958:	f042 0301 	orr.w	r3, r2, #1
 800695c:	e9c7 6604 	strd	r6, r6, [r7, #16]
 8006960:	e9c6 8802 	strd	r8, r8, [r6, #8]
 8006964:	6073      	str	r3, [r6, #4]
 8006966:	5062      	str	r2, [r4, r1]
 8006968:	f000 f8fc 	bl	8006b64 <__malloc_unlock>
 800696c:	3408      	adds	r4, #8
 800696e:	e6e9      	b.n	8006744 <_malloc_r+0x184>
 8006970:	4421      	add	r1, r4
 8006972:	4630      	mov	r0, r6
 8006974:	684a      	ldr	r2, [r1, #4]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	604a      	str	r2, [r1, #4]
 800697c:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8006980:	60d3      	str	r3, [r2, #12]
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	f000 f8ee 	bl	8006b64 <__malloc_unlock>
 8006988:	e6dc      	b.n	8006744 <_malloc_r+0x184>
 800698a:	44a4      	add	ip, r4
 800698c:	4630      	mov	r0, r6
 800698e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	f8cc 3004 	str.w	r3, [ip, #4]
 800699a:	f000 f8e3 	bl	8006b64 <__malloc_unlock>
 800699e:	3408      	adds	r4, #8
 80069a0:	e6d0      	b.n	8006744 <_malloc_r+0x184>
 80069a2:	08e8      	lsrs	r0, r5, #3
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	b21b      	sxth	r3, r3
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	e619      	b.n	80065e0 <_malloc_r+0x20>
 80069ac:	1962      	adds	r2, r4, r5
 80069ae:	f043 0101 	orr.w	r1, r3, #1
 80069b2:	f045 0501 	orr.w	r5, r5, #1
 80069b6:	6065      	str	r5, [r4, #4]
 80069b8:	4630      	mov	r0, r6
 80069ba:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80069be:	e9c2 8802 	strd	r8, r8, [r2, #8]
 80069c2:	6051      	str	r1, [r2, #4]
 80069c4:	f844 300c 	str.w	r3, [r4, ip]
 80069c8:	f000 f8cc 	bl	8006b64 <__malloc_unlock>
 80069cc:	3408      	adds	r4, #8
 80069ce:	e6b9      	b.n	8006744 <_malloc_r+0x184>
 80069d0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80069d4:	f102 0339 	add.w	r3, r2, #57	@ 0x39
 80069d8:	b21b      	sxth	r3, r3
 80069da:	3238      	adds	r2, #56	@ 0x38
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	e78c      	b.n	80068fa <_malloc_r+0x33a>
 80069e0:	42bc      	cmp	r4, r7
 80069e2:	d05c      	beq.n	8006a9e <_malloc_r+0x4de>
 80069e4:	68bc      	ldr	r4, [r7, #8]
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	e741      	b.n	800686e <_malloc_r+0x2ae>
 80069ea:	f10e 005c 	add.w	r0, lr, #92	@ 0x5c
 80069ee:	b203      	sxth	r3, r0
 80069f0:	f10e 0e5b 	add.w	lr, lr, #91	@ 0x5b
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	e62c      	b.n	8006652 <_malloc_r+0x92>
 80069f8:	f85a 3908 	ldr.w	r3, [sl], #-8
 80069fc:	4553      	cmp	r3, sl
 80069fe:	f040 80a6 	bne.w	8006b4e <_malloc_r+0x58e>
 8006a02:	f010 0f03 	tst.w	r0, #3
 8006a06:	f100 30ff 	add.w	r0, r0, #4294967295
 8006a0a:	d1f5      	bne.n	80069f8 <_malloc_r+0x438>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	ea23 030c 	bic.w	r3, r3, ip
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a18:	459c      	cmp	ip, r3
 8006a1a:	f63f ae9d 	bhi.w	8006758 <_malloc_r+0x198>
 8006a1e:	f1bc 0f00 	cmp.w	ip, #0
 8006a22:	d104      	bne.n	8006a2e <_malloc_r+0x46e>
 8006a24:	e698      	b.n	8006758 <_malloc_r+0x198>
 8006a26:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a2a:	f109 0904 	add.w	r9, r9, #4
 8006a2e:	ea1c 0f03 	tst.w	ip, r3
 8006a32:	d0f8      	beq.n	8006a26 <_malloc_r+0x466>
 8006a34:	4648      	mov	r0, r9
 8006a36:	e665      	b.n	8006704 <_malloc_r+0x144>
 8006a38:	1092      	asrs	r2, r2, #2
 8006a3a:	f04f 0c01 	mov.w	ip, #1
 8006a3e:	fa0c f202 	lsl.w	r2, ip, r2
 8006a42:	ea4e 0e02 	orr.w	lr, lr, r2
 8006a46:	f8c7 e004 	str.w	lr, [r7, #4]
 8006a4a:	e765      	b.n	8006918 <_malloc_r+0x358>
 8006a4c:	eb0a 0208 	add.w	r2, sl, r8
 8006a50:	ea02 020c 	and.w	r2, r2, ip
 8006a54:	ebab 0202 	sub.w	r2, fp, r2
 8006a58:	ea02 0b0c 	and.w	fp, r2, ip
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 f8d4 	bl	8006c0c <_sbrk_r>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	f47f aed0 	bne.w	800680c <_malloc_r+0x24c>
 8006a6c:	f8dd b000 	ldr.w	fp, [sp]
 8006a70:	e6d0      	b.n	8006814 <_malloc_r+0x254>
 8006a72:	2a54      	cmp	r2, #84	@ 0x54
 8006a74:	d82d      	bhi.n	8006ad2 <_malloc_r+0x512>
 8006a76:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8006a7a:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
 8006a7e:	b21b      	sxth	r3, r3
 8006a80:	326e      	adds	r2, #110	@ 0x6e
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	e739      	b.n	80068fa <_malloc_r+0x33a>
 8006a86:	f5be 7faa 	cmp.w	lr, #340	@ 0x154
 8006a8a:	d82d      	bhi.n	8006ae8 <_malloc_r+0x528>
 8006a8c:	ea4f 3ed5 	mov.w	lr, r5, lsr #15
 8006a90:	f10e 0078 	add.w	r0, lr, #120	@ 0x78
 8006a94:	b203      	sxth	r3, r0
 8006a96:	f10e 0e77 	add.w	lr, lr, #119	@ 0x77
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	e5d9      	b.n	8006652 <_malloc_r+0x92>
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006b54 <_malloc_r+0x594>)
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	4440      	add	r0, r8
 8006aa4:	f10b 3cff 	add.w	ip, fp, #4294967295
 8006aa8:	6018      	str	r0, [r3, #0]
 8006aaa:	e68d      	b.n	80067c8 <_malloc_r+0x208>
 8006aac:	ea1a 0f0c 	tst.w	sl, ip
 8006ab0:	f47f ae8a 	bne.w	80067c8 <_malloc_r+0x208>
 8006ab4:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8006ab8:	44c8      	add	r8, r9
 8006aba:	f048 0201 	orr.w	r2, r8, #1
 8006abe:	f8ca 2004 	str.w	r2, [sl, #4]
 8006ac2:	e6c9      	b.n	8006858 <_malloc_r+0x298>
 8006ac4:	f8c2 a000 	str.w	sl, [r2]
 8006ac8:	e688      	b.n	80067dc <_malloc_r+0x21c>
 8006aca:	2301      	movs	r3, #1
 8006acc:	f8ca 3004 	str.w	r3, [sl, #4]
 8006ad0:	e6d5      	b.n	800687e <_malloc_r+0x2be>
 8006ad2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8006ad6:	d825      	bhi.n	8006b24 <_malloc_r+0x564>
 8006ad8:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006adc:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 8006ae0:	b21b      	sxth	r3, r3
 8006ae2:	3277      	adds	r2, #119	@ 0x77
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	e708      	b.n	80068fa <_malloc_r+0x33a>
 8006ae8:	f240 5354 	movw	r3, #1364	@ 0x554
 8006aec:	459e      	cmp	lr, r3
 8006aee:	d824      	bhi.n	8006b3a <_malloc_r+0x57a>
 8006af0:	0cab      	lsrs	r3, r5, #18
 8006af2:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
 8006af6:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
 8006afa:	00c3      	lsls	r3, r0, #3
 8006afc:	e5a9      	b.n	8006652 <_malloc_r+0x92>
 8006afe:	9a00      	ldr	r2, [sp, #0]
 8006b00:	3a08      	subs	r2, #8
 8006b02:	4490      	add	r8, r2
 8006b04:	eba8 080a 	sub.w	r8, r8, sl
 8006b08:	f04f 0b00 	mov.w	fp, #0
 8006b0c:	e682      	b.n	8006814 <_malloc_r+0x254>
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f104 0108 	add.w	r1, r4, #8
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	f000 f937 	bl	8006d88 <_free_r>
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	e697      	b.n	8006854 <_malloc_r+0x294>
 8006b24:	f240 5354 	movw	r3, #1364	@ 0x554
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d80c      	bhi.n	8006b46 <_malloc_r+0x586>
 8006b2c:	ea4f 429c 	mov.w	r2, ip, lsr #18
 8006b30:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	327c      	adds	r2, #124	@ 0x7c
 8006b38:	e6df      	b.n	80068fa <_malloc_r+0x33a>
 8006b3a:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8006b3e:	207f      	movs	r0, #127	@ 0x7f
 8006b40:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 8006b44:	e585      	b.n	8006652 <_malloc_r+0x92>
 8006b46:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8006b4a:	227e      	movs	r2, #126	@ 0x7e
 8006b4c:	e6d5      	b.n	80068fa <_malloc_r+0x33a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	e760      	b.n	8006a14 <_malloc_r+0x454>
 8006b52:	bf00      	nop
 8006b54:	240006e8 	.word	0x240006e8

08006b58 <__malloc_lock>:
 8006b58:	4801      	ldr	r0, [pc, #4]	@ (8006b60 <__malloc_lock+0x8>)
 8006b5a:	f000 b897 	b.w	8006c8c <__retarget_lock_acquire_recursive>
 8006b5e:	bf00      	nop
 8006b60:	24000858 	.word	0x24000858

08006b64 <__malloc_unlock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	@ (8006b6c <__malloc_unlock+0x8>)
 8006b66:	f000 b893 	b.w	8006c90 <__retarget_lock_release_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	24000858 	.word	0x24000858

08006b70 <memset>:
 8006b70:	0783      	lsls	r3, r0, #30
 8006b72:	b530      	push	{r4, r5, lr}
 8006b74:	d046      	beq.n	8006c04 <memset+0x94>
 8006b76:	1884      	adds	r4, r0, r2
 8006b78:	4684      	mov	ip, r0
 8006b7a:	e004      	b.n	8006b86 <memset+0x16>
 8006b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b80:	079d      	lsls	r5, r3, #30
 8006b82:	d004      	beq.n	8006b8e <memset+0x1e>
 8006b84:	469c      	mov	ip, r3
 8006b86:	45a4      	cmp	ip, r4
 8006b88:	4663      	mov	r3, ip
 8006b8a:	d1f7      	bne.n	8006b7c <memset+0xc>
 8006b8c:	bd30      	pop	{r4, r5, pc}
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	4402      	add	r2, r0
 8006b92:	eba2 020c 	sub.w	r2, r2, ip
 8006b96:	2a03      	cmp	r2, #3
 8006b98:	d929      	bls.n	8006bee <memset+0x7e>
 8006b9a:	b2cc      	uxtb	r4, r1
 8006b9c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
 8006ba0:	2a0f      	cmp	r2, #15
 8006ba2:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8006ba6:	d92f      	bls.n	8006c08 <memset+0x98>
 8006ba8:	f1a2 0c10 	sub.w	ip, r2, #16
 8006bac:	f02c 0c0f 	bic.w	ip, ip, #15
 8006bb0:	f103 0510 	add.w	r5, r3, #16
 8006bb4:	44ac      	add	ip, r5
 8006bb6:	e9c3 4400 	strd	r4, r4, [r3]
 8006bba:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8006bbe:	3310      	adds	r3, #16
 8006bc0:	4563      	cmp	r3, ip
 8006bc2:	d1f8      	bne.n	8006bb6 <memset+0x46>
 8006bc4:	f012 0f0c 	tst.w	r2, #12
 8006bc8:	f002 0e0f 	and.w	lr, r2, #15
 8006bcc:	d018      	beq.n	8006c00 <memset+0x90>
 8006bce:	f02e 0c03 	bic.w	ip, lr, #3
 8006bd2:	449c      	add	ip, r3
 8006bd4:	f1ae 0504 	sub.w	r5, lr, #4
 8006bd8:	461a      	mov	r2, r3
 8006bda:	f842 4b04 	str.w	r4, [r2], #4
 8006bde:	4562      	cmp	r2, ip
 8006be0:	d1fb      	bne.n	8006bda <memset+0x6a>
 8006be2:	f025 0403 	bic.w	r4, r5, #3
 8006be6:	3304      	adds	r3, #4
 8006be8:	f00e 0203 	and.w	r2, lr, #3
 8006bec:	4423      	add	r3, r4
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	d0cc      	beq.n	8006b8c <memset+0x1c>
 8006bf2:	b2c9      	uxtb	r1, r1
 8006bf4:	441a      	add	r2, r3
 8006bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d1fb      	bne.n	8006bf6 <memset+0x86>
 8006bfe:	bd30      	pop	{r4, r5, pc}
 8006c00:	4672      	mov	r2, lr
 8006c02:	e7f4      	b.n	8006bee <memset+0x7e>
 8006c04:	4603      	mov	r3, r0
 8006c06:	e7c6      	b.n	8006b96 <memset+0x26>
 8006c08:	4696      	mov	lr, r2
 8006c0a:	e7e0      	b.n	8006bce <memset+0x5e>

08006c0c <_sbrk_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d07      	ldr	r5, [pc, #28]	@ (8006c2c <_sbrk_r+0x20>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602a      	str	r2, [r5, #0]
 8006c18:	f7fa fb4a 	bl	80012b0 <_sbrk>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d000      	beq.n	8006c22 <_sbrk_r+0x16>
 8006c20:	bd38      	pop	{r3, r4, r5, pc}
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0fb      	beq.n	8006c20 <_sbrk_r+0x14>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	24000854 	.word	0x24000854

08006c30 <__errno>:
 8006c30:	4b01      	ldr	r3, [pc, #4]	@ (8006c38 <__errno+0x8>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	24000420 	.word	0x24000420

08006c3c <__libc_init_array>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <__libc_init_array+0x40>)
 8006c40:	4d0f      	ldr	r5, [pc, #60]	@ (8006c80 <__libc_init_array+0x44>)
 8006c42:	42ab      	cmp	r3, r5
 8006c44:	eba3 0605 	sub.w	r6, r3, r5
 8006c48:	d007      	beq.n	8006c5a <__libc_init_array+0x1e>
 8006c4a:	10b6      	asrs	r6, r6, #2
 8006c4c:	2400      	movs	r4, #0
 8006c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c52:	3401      	adds	r4, #1
 8006c54:	4798      	blx	r3
 8006c56:	42a6      	cmp	r6, r4
 8006c58:	d8f9      	bhi.n	8006c4e <__libc_init_array+0x12>
 8006c5a:	f000 f9e1 	bl	8007020 <_init>
 8006c5e:	4d09      	ldr	r5, [pc, #36]	@ (8006c84 <__libc_init_array+0x48>)
 8006c60:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <__libc_init_array+0x4c>)
 8006c62:	1b5e      	subs	r6, r3, r5
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8006c6a:	d006      	beq.n	8006c7a <__libc_init_array+0x3e>
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c72:	3401      	adds	r4, #1
 8006c74:	4798      	blx	r3
 8006c76:	42a6      	cmp	r6, r4
 8006c78:	d8f9      	bhi.n	8006c6e <__libc_init_array+0x32>
 8006c7a:	bd70      	pop	{r4, r5, r6, pc}
 8006c7c:	08007278 	.word	0x08007278
 8006c80:	08007278 	.word	0x08007278
 8006c84:	08007278 	.word	0x08007278
 8006c88:	08007280 	.word	0x08007280

08006c8c <__retarget_lock_acquire_recursive>:
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop

08006c90 <__retarget_lock_release_recursive>:
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <sysconf>:
 8006c94:	2808      	cmp	r0, #8
 8006c96:	d102      	bne.n	8006c9e <sysconf+0xa>
 8006c98:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006c9c:	4770      	bx	lr
 8006c9e:	b508      	push	{r3, lr}
 8006ca0:	f7ff ffc6 	bl	8006c30 <__errno>
 8006ca4:	2316      	movs	r3, #22
 8006ca6:	6003      	str	r3, [r0, #0]
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	bd08      	pop	{r3, pc}
 8006cae:	bf00      	nop

08006cb0 <register_fini>:
 8006cb0:	4b02      	ldr	r3, [pc, #8]	@ (8006cbc <register_fini+0xc>)
 8006cb2:	b113      	cbz	r3, 8006cba <register_fini+0xa>
 8006cb4:	4802      	ldr	r0, [pc, #8]	@ (8006cc0 <register_fini+0x10>)
 8006cb6:	f000 b805 	b.w	8006cc4 <atexit>
 8006cba:	4770      	bx	lr
 8006cbc:	00000000 	.word	0x00000000
 8006cc0:	08006f79 	.word	0x08006f79

08006cc4 <atexit>:
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 b968 	b.w	8006fa0 <__register_exitproc>

08006cd0 <_malloc_trim_r>:
 8006cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	2008      	movs	r0, #8
 8006cd8:	4689      	mov	r9, r1
 8006cda:	f7ff ffdb 	bl	8006c94 <sysconf>
 8006cde:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8006d7c <_malloc_trim_r+0xac>
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff ff37 	bl	8006b58 <__malloc_lock>
 8006cea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cee:	685f      	ldr	r7, [r3, #4]
 8006cf0:	f027 0703 	bic.w	r7, r7, #3
 8006cf4:	f1a7 0411 	sub.w	r4, r7, #17
 8006cf8:	eba4 0409 	sub.w	r4, r4, r9
 8006cfc:	442c      	add	r4, r5
 8006cfe:	fbb4 f4f5 	udiv	r4, r4, r5
 8006d02:	3c01      	subs	r4, #1
 8006d04:	fb05 f404 	mul.w	r4, r5, r4
 8006d08:	42a5      	cmp	r5, r4
 8006d0a:	dc08      	bgt.n	8006d1e <_malloc_trim_r+0x4e>
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff ff7c 	bl	8006c0c <_sbrk_r>
 8006d14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d18:	443b      	add	r3, r7
 8006d1a:	4298      	cmp	r0, r3
 8006d1c:	d005      	beq.n	8006d2a <_malloc_trim_r+0x5a>
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff ff20 	bl	8006b64 <__malloc_unlock>
 8006d24:	2000      	movs	r0, #0
 8006d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d2a:	4261      	negs	r1, r4
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff ff6d 	bl	8006c0c <_sbrk_r>
 8006d32:	3001      	adds	r0, #1
 8006d34:	d00f      	beq.n	8006d56 <_malloc_trim_r+0x86>
 8006d36:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <_malloc_trim_r+0xb0>)
 8006d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d3c:	1b3f      	subs	r7, r7, r4
 8006d3e:	f047 0701 	orr.w	r7, r7, #1
 8006d42:	605f      	str	r7, [r3, #4]
 8006d44:	6813      	ldr	r3, [r2, #0]
 8006d46:	4630      	mov	r0, r6
 8006d48:	1b1b      	subs	r3, r3, r4
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	f7ff ff0a 	bl	8006b64 <__malloc_unlock>
 8006d50:	2001      	movs	r0, #1
 8006d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d56:	2100      	movs	r1, #0
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff ff57 	bl	8006c0c <_sbrk_r>
 8006d5e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006d62:	1a83      	subs	r3, r0, r2
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	ddda      	ble.n	8006d1e <_malloc_trim_r+0x4e>
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6053      	str	r3, [r2, #4]
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <_malloc_trim_r+0xb4>)
 8006d70:	4903      	ldr	r1, [pc, #12]	@ (8006d80 <_malloc_trim_r+0xb0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	1ac0      	subs	r0, r0, r3
 8006d76:	6008      	str	r0, [r1, #0]
 8006d78:	e7d1      	b.n	8006d1e <_malloc_trim_r+0x4e>
 8006d7a:	bf00      	nop
 8006d7c:	24000018 	.word	0x24000018
 8006d80:	240006e8 	.word	0x240006e8
 8006d84:	24000010 	.word	0x24000010

08006d88 <_free_r>:
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d05b      	beq.n	8006e44 <_free_r+0xbc>
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	4607      	mov	r7, r0
 8006d92:	f7ff fee1 	bl	8006b58 <__malloc_lock>
 8006d96:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8006d9a:	4d74      	ldr	r5, [pc, #464]	@ (8006f6c <_free_r+0x1e4>)
 8006d9c:	f1a4 0208 	sub.w	r2, r4, #8
 8006da0:	f02c 0301 	bic.w	r3, ip, #1
 8006da4:	18d1      	adds	r1, r2, r3
 8006da6:	68a8      	ldr	r0, [r5, #8]
 8006da8:	684e      	ldr	r6, [r1, #4]
 8006daa:	4288      	cmp	r0, r1
 8006dac:	f026 0603 	bic.w	r6, r6, #3
 8006db0:	f00c 0e01 	and.w	lr, ip, #1
 8006db4:	d07e      	beq.n	8006eb4 <_free_r+0x12c>
 8006db6:	1988      	adds	r0, r1, r6
 8006db8:	604e      	str	r6, [r1, #4]
 8006dba:	6840      	ldr	r0, [r0, #4]
 8006dbc:	f000 0001 	and.w	r0, r0, #1
 8006dc0:	f1be 0f00 	cmp.w	lr, #0
 8006dc4:	d12f      	bne.n	8006e26 <_free_r+0x9e>
 8006dc6:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8006dca:	1b12      	subs	r2, r2, r4
 8006dcc:	4423      	add	r3, r4
 8006dce:	6894      	ldr	r4, [r2, #8]
 8006dd0:	f105 0c08 	add.w	ip, r5, #8
 8006dd4:	4564      	cmp	r4, ip
 8006dd6:	d062      	beq.n	8006e9e <_free_r+0x116>
 8006dd8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8006ddc:	f8c4 e00c 	str.w	lr, [r4, #12]
 8006de0:	f8ce 4008 	str.w	r4, [lr, #8]
 8006de4:	2800      	cmp	r0, #0
 8006de6:	d07f      	beq.n	8006ee8 <_free_r+0x160>
 8006de8:	f043 0001 	orr.w	r0, r3, #1
 8006dec:	6050      	str	r0, [r2, #4]
 8006dee:	600b      	str	r3, [r1, #0]
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df4:	d22f      	bcs.n	8006e56 <_free_r+0xce>
 8006df6:	08d9      	lsrs	r1, r3, #3
 8006df8:	6868      	ldr	r0, [r5, #4]
 8006dfa:	095c      	lsrs	r4, r3, #5
 8006dfc:	3101      	adds	r1, #1
 8006dfe:	2301      	movs	r3, #1
 8006e00:	b209      	sxth	r1, r1
 8006e02:	40a3      	lsls	r3, r4
 8006e04:	4303      	orrs	r3, r0
 8006e06:	606b      	str	r3, [r5, #4]
 8006e08:	f855 0031 	ldr.w	r0, [r5, r1, lsl #3]
 8006e0c:	6090      	str	r0, [r2, #8]
 8006e0e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
 8006e12:	3b08      	subs	r3, #8
 8006e14:	60d3      	str	r3, [r2, #12]
 8006e16:	f845 2031 	str.w	r2, [r5, r1, lsl #3]
 8006e1a:	60c2      	str	r2, [r0, #12]
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e22:	f7ff be9f 	b.w	8006b64 <__malloc_unlock>
 8006e26:	b970      	cbnz	r0, 8006e46 <_free_r+0xbe>
 8006e28:	4433      	add	r3, r6
 8006e2a:	f105 0c08 	add.w	ip, r5, #8
 8006e2e:	6888      	ldr	r0, [r1, #8]
 8006e30:	4560      	cmp	r0, ip
 8006e32:	f043 0401 	orr.w	r4, r3, #1
 8006e36:	d071      	beq.n	8006f1c <_free_r+0x194>
 8006e38:	68c9      	ldr	r1, [r1, #12]
 8006e3a:	60c1      	str	r1, [r0, #12]
 8006e3c:	6088      	str	r0, [r1, #8]
 8006e3e:	6054      	str	r4, [r2, #4]
 8006e40:	50d3      	str	r3, [r2, r3]
 8006e42:	e7d5      	b.n	8006df0 <_free_r+0x68>
 8006e44:	4770      	bx	lr
 8006e46:	f04c 0101 	orr.w	r1, ip, #1
 8006e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e4e:	f844 1c04 	str.w	r1, [r4, #-4]
 8006e52:	50d3      	str	r3, [r2, r3]
 8006e54:	d3cf      	bcc.n	8006df6 <_free_r+0x6e>
 8006e56:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006e5a:	ea4f 2053 	mov.w	r0, r3, lsr #9
 8006e5e:	d245      	bcs.n	8006eec <_free_r+0x164>
 8006e60:	0998      	lsrs	r0, r3, #6
 8006e62:	f100 0139 	add.w	r1, r0, #57	@ 0x39
 8006e66:	b209      	sxth	r1, r1
 8006e68:	f100 0438 	add.w	r4, r0, #56	@ 0x38
 8006e6c:	00c9      	lsls	r1, r1, #3
 8006e6e:	1868      	adds	r0, r5, r1
 8006e70:	5869      	ldr	r1, [r5, r1]
 8006e72:	3808      	subs	r0, #8
 8006e74:	4288      	cmp	r0, r1
 8006e76:	d103      	bne.n	8006e80 <_free_r+0xf8>
 8006e78:	e057      	b.n	8006f2a <_free_r+0x1a2>
 8006e7a:	6889      	ldr	r1, [r1, #8]
 8006e7c:	4288      	cmp	r0, r1
 8006e7e:	d004      	beq.n	8006e8a <_free_r+0x102>
 8006e80:	684c      	ldr	r4, [r1, #4]
 8006e82:	f024 0403 	bic.w	r4, r4, #3
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d8f7      	bhi.n	8006e7a <_free_r+0xf2>
 8006e8a:	68c8      	ldr	r0, [r1, #12]
 8006e8c:	e9c2 1002 	strd	r1, r0, [r2, #8]
 8006e90:	6082      	str	r2, [r0, #8]
 8006e92:	4638      	mov	r0, r7
 8006e94:	60ca      	str	r2, [r1, #12]
 8006e96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e9a:	f7ff be63 	b.w	8006b64 <__malloc_unlock>
 8006e9e:	bb88      	cbnz	r0, 8006f04 <_free_r+0x17c>
 8006ea0:	441e      	add	r6, r3
 8006ea2:	e9d1 1302 	ldrd	r1, r3, [r1, #8]
 8006ea6:	60cb      	str	r3, [r1, #12]
 8006ea8:	6099      	str	r1, [r3, #8]
 8006eaa:	f046 0301 	orr.w	r3, r6, #1
 8006eae:	6053      	str	r3, [r2, #4]
 8006eb0:	5196      	str	r6, [r2, r6]
 8006eb2:	e7b3      	b.n	8006e1c <_free_r+0x94>
 8006eb4:	441e      	add	r6, r3
 8006eb6:	f1be 0f00 	cmp.w	lr, #0
 8006eba:	d107      	bne.n	8006ecc <_free_r+0x144>
 8006ebc:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006ec0:	1ad2      	subs	r2, r2, r3
 8006ec2:	441e      	add	r6, r3
 8006ec4:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 8006ec8:	60cb      	str	r3, [r1, #12]
 8006eca:	6099      	str	r1, [r3, #8]
 8006ecc:	f046 0301 	orr.w	r3, r6, #1
 8006ed0:	6053      	str	r3, [r2, #4]
 8006ed2:	4b27      	ldr	r3, [pc, #156]	@ (8006f70 <_free_r+0x1e8>)
 8006ed4:	60aa      	str	r2, [r5, #8]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	42b3      	cmp	r3, r6
 8006eda:	d89f      	bhi.n	8006e1c <_free_r+0x94>
 8006edc:	4b25      	ldr	r3, [pc, #148]	@ (8006f74 <_free_r+0x1ec>)
 8006ede:	4638      	mov	r0, r7
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	f7ff fef5 	bl	8006cd0 <_malloc_trim_r>
 8006ee6:	e799      	b.n	8006e1c <_free_r+0x94>
 8006ee8:	4433      	add	r3, r6
 8006eea:	e7a0      	b.n	8006e2e <_free_r+0xa6>
 8006eec:	2814      	cmp	r0, #20
 8006eee:	d90e      	bls.n	8006f0e <_free_r+0x186>
 8006ef0:	2854      	cmp	r0, #84	@ 0x54
 8006ef2:	d821      	bhi.n	8006f38 <_free_r+0x1b0>
 8006ef4:	0b18      	lsrs	r0, r3, #12
 8006ef6:	f100 016f 	add.w	r1, r0, #111	@ 0x6f
 8006efa:	b209      	sxth	r1, r1
 8006efc:	f100 046e 	add.w	r4, r0, #110	@ 0x6e
 8006f00:	00c9      	lsls	r1, r1, #3
 8006f02:	e7b4      	b.n	8006e6e <_free_r+0xe6>
 8006f04:	f043 0001 	orr.w	r0, r3, #1
 8006f08:	6050      	str	r0, [r2, #4]
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	e786      	b.n	8006e1c <_free_r+0x94>
 8006f0e:	f100 015c 	add.w	r1, r0, #92	@ 0x5c
 8006f12:	b209      	sxth	r1, r1
 8006f14:	f100 045b 	add.w	r4, r0, #91	@ 0x5b
 8006f18:	00c9      	lsls	r1, r1, #3
 8006f1a:	e7a8      	b.n	8006e6e <_free_r+0xe6>
 8006f1c:	e9c5 2204 	strd	r2, r2, [r5, #16]
 8006f20:	e9c2 cc02 	strd	ip, ip, [r2, #8]
 8006f24:	6054      	str	r4, [r2, #4]
 8006f26:	50d3      	str	r3, [r2, r3]
 8006f28:	e778      	b.n	8006e1c <_free_r+0x94>
 8006f2a:	686e      	ldr	r6, [r5, #4]
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	2301      	movs	r3, #1
 8006f30:	40a3      	lsls	r3, r4
 8006f32:	4333      	orrs	r3, r6
 8006f34:	606b      	str	r3, [r5, #4]
 8006f36:	e7a9      	b.n	8006e8c <_free_r+0x104>
 8006f38:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 8006f3c:	d807      	bhi.n	8006f4e <_free_r+0x1c6>
 8006f3e:	0bd8      	lsrs	r0, r3, #15
 8006f40:	f100 0178 	add.w	r1, r0, #120	@ 0x78
 8006f44:	b209      	sxth	r1, r1
 8006f46:	f100 0477 	add.w	r4, r0, #119	@ 0x77
 8006f4a:	00c9      	lsls	r1, r1, #3
 8006f4c:	e78f      	b.n	8006e6e <_free_r+0xe6>
 8006f4e:	f240 5154 	movw	r1, #1364	@ 0x554
 8006f52:	4288      	cmp	r0, r1
 8006f54:	d806      	bhi.n	8006f64 <_free_r+0x1dc>
 8006f56:	0c98      	lsrs	r0, r3, #18
 8006f58:	f100 017d 	add.w	r1, r0, #125	@ 0x7d
 8006f5c:	f100 047c 	add.w	r4, r0, #124	@ 0x7c
 8006f60:	00c9      	lsls	r1, r1, #3
 8006f62:	e784      	b.n	8006e6e <_free_r+0xe6>
 8006f64:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8006f68:	247e      	movs	r4, #126	@ 0x7e
 8006f6a:	e780      	b.n	8006e6e <_free_r+0xe6>
 8006f6c:	24000018 	.word	0x24000018
 8006f70:	24000014 	.word	0x24000014
 8006f74:	24000718 	.word	0x24000718

08006f78 <__libc_fini_array>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	@ (8006f98 <__libc_fini_array+0x20>)
 8006f7c:	4c07      	ldr	r4, [pc, #28]	@ (8006f9c <__libc_fini_array+0x24>)
 8006f7e:	1b2c      	subs	r4, r5, r4
 8006f80:	10a4      	asrs	r4, r4, #2
 8006f82:	d005      	beq.n	8006f90 <__libc_fini_array+0x18>
 8006f84:	3c01      	subs	r4, #1
 8006f86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006f8a:	4798      	blx	r3
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	d1f9      	bne.n	8006f84 <__libc_fini_array+0xc>
 8006f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f94:	f000 b84a 	b.w	800702c <_fini>
 8006f98:	08007284 	.word	0x08007284
 8006f9c:	08007280 	.word	0x08007280

08006fa0 <__register_exitproc>:
 8006fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	4d1b      	ldr	r5, [pc, #108]	@ (8007014 <__register_exitproc+0x74>)
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	6828      	ldr	r0, [r5, #0]
 8006faa:	4698      	mov	r8, r3
 8006fac:	460f      	mov	r7, r1
 8006fae:	4691      	mov	r9, r2
 8006fb0:	f7ff fe6c 	bl	8006c8c <__retarget_lock_acquire_recursive>
 8006fb4:	4b18      	ldr	r3, [pc, #96]	@ (8007018 <__register_exitproc+0x78>)
 8006fb6:	681c      	ldr	r4, [r3, #0]
 8006fb8:	b31c      	cbz	r4, 8007002 <__register_exitproc+0x62>
 8006fba:	6828      	ldr	r0, [r5, #0]
 8006fbc:	6865      	ldr	r5, [r4, #4]
 8006fbe:	2d1f      	cmp	r5, #31
 8006fc0:	dc22      	bgt.n	8007008 <__register_exitproc+0x68>
 8006fc2:	b94e      	cbnz	r6, 8006fd8 <__register_exitproc+0x38>
 8006fc4:	1c6b      	adds	r3, r5, #1
 8006fc6:	3502      	adds	r5, #2
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8006fce:	f7ff fe5f 	bl	8006c90 <__retarget_lock_release_recursive>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8006fe2:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
 8006fe6:	40ab      	lsls	r3, r5
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	2e02      	cmp	r6, #2
 8006fec:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
 8006ff0:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8006ff4:	d1e6      	bne.n	8006fc4 <__register_exitproc+0x24>
 8006ff6:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
 8007000:	e7e0      	b.n	8006fc4 <__register_exitproc+0x24>
 8007002:	4c06      	ldr	r4, [pc, #24]	@ (800701c <__register_exitproc+0x7c>)
 8007004:	601c      	str	r4, [r3, #0]
 8007006:	e7d8      	b.n	8006fba <__register_exitproc+0x1a>
 8007008:	f7ff fe42 	bl	8006c90 <__retarget_lock_release_recursive>
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	e7e0      	b.n	8006fd4 <__register_exitproc+0x34>
 8007012:	bf00      	nop
 8007014:	24000568 	.word	0x24000568
 8007018:	24000860 	.word	0x24000860
 800701c:	24000864 	.word	0x24000864

08007020 <_init>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr

0800702c <_fini>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr
